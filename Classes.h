#pragma once
//YouTube : EFK
//Discord : EFK#6607
//Twitter : EFK
//Twitch : Zeusty

//Uworld : 0xc446238
//BoneArray : 0x5B0

namespace AFortAIPawn
{
	constexpr auto DeimosBatchedGameplayCueParameters = 0x1678; // FGameplayCueParameters
	constexpr auto AttributeReplicationProxy = 0x1748; // FFortAIAttributeReplicationProxy
	constexpr auto RepAnimMontageInfo = 0x1750; // FGameplayAbilityRepAnimMontage
	constexpr auto RepSharedAnimInfo = 0x1788; // FGameplayAbilityRepSharedAnim
	constexpr auto SimulatedProxyGameplayCues = 0x17a0; // FMinimalGameplayCueReplicationProxy
	constexpr auto bAttacking = 0x1a70; // char : 1
	constexpr auto bDied = 0x1a70; // char : 1
	constexpr auto bHitReact = 0x1a70; // char : 1
	constexpr auto bFullBodyHitReact = 0x1a70; // char : 1
	constexpr auto bDancing = 0x1a70; // char : 1
	constexpr auto bRangedAttacking = 0x1a70; // char : 1
	constexpr auto bHasGoalActor = 0x1a70; // char : 1
	constexpr auto bFrozen = 0x1a70; // char : 1
	constexpr auto bNotifySpawnRift = 0x1a74; // char : 1
	constexpr auto bHasInventory = 0x1a74; // char : 1
	constexpr auto bUsesDBNO = 0x1a74; // char : 1
	constexpr auto bUseSharedAnimation = 0x1a74; // char : 1
	constexpr auto bDespawnedDueToInactivity = 0x1a74; // char : 1
	constexpr auto bKilledOrDowned = 0x1a74; // char : 1
	constexpr auto bNeedsDeathNotification = 0x1a74; // char : 1
	constexpr auto bShouldUseRootComponentForTargetSelectionOverlap = 0x1a74; // char : 1
	constexpr auto bIsCharging = 0x1a75; // char : 1
	constexpr auto bCanShowMinimapIndicator = 0x1a75; // char : 1
	constexpr auto bIsCowering = 0x1a75; // char : 1
	constexpr auto bShowMinimapFarOffDirectionArrow = 0x1a75; // char : 1
	constexpr auto bTrackNearbyPickups = 0x1a75; // char : 1
	constexpr auto bIgnoreDefender = 0x1a75; // char : 1
	constexpr auto bUseDefenderInventoryManagement = 0x1a75; // char : 1
	constexpr auto bShouldTossInventoryOnDeath = 0x1a75; // char : 1
	constexpr auto bHasEngaged = 0x1a76; // char : 1
	constexpr auto bIsAlwaysGameplayRelevant = 0x1a76; // char : 1
	constexpr auto bShowCustomCSVRelevantKey = 0x1a76; // char : 1
	constexpr auto bIsDebugSpawnedAI = 0x1a76; // char : 1
	constexpr auto bEncounterExpectedLifespanExpired = 0x1a76; // char : 1
	constexpr auto bEnableBlockingCollisionWithOtherAI = 0x1a76; // char : 1
	constexpr auto bSetMiniMapIconRotation = 0x1a76; // char : 1
	constexpr auto bHasDroppedLoot = 0x1a77; // char : 1
	constexpr auto bUseFastAbilityReplication = 0x1a77; // char : 1
	constexpr auto bUseAIGoalComponent = 0x1a77; // char : 1
	constexpr auto FastReplicationMinimalReplicationTags = 0x1a78; // FMinimalReplicationTagCountMap
	constexpr auto FastReplicationMinimalGameplayCueProxy = 0x1ae0; // FMinimalGameplayCueReplicationProxy
	constexpr auto OnInventoryInitialized = 0x1db0; // FMulticastInlineDelegate
	constexpr auto OnInventoryUpdated = 0x1dc0; // FMulticastInlineDelegate
	constexpr auto AIDifficultyLevel = 0x1e00; // float
	constexpr auto LevelRatingDisplayType = 0x1e04; // EFortAILevelRatingDisplayType
	constexpr auto EncounterInfo = 0x1e08; // UFortAIEncounterInfo*
	constexpr auto SpawnSetIndex = 0x1e10; // int32_t
	constexpr auto SpawnGroupGuid = 0x1e14; // FGuid
	constexpr auto EnemyIndexInSpawnGroup = 0x1e24; // int32_t
	constexpr auto FinishEncounterSpawnFallbackTime = 0x1e28; // float
	constexpr auto EncounterSpawnDisableRangedAttackingTime = 0x1e2c; // float
	constexpr auto EncounterSpawnDisableMeleeAttackingTime = 0x1e30; // float
	constexpr auto EncounterExpectedLifespanTimerHandle = 0x1e38; // FTimerHandle
	constexpr auto SpawnRift = 0x1e40; // AActor*
	constexpr auto SpawnRiftLocation = 0x1e48; // FVector
	constexpr auto SpawnSourceActor = 0x1e60; // AActor*
	constexpr auto AIGoalComponentClass = 0x1e68; // UAIGoalComponent*
	constexpr auto MaxTimeAllowedOutsideTether = 0x1e70; // float
	constexpr auto BehaviorTree = 0x1e78; // UBehaviorTree*
	constexpr auto DefaultNavFilter = 0x1e80; // UNavigationQueryFilter*
	constexpr auto HuntingNavFilter = 0x1e88; // UNavigationQueryFilter*
	constexpr auto DBNOInteractionDuration = 0x1e98; // float
	constexpr auto OnDowned = 0x1ea0; // FMulticastInlineDelegate
	constexpr auto DBNOInteractionType = 0x1eb0; // TInteractionType
	constexpr auto MovementStyles0x4 = 0x1eb1; // EFortMovementStyle
	constexpr auto UpdateNearbyPickupFrequency = 0x1eb8; // float
	constexpr auto RequiredWeaponPickupTag = 0x1ebc; // FGameplayTag
	constexpr auto RequiredWeaponPickupTagQuery = 0x1ec0; // FGameplayTagQuery
	constexpr auto bUsePickupDirectionOverride = 0x1f08; // bool
	constexpr auto PickupDirectionOverride = 0x1f10; // FVector
	constexpr auto NoWeaponInCombatEventName = 0x1f28; // FName
	constexpr auto NoWeaponOutOfCombatEventName = 0x1f2c; // FName
	constexpr auto CachedHitLocation = 0x1f30; // FVector
	constexpr auto TurnTransitionGameplayAbilityTag = 0x1f48; // FGameplayTagContainer
	constexpr auto DeathParticles = 0x1f68; // TSoftObjectPtr<UParticleSystem>
	constexpr auto NumRunVariations = 0x1f90; // int32_t
	constexpr auto CurrentRunVariationIndex = 0x1f94; // int32_t
	constexpr auto RunVariationRadius = 0x1f98; // float
	constexpr auto EyeIndex = 0x1f9c; // int32_t
	constexpr auto SkinIndex = 0x1fa0; // int32_t
	constexpr auto DefaultEyeColor = 0x1fa4; // FLinearColor
	constexpr auto DefaultEyeBrightness = 0x1fb4; // float
	constexpr auto DefaultSkinColor = 0x1fb8; // FLinearColor
	constexpr auto DefaultSkinGlow = 0x1fc8; // float
	constexpr auto MinimapDefaultIconColor = 0x1fcc; // FLinearColor
	constexpr auto PlayerManagerMinimapColor = 0x1fdc; // FLinearColor
	constexpr auto MiniMapIconBrush = 0x2000; // FSlateBrush
	constexpr auto MiniMapAboveBelowIconBrush = 0x20d0; // FSlateBrush
	constexpr auto MinimapGoalByTagColors = 0x21a0; // TArray<FMinimapGoalByTagColorsData>
	constexpr auto MinimapGoalByTagColorIndex = 0x21b0; // int8_t
	constexpr auto AppearanceOverrideName = 0x21b4; // FName
	constexpr auto AppearanceOverrideGender = 0x21b8; // EFortAIPawnGender
	constexpr auto FollowPlayerEvent = 0x21b9; // EFortCombatEvents
	constexpr auto InCombatNearPlayerEvent = 0x21ba; // EFortCombatEvents
	constexpr auto InteractionType = 0x21bb; // TInteractionType
	constexpr auto FollowPlayerRange = 0x21bc; // float
	constexpr auto InteractionDuration = 0x21c0; // float
	constexpr auto InteractionText = 0x21c8; // FText
	constexpr auto SecondInteractionType = 0x21e0; // TInteractionType
	constexpr auto SecondInteractionDuration = 0x21e4; // float
	constexpr auto SecondInteractionText = 0x21e8; // FText
	constexpr auto OnInteraction = 0x2200; // FMulticastInlineDelegate
	constexpr auto InteractionSound = 0x2210; // USoundBase*
	constexpr auto DefenderTrap = 0x2218; // ABuildingTrapDefender*
	constexpr auto OnActorBeginCrowdOverlap = 0x2220; // FMulticastInlineDelegate
	constexpr auto DeepWaterImmersionDepth = 0x2230; // float
	constexpr auto bCanUseSimpleCollisions = 0x2234; // char : 1
	constexpr auto bCanMoveThroughWalls = 0x2234; // char : 1
	constexpr auto bCanUseNavWalking = 0x2234; // char : 1
	constexpr auto bCanBeLaunched = 0x2234; // char : 1
	constexpr auto bDebugAIAnim = 0x2234; // char : 1
	constexpr auto bDebugAI = 0x2234; // char : 1
	constexpr auto bUseBuildingAttackingHotspots = 0x2234; // char : 1
	constexpr auto bCanUseStepAside = 0x2235; // char : 1
	constexpr auto bCanUseDoors = 0x2235; // char : 1
	constexpr auto bCanUseOpenedDoors = 0x2235; // char : 1
	constexpr auto bCanUseShootingHotspots = 0x2235; // char : 1
	constexpr auto bCanSleep = 0x2235; // char : 1
	constexpr auto bIsSleeping = 0x2235; // char : 1
	constexpr auto bShouldStartSleeping = 0x2235; // char : 1
	constexpr auto bCanLookAtGoal = 0x2235; // char : 1
	constexpr auto bUseCrowdSimulation = 0x2236; // char : 1
	constexpr auto bCanBeBaseForOtherPawns = 0x2236; // char : 1
	constexpr auto bControlWalkingOffLedges = 0x2236; // char : 1
	constexpr auto bAllowCapsuleComponentsOnServer = 0x2236; // char : 1
	constexpr auto bCanUseMeshPooling = 0x2236; // char : 1
	constexpr auto bRootComponentIgnoreQueryPawnCapsule = 0x2236; // char : 1
	constexpr auto bAllowServerCosmeticComponentOptimizations = 0x2236; // char : 1
	constexpr auto bDespawnedDueToExpiration = 0x2236; // char : 1
	constexpr auto bUseAppearanceOverride = 0x2238; // char : 1
	constexpr auto bCanInteract = 0x2238; // char : 1
	constexpr auto bHideHealthBar = 0x2238; // char : 1
	constexpr auto bHasBuildingHitEffects = 0x2238; // char : 1
	constexpr auto bReplicateGrantedTagsWithFastAbilityReplication = 0x2238; // char : 1
	constexpr auto bReplicateGameplayCuesWithFastAbilityReplication = 0x2238; // char : 1
	constexpr auto bOnlySkipAbilitySystemComponentWithFastAbilityReplication = 0x2238; // char : 1
	constexpr auto bShouldIgnoreThisBaseRotation = 0x2239; // char : 1
	constexpr auto BeingControlledBy = 0x2250; // TWeakObjectPtr<AFortPlayerState>
	constexpr auto MovementUrgency = 0x2258; // EFortMovementUrgency
	constexpr auto AIType = 0x2259; // EFortressAIType
	constexpr auto Team = 0x225a; // char
	constexpr auto SimpleCollisionsProfileName = 0x225c; // FName
	constexpr auto UpgradeUIData = 0x2260; // FFortAISpawnGroupUpgradeUIData
	constexpr auto CachedUpgradeUIDataUpgradeIconBrush = 0x22d0; // FSlateBrush
	constexpr auto ScoreMultiplier = 0x23a0; // float
	constexpr auto OverriddenScore = 0x23a4; // int32_t
	constexpr auto OverriddenScoreDistribution = 0x23a8; // EScoreDistributionType
	constexpr auto LootDropConeHalfAngle = 0x23ac; // float
	constexpr auto LootDropSpeed = 0x23b0; // float
	constexpr auto MinItemTossDist = 0x23b4; // float
	constexpr auto MaxItemTossDist = 0x23b8; // float
	constexpr auto ItemTossDirectionConeHalfAngle = 0x23bc; // float
	constexpr auto HotspotType = 0x23c0; // EFortHotSpotSlot
	constexpr auto PartialPathUsage = 0x23c1; // EFortPartialPathUsage
	constexpr auto PlayerManager = 0x23c8; // AFortPlayerStateZone*
	constexpr auto DefenderItemInstanceId = 0x23d0; // FString
	constexpr auto DefenderSquadId = 0x23e0; // FName
	constexpr auto DefenderPlacedTime = 0x23e4; // float
	constexpr auto RecentlySeenInterval = 0x23e8; // float
	constexpr auto CurrentAIRotationRate = 0x23f0; // FRotator
	constexpr auto MoveSoundStimulusBroadcastInterval = 0x2408; // float
	constexpr auto MoveSoundStimulusMaxRange = 0x240c; // float
	constexpr auto bGenerateMoveSoundInAllMovementModes = 0x2410; // bool
	constexpr auto WeaponCollisionComponent = 0x2420; // UShapeComponent*
	constexpr auto Inventory = 0x2428; // AFortInventory*
	constexpr auto NearbyPickups = 0x2430; // TArray<AFortPickup*>
	constexpr auto UnreachablePickups = 0x2440; // TMap<AFortPickup*, float>
	constexpr auto AppearanceOverrideEntries = 0x24a0; // TArray<FFortAIAppearanceOverrideEntry>
	constexpr auto AppearanceOverrideEntryIndex = 0x24b0; // int32_t
	constexpr auto SpawnLocation = 0x24b8; // FVector
	constexpr auto SpawnRotation = 0x24d0; // FRotator
	constexpr auto SleepingFloor = 0x24e8; // TWeakObjectPtr<ABuildingActor>
	constexpr auto PelvisBoneName = 0x24f0; // FName
	constexpr auto HeadBoneName = 0x24f4; // FName
	constexpr auto MinimapIndicatorUpdateFrequency = 0x2504; // float
	constexpr auto MiniMapViewableDistance = 0x2510; // float
	constexpr auto DistanceToPlayerManagerToShowHealthBar = 0x2514; // float
	constexpr auto DistanceToOtherPlayersToShowHealthBar = 0x2518; // float
	constexpr auto AttributesSet = 0x2528; // UFortAIAttributesSet*
	constexpr auto CharacterAttrSet = 0x2530; // UFortCharacterAttrSet*
	constexpr auto WeaponAttrSet = 0x2538; // UFortWeaponAttrSet*
	constexpr auto ImpactPhysicalSurfaceSounds0x1c = 0x2540; // USoundBase*
	constexpr auto ImpactPhysicalSurfaceEffects0x1c = 0x2620; // UParticleSystem*
	constexpr auto AthenaRVOWeightOverride = 0x2700; // FScalableFloat
	constexpr auto MinimapIndicator = 0x2728; // UFortSimpleMiniMapIndicator*
	constexpr auto MinimapScale = 0x2730; // FVector2D
	constexpr auto DefaultGameplayAbilitySets = 0x2740; // TArray<UFortAbilitySet*>
	constexpr auto SpawnInheritedCharacterAbilitySets = 0x2750; // TArray<UFortAbilitySet*>
	constexpr auto SpawnModifierDefinitions = 0x2760; // TArray<UFortGameplayModifierItemDefinition*>
	constexpr auto AIPawnAbilitySystemComponent = 0x2770; // UFortAbilitySystemComponent*
	constexpr auto WallAttackGameplayAbilityTags = 0x2778; // FGameplayTagContainer
	constexpr auto WallRangedAttackGameplayAbilityTags = 0x2798; // FGameplayTagContainer
	constexpr auto CeilingAttackGameplayAbilityTags = 0x27b8; // FGameplayTagContainer
	constexpr auto FloorAttackGameplayAbilityTags = 0x27d8; // FGameplayTagContainer
	constexpr auto FailedAbilityQueryTags = 0x27f8; // TArray<FGameplayTagContainer>
	constexpr auto CurrentAimTarget = 0x2808; // AActor*
	constexpr auto NavObstacleComponent = 0x2810; // UFortNavObstacleComponent*
	constexpr auto BuildingHitMaxDistanceToPlayer = 0x2828; // float
	constexpr auto BuildingHitMaxDistanceToHitLocation = 0x282c; // float
	constexpr auto HeadHeightPercent = 0x2830; // float
	constexpr auto MarkerDisplay = 0x2838; // FMarkedActorDisplayInfo
	constexpr auto bCanBeMarked = 0x28d0; // bool
	constexpr auto IsBlockingBuilding = 0x28d8; // FScalableFloat
	constexpr auto DefenderItem = 0x2a60; // UFortAccountItem*
	constexpr auto TetheredFollower = 0x2b18; // AFortPawn*
	constexpr auto TetheredCamera = 0x2b30; // UFortCameraMode*
	constexpr auto TetheredTargetingCamera = 0x2b38; // UFortCameraMode*
	constexpr auto bIsTetheredBoosting = 0x2b40; // bool
	constexpr auto TetherBoostMultiplier = 0x2b44; // float
	constexpr auto TetherJumpServerCorrectionIgnoreTime = 0x2b48; // float
	constexpr auto TetherJumpLastTime = 0x2b4c; // float
	constexpr auto TetherBoundsXYSplineClass = 0x2b50; // AActor*
	constexpr auto TetherBoundsXYSplineComponent = 0x2b58; // USplineComponent*
	constexpr auto OnUpdateFromVehicleInput = 0x2b60; // FMulticastInlineDelegate
	constexpr auto CustomizationsToLoad = 0x2b78; // UFortAIPawnCustomizationDefinition*
	constexpr auto bCanUnloadCustomization = 0x2b80; // bool
	constexpr auto UsedCustomization = 0x2b88; // UFortAIPawnCustomizationDefinition*
	constexpr auto OnCustomizationsLoadedEvent = 0x2b90; // FMulticastInlineDelegate
	constexpr auto OnCustomizationsUnloadedEvent = 0x2ba0; // FMulticastInlineDelegate
	constexpr auto AIAssetLoader = 0x2bb0; // UFortAIAssetLoader*
	constexpr auto bReplicateInventory = 0x2bb8; // char : 1
	constexpr auto CustomBounceVelocityForPickup = 0x2be0; // FVector
	constexpr auto CustomBouncePawnOffsetForPickup = 0x2bf8; // FVector
}

namespace FortPlayerPawnAthena {
	constexpr auto OnInteractionFailedCallback = 0x3c78; // FMulticastInlineDelegate
	constexpr auto ItemInteractionActor = 0x3c88; // AActor*
	constexpr auto CurrentPawnSquaredSpeed = 0x3ca0; // float
	constexpr auto CurrentPawnSquaredSpeedXY = 0x3ca4; // float
	constexpr auto CurrentPawnVelXYRot = 0x3ca8; // FRotator
	constexpr auto PreviousVelocityXY = 0x3cc0; // FVector
	constexpr auto OnReviveSound = 0x3cd8; // USoundBase*
	constexpr auto ReviveFromDBNOTime = 0x3ce0; // float
	constexpr auto DBNOStartTime = 0x3ce4; // float
	constexpr auto DBNOInvulnerableTime = 0x3ce8; // float
	constexpr auto ConvertFromDBNOTime = 0x3cec; // float
	constexpr auto ServerWorldTimeRevivalTime = 0x3cf0; // float
	constexpr auto bWasCrouchedBeforeDBNO = 0x3d00; // bool
	constexpr auto ItemSpecialActorID = 0x3d04; // FName
	constexpr auto ItemSpecialActorCategoryTag = 0x3d08; // FGameplayTag
	constexpr auto BecameSpecialActorTime = 0x3d10; // float
	constexpr auto OnUIGameplayCue = 0x3d18; // FMulticastInlineDelegate
	constexpr auto bPlaytestWithNoMouse = 0x3d28; // bool
	constexpr auto CapsuleRadiusAthena = 0x3d30; // float
	constexpr auto CapsuleHalfHeightAthena = 0x3d34; // float
	constexpr auto MeshHeightAdjustAthena = 0x3d38; // float
	constexpr auto LandEmitterTemplate = 0x3d40; // UParticleSystem*
	constexpr auto IgnoreLandGhostModeTags = 0x3d48; // FGameplayTagContainer
	constexpr auto LandWindEmitterTemplate = 0x3d68; // UParticleSystem*
	constexpr auto LandFXLocationOffset = 0x3d70; // FVector
	constexpr auto LandFXRotateYawMaxDegrees = 0x3d88; // float
	constexpr auto LandFXMaxDrawDistance = 0x3d8c; // float
	constexpr auto LandForceIntensityVelocityZFactor = 0x3d90; // float
	constexpr auto MinLandForceIntensity = 0x3d94; // float
	constexpr auto MaxLandForceIntensity = 0x3d98; // float
	constexpr auto MinLandForceDuration = 0x3d9c; // float
	constexpr auto MaxLandForceDuration = 0x3da0; // float
	constexpr auto LandFXCoolDownTime = 0x3da4; // float
	constexpr auto LandFXPawnRecentRenderTolerance = 0x3da8; // float
	constexpr auto bShouldPawnInstantDie = 0x3dc0; // bool
	constexpr auto bShouldPawnDBNODisplayOnKillFeed = 0x3dc1; // bool
	constexpr auto bShouldPawnDeathDisplayOnKillFeed = 0x3dc2; // bool
	constexpr auto bShouldPawnLeaveEliminationIndicator = 0x3dc3; // bool
	constexpr auto bShouldPawnAwardPoints = 0x3dc4; // bool
	constexpr auto bShouldTriggerDeathAnalytics = 0x3dc5; // bool
	constexpr auto bShouldDropItemsOnDeath = 0x3dc6; // bool
	constexpr auto bShouldSkipMovementFullSimulation = 0x3dc7; // bool
	constexpr auto bEnableRenderCustomDepth = 0x3dc8; // char : 1
	constexpr auto bEnableGroundInteractionEffects = 0x3dc8; // char : 1
	constexpr auto AttributeReplicationProxy = 0x3dcc; // FFortPlayerAthenaAttributeReplicationProxy
	constexpr auto GravityAttributeReplicationProxy = 0x3de4; // FFortPlayerAthenaGravityAttributeReplicationProxy
	constexpr auto ReplayRepAnimMontageInfo = 0x3df8; // FGameplayAbilityRepAnimMontage
	constexpr auto SimulatedProxyActiveGameplayCues = 0x3e30; // FMinimalGameplayCueReplicationProxy
	constexpr auto SimulatedProxyMinimalReplicationGameplayCues = 0x4100; // FMinimalGameplayCueReplicationProxy
	constexpr auto FastReplicationMinimalReplicationTags = 0x43d0; // FMinimalReplicationTagCountMap
	constexpr auto CurrentQuickChatIcon = 0x4438; // UTexture2D*
	constexpr auto bADSWhileNotOnGround = 0x4585; // bool
	constexpr auto DefaultCrouchedFootstepSound = 0x4588; // USoundBase*
	constexpr auto DefaultCrouchSprintFootstepSound = 0x4590; // USoundBase*
	constexpr auto OnFortPlayerDied = 0x4598; // FMulticastInlineDelegate
	constexpr auto OnFortPlayerHitByVehicle = 0x45a8; // FMulticastInlineDelegate
	constexpr auto KillerForSpectatorRotation = 0x45b8; // APawn*
	constexpr auto bDelaySimProxyCollisionInAircraftPhase = 0x45c1; // bool
	constexpr auto TimeToDelaySkydiveCollision = 0x45c4; // float
	constexpr auto PositionCaptureIntervalForDistanceTraveledAccumulation = 0x45c8; // float
	constexpr auto SkydiveAudioMovementVolumeInterpSpeed = 0x45e0; // float
	constexpr auto SkydiveAudioForwardDotInterpSpeed = 0x45f0; // float
	constexpr auto SkydiveAudioRightDotInterpSpeed = 0x45f4; // float
	constexpr auto DamageFXSignificance = 0x45fc; // FFortEffectDistanceQuality
	constexpr auto ScreenEffectHealthDamage = 0x4620; // AFortEmitterCameraLensEffectDirectional*
	constexpr auto ScreenEffectShieldDamage = 0x4628; // AFortEmitterCameraLensEffectDirectional*
	constexpr auto AdditiveHitReactsMontage = 0x4630; // UAnimMontage*
	constexpr auto DamageTagsToNotDisplayDirectionDamage = 0x4638; // FGameplayTagContainer
	constexpr auto DamageTagsToNotAddCameraShake = 0x4658; // FGameplayTagContainer
	constexpr auto WeaponTagsToNotPlayCircleAndStreakFX = 0x4678; // FGameplayTagContainer
	constexpr auto OnPlayerLootedContainer = 0x4698; // FMulticastInlineDelegate
	constexpr auto bIsPlayerPawnReady = 0x46c8; // bool
	constexpr auto LastFiredLocation = 0x46d0; // FVector
	constexpr auto LastFiredDirection = 0x46e8; // FVector
	constexpr auto LastFiredTime = 0x4700; // float
	constexpr auto PrototypeShootingModel = 0x4718; // UDataTable*
	constexpr auto FallInstigator = 0x4720; // AController*
	constexpr auto FallDamageTags = 0x4728; // FGameplayTagContainer
	constexpr auto LastFloorBeforeFalling = 0x4748; // ABuildingSMActor*
	constexpr auto LastFallDistance = 0x4750; // float
	constexpr auto SkydiveDebugTimer = 0x4754; // float
	constexpr auto MeleeCombatSlowSpeedMultiplier = 0x4758; // float
	constexpr auto MeleeCombatSlowDuration = 0x475c; // float
	constexpr auto EncryptedPawnReplayData = 0x4760; // FAthenaPawnReplayData
	constexpr auto InAirAudioComp = 0x4790; // UAudioComponent*
	constexpr auto PSC_PlayerWalkLand = 0x4798; // UParticleSystemComponent*
	constexpr auto PSC_PlayerRunLand = 0x47a0; // UParticleSystemComponent*
	constexpr auto PSC_PlayerSlideLand = 0x47a8; // UParticleSystemComponent*
	constexpr auto PSC_HitDamage = 0x47b0; // UParticleSystemComponent*
	constexpr auto SlidingAudioComp = 0x47b8; // UAudioComponent*
	constexpr auto MobileInteractionComponents = 0x47e0; // TArray<UFortMobileInteractionComponent*>
	constexpr auto MinimapIconColorFiftyFiftyPlayer = 0x47f0; // FLinearColor
	constexpr auto MaxIndicatorVisibilityDistForReplays = 0x4800; // float
	constexpr auto ConsumableUseAudio = 0x4808; // UAudioComponent*
	constexpr auto InAirAudioParameterValue = 0x4810; // float
	constexpr auto InAirAudioFallDistanceThreshold = 0x4814; // float
	constexpr auto bFXPlayDustOnMovement = 0x4819; // bool
	constexpr auto WalkDustActivateSpeed = 0x481c; // float
	constexpr auto WalkDustResetSpeed = 0x4824; // float
	constexpr auto RunParticleActivateSpeed = 0x482c; // float
	constexpr auto SlidingIntensitySound3P = 0x4840; // USoundBase*
	constexpr auto SlidingIntensitySound1P = 0x4848; // USoundBase*
	constexpr auto SlideAudioIntensity = 0x4850; // float
	constexpr auto LastHealthPostProcessWeight = 0x4854; // float
	constexpr auto HealthPostProcessStartTime = 0x4858; // float
	constexpr auto HealthPostProcessMuteTime = 0x485c; // float
	constexpr auto CustomDepthMatchedComponents = 0x48d0; // TArray<TWeakObjectPtr<UPrimitiveComponent>>
	constexpr auto bIsCreativeGhostModeActivated = 0x48e4; // bool
	constexpr auto bIsCreativeModeratorModeActivated = 0x48e5; // bool
	constexpr auto SkinWeightManager = 0x4910; // UFortSkinWeightOverrideManager*
	constexpr auto InvulnerabilityTags = 0x4950; // FGameplayTagContainer
	constexpr auto UnicornPawnSampler = 0x4970; // UUnicornAthenaPawnSampler*
	constexpr auto MarkerDisplay = 0x4978; // FMarkedActorDisplayInfo
	constexpr auto DamageForceFeedback = 0x4a20; // UForceFeedbackEffect*
	constexpr auto DamageCameraShakeClass = 0x4a28; // UMatineeCameraShake*
	constexpr auto DamageTagsExcludedFromCameraShake = 0x4a30; // FGameplayTagContainer
	constexpr auto UpdateSharedReplicationWhileAttachedCount = 0x4a68; // int32_t
	constexpr auto BP_RotationSpeedWhenTurnedOffByAnim = 0x4a6c; // float
	constexpr auto BP_RotationSpeedOnDetach = 0x4a70; // float
	constexpr auto BP_MaxRotationSpeedWhenAttached = 0x4a74; // float
	constexpr auto BP_TimeToReachMaxRotationSpeed = 0x4a78; // float
	constexpr auto BP_AddedRotationInfluenceFromForwardVectorOnAttach = 0x4a7c; // float
	constexpr auto YawNegative90 = 0x4a80; // FRotator
	constexpr auto CallerID_update_mesh_rotation = 0x4a98; // FString
	constexpr auto AttachPointNormalizeTolerance = 0x4aa8; // float
	constexpr auto ForwardProjectedNormalizeTolerance = 0x4aac; // float
	constexpr auto Swinging_AttachBGA = 0x4ab0; // ABuildingGameplayActor*
	constexpr auto Swinging_RightVec = 0x4ab8; // FVector
	constexpr auto Swinging_LastAttachTime = 0x4ad0; // float
	constexpr auto bSwingingShouldRotateMesh = 0x4ad4; // bool
	constexpr auto bSwinging_UseProgrammaticRotation = 0x4ad5; // bool
	constexpr auto bImprovedDBNOEnabled = 0x4ad6; // bool
	constexpr auto DBNORevivingActorsCount = 0x4ad7; // char
}

namespace   WorldSettings {

	constexpr auto VisibilityCellSize = 0x2a0; // int32_t
constexpr auto VisibilityAggressiveness = 0x2a4; // EVisibilityAggressiveness
constexpr auto bPrecomputeVisibility = 0x2a5; // char : 1
constexpr auto bPlaceCellsOnlyAlongCameraTracks = 0x2a5; // char : 1
constexpr auto bEnableWorldBoundsChecks = 0x2a5; // char : 1
constexpr auto bEnableNavigationSystem = 0x2a5; // char : 1
constexpr auto bEnableAISystem = 0x2a5; // char : 1
constexpr auto bEnableWorldComposition = 0x2a5; // char : 1
constexpr auto bUseClientSideLevelStreamingVolumes = 0x2a5; // char : 1
constexpr auto bEnableWorldOriginRebasing = 0x2a5; // char : 1
constexpr auto bGenerateSingleClusterForLevel = 0x2a6; // char : 1
constexpr auto bOverrideDefaultBroadphaseSettings = 0x2a6; // char : 1
constexpr auto bHighPriorityLoadingLocal = 0x2a6; // char : 1
constexpr auto bForceNoPrecomputedLighting = 0x2a6; // char : 1
constexpr auto bHighPriorityLoading = 0x2a6; // char : 1
constexpr auto bMinimizeBSPSections = 0x2a6; // char : 1
constexpr auto bGlobalGravitySet = 0x2a6; // char : 1
constexpr auto bWorldGravitySet = 0x2a6; // char : 1
constexpr auto AISystemClass = 0x2a8; // TSoftClassPtr<UObject>
constexpr auto LevelInstancePivotOffset = 0x2d0; // FVector
constexpr auto NavigationSystemConfig = 0x2e8; // UNavigationSystemConfig*
constexpr auto NavigationSystemConfigOverride = 0x2f0; // UNavigationSystemConfig*
constexpr auto WorldPartition = 0x2f8; // UWorldPartition*
constexpr auto WorldToMeters = 0x300; // float
constexpr auto KillZ = 0x304; // float
constexpr auto KillZDamageType = 0x308; // UDamageType*
constexpr auto WorldGravityZ = 0x310; // float
constexpr auto GlobalGravityZ = 0x314; // float
constexpr auto DefaultPhysicsVolumeClass = 0x318; // ADefaultPhysicsVolume*
constexpr auto PhysicsCollisionHandlerClass = 0x320; // UPhysicsCollisionHandler*
constexpr auto DefaultGameMode = 0x328; // AGameModeBase*
constexpr auto GameNetworkManagerClass = 0x330; // AGameNetworkManager*
constexpr auto PackedLightAndShadowMapTextureSize = 0x338; // int32_t
constexpr auto DefaultColorScale = 0x340; // FVector
constexpr auto DefaultMaxDistanceFieldOcclusionDistance = 0x358; // float
constexpr auto GlobalDistanceFieldViewDistance = 0x35c; // float
constexpr auto DynamicIndirectShadowsSelfShadowingIntensity = 0x360; // float
constexpr auto DefaultReverbSettings = 0x368; // FReverbSettings
constexpr auto DefaultAmbientZoneSettings = 0x388; // FInteriorSettings
constexpr auto DefaultBaseSoundMix = 0x3b0; // USoundMix*
constexpr auto TimeDilation = 0x3b8; // float
constexpr auto MatineeTimeDilation = 0x3bc; // float
constexpr auto DemoPlayTimeDilation = 0x3c0; // float
constexpr auto MinGlobalTimeDilation = 0x3c4; // float
constexpr auto MaxGlobalTimeDilation = 0x3c8; // float
constexpr auto MinUndilatedFrameTime = 0x3cc; // float
constexpr auto MaxUndilatedFrameTime = 0x3d0; // float
constexpr auto BroadphaseSettings = 0x3d8; // FBroadphaseSettings
constexpr auto ReplicationViewers = 0x458; // TArray<FNetViewer>
constexpr auto AssetUserData = 0x468; // TArray<UAssetUserData*>
constexpr auto PauserPlayerState = 0x478; // APlayerState*
constexpr auto MaxNumberOfBookmarks = 0x480; // int32_t
constexpr auto DefaultBookmarkClass = 0x488; // UBookmarkBase*
constexpr auto BookmarkArray = 0x490; // TArray<UBookmarkBase*>
constexpr auto LastBookmarkClass = 0x4a0; // UBookmarkBase*
}

namespace Actor {
	constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
constexpr auto bCallPreReplication = 0x58; // char : 1
constexpr auto bHidden = 0x58; // char : 1
constexpr auto bCallPreReplicationForReplay = 0x58; // char : 1
constexpr auto bNetTemporary = 0x58; // char : 1
constexpr auto bReplicateMovement = 0x58; // char : 1
constexpr auto bAlwaysRelevant = 0x58; // char : 1
constexpr auto bOnlyRelevantToOwner = 0x58; // char : 1
constexpr auto bNetStartup = 0x58; // char : 1
constexpr auto bTearOff = 0x59; // char : 1
constexpr auto bExchangedRoles = 0x59; // char : 1
constexpr auto bNetLoadOnClient = 0x59; // char : 1
constexpr auto bNetUseOwnerRelevancy = 0x59; // char : 1
constexpr auto bRelevantForNetworkReplays = 0x59; // char : 1
constexpr auto bRelevantForLevelBounds = 0x59; // char : 1
constexpr auto bReplayRewindable = 0x59; // char : 1
constexpr auto bForceNetAddressable = 0x59; // char : 1
constexpr auto bFindCameraComponentWhenViewTarget = 0x5a; // char : 1
constexpr auto bIgnoresOriginShifting = 0x5a; // char : 1
constexpr auto bGenerateOverlapEventsDuringLevelStreaming = 0x5a; // char : 1
constexpr auto bCanBeDamaged = 0x5a; // char : 1
constexpr auto bCollideWhenPlacing = 0x5a; // char : 1
constexpr auto bAutoDestroyWhenFinished = 0x5a; // char : 1
constexpr auto bAllowTickBeforeBeginPlay = 0x5a; // char : 1
constexpr auto bBlockInput = 0x5a; // char : 1
constexpr auto bCanBeInCluster = 0x5b; // char : 1
constexpr auto bReplicateUsingRegisteredSubObjectList = 0x5b; // char : 1
constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x5b; // char : 1
constexpr auto bReplicates = 0x5b; // char : 1
constexpr auto bActorSeamlessTraveled = 0x5b; // char : 1
constexpr auto bIsEditorOnlyActor = 0x5b; // char : 1
constexpr auto bEnableAutoLODGeneration = 0x5b; // char : 1
constexpr auto bActorEnableCollision = 0x5c; // char : 1
constexpr auto bActorIsBeingDestroyed = 0x5c; // char : 1
constexpr auto UpdateOverlapsMethodDuringLevelStreaming = 0x5e; // EActorUpdateOverlapsMethod
constexpr auto DefaultUpdateOverlapsMethodDuringLevelStreaming = 0x5f; // EActorUpdateOverlapsMethod
constexpr auto RemoteRole = 0x60; // ENetRole
constexpr auto ReplicatedMovement = 0x68; // FRepMovement
constexpr auto InitialLifeSpan = 0xd0; // float
constexpr auto CustomTimeDilation = 0xd4; // float
constexpr auto AttachmentReplication = 0xe0; // FRepAttachment
constexpr auto Owner = 0x140; // AActor*
constexpr auto NetDriverName = 0x148; // FName
constexpr auto Role = 0x14c; // ENetRole
constexpr auto NetDormancy = 0x14d; // ENetDormancy
constexpr auto SpawnCollisionHandlingMethod = 0x14e; // ESpawnActorCollisionHandlingMethod
constexpr auto AutoReceiveInput = 0x14f; // EAutoReceiveInput
constexpr auto InputPriority = 0x150; // int32_t
constexpr auto InputComponent = 0x158; // UInputComponent*
constexpr auto NetCullDistanceSquared = 0x160; // float
constexpr auto NetTag = 0x164; // int32_t
constexpr auto NetUpdateFrequency = 0x168; // float
constexpr auto MinNetUpdateFrequency = 0x16c; // float
constexpr auto NetPriority = 0x170; // float
constexpr auto Instigator = 0x178; // APawn*
constexpr auto Children = 0x180; // TArray<AActor*>
constexpr auto RootComponent = 0x190; // USceneComponent*
constexpr auto RayTracingGroupId = 0x1a0; // int32_t
constexpr auto Layers = 0x1a8; // TArray<FName>
constexpr auto ParentComponent = 0x1b8; // TWeakObjectPtr<UChildActorComponent>
constexpr auto Tags = 0x1c8; // TArray<FName>
constexpr auto OnTakeAnyDamage = 0x1d8; // FMulticastSparseDelegate
constexpr auto OnTakePointDamage = 0x1d9; // FMulticastSparseDelegate
constexpr auto OnTakeRadialDamage = 0x1da; // FMulticastSparseDelegate
constexpr auto OnActorBeginOverlap = 0x1db; // FMulticastSparseDelegate
constexpr auto OnActorEndOverlap = 0x1dc; // FMulticastSparseDelegate
constexpr auto OnBeginCursorOver = 0x1dd; // FMulticastSparseDelegate
constexpr auto OnEndCursorOver = 0x1de; // FMulticastSparseDelegate
constexpr auto OnClicked = 0x1df; // FMulticastSparseDelegate
constexpr auto OnReleased = 0x1e0; // FMulticastSparseDelegate
constexpr auto OnInputTouchBegin = 0x1e1; // FMulticastSparseDelegate
constexpr auto OnInputTouchEnd = 0x1e2; // FMulticastSparseDelegate
constexpr auto OnInputTouchEnter = 0x1e3; // FMulticastSparseDelegate
constexpr auto OnInputTouchLeave = 0x1e4; // FMulticastSparseDelegate
constexpr auto OnActorHit = 0x1e5; // FMulticastSparseDelegate
constexpr auto OnDestroyed = 0x1e6; // FMulticastSparseDelegate
constexpr auto OnEndPlay = 0x1e7; // FMulticastSparseDelegate
constexpr auto InstanceComponents = 0x268; // TArray<UActorComponent*>
constexpr auto BlueprintCreatedComponents = 0x278; // TArray<UActorComponent*>
}


namespace ActorComponent {
	constexpr auto PrimaryComponentTick = 0x30; // FActorComponentTickFunction
	constexpr auto ComponentTags = 0x60; // TArray<FName>
	constexpr auto AssetUserData = 0x70; // TArray<UAssetUserData*>
	constexpr auto UCSSerializationIndex = 0x84; // int32_t
	constexpr auto bNetAddressable = 0x88; // char : 1
	constexpr auto bReplicateUsingRegisteredSubObjectList = 0x88; // char : 1
	constexpr auto bReplicates = 0x88; // char : 1
	constexpr auto bAutoActivate = 0x8a; // char : 1
	constexpr auto bIsActive = 0x8a; // char : 1
	constexpr auto bEditableWhenInherited = 0x8a; // char : 1
	constexpr auto bCanEverAffectNavigation = 0x8a; // char : 1
	constexpr auto bIsEditorOnly = 0x8a; // char : 1
	constexpr auto CreationMethod = 0x8c; // EComponentCreationMethod
	constexpr auto OnComponentActivated = 0x8d; // FMulticastSparseDelegate
	constexpr auto OnComponentDeactivated = 0x8e; // FMulticastSparseDelegate
	constexpr auto UCSModifiedProperties = 0x90; // TArray<FSimpleMemberReference>
}



namespace FortWeapon {
	constexpr auto OnWeaponRateOfFireChanged = 0x2c0; // FMulticastInlineDelegate
constexpr auto OnPressTrigger = 0x2e8; // FMulticastInlineDelegate
constexpr auto OnReleaseTrigger = 0x2f8; // FMulticastInlineDelegate
constexpr auto TimeToEquip = 0x328; // float
constexpr auto bIsEquippingWeapon = 0x338; // bool
constexpr auto bIsReloadingWeapon = 0x339; // bool
constexpr auto bIsChargingWeapon = 0x33a; // bool
constexpr auto bDisableEquipAnimation = 0x33b; // bool
constexpr auto bIsAimingConsumable = 0x33d; // bool
constexpr auto OnLocalAmmoChanged = 0x360; // FMulticastInlineDelegate
constexpr auto OnLocalReloadStarted = 0x370; // FMulticastInlineDelegate
constexpr auto OnLocalReloadCancelled = 0x380; // FMulticastInlineDelegate
constexpr auto OnLocalTargetingChanged = 0x390; // FMulticastInlineDelegate
constexpr auto OnSecondaryAbilityToggled = 0x3a0; // FMulticastInlineDelegate
constexpr auto OnWeaponFireAudioVisuals = 0x3b0; // FMulticastInlineDelegate
constexpr auto OnReticleColorChanged = 0x3d8; // FMulticastInlineDelegate
constexpr auto bUseAttributeCaching = 0x3fc; // bool
constexpr auto WeaponData = 0x400; // UFortWeaponItemDefinition*
constexpr auto CosmeticOverrideWeaponData = 0x408; // UFortWeaponItemDefinition*
constexpr auto bImpactFXAttachedToHitActor = 0x410; // bool
constexpr auto GameplayAbilityBehaviorDistanceData = 0x418; // TArray<FFortGameplayAbilityBehaviorDistanceData>
constexpr auto HitNotifyAudioBank = 0x428; // UWeaponHitNotifyAudioBank*
constexpr auto bRemoveAbilitiesWhenRemovedFromInventory = 0x448; // bool
constexpr auto GrantedAbilityRemovalPolicy0x3 = 0x449; // EFortWeaponAbilityRemovalPolicy
constexpr auto EquippedWeaponDestroyWrapperRepCounter = 0x490; // char
constexpr auto PersistentFXStartTime = 0x560; // float
constexpr auto MinimumTimeForPersistentFX = 0x564; // float
constexpr auto OverrideItemWrapSoftPtr = 0x568; // TSoftObjectPtr<UAthenaItemWrapDefinition>
constexpr auto WeaponReduceMeshWorkSetting = 0x5a0; // EFortWeaponReduceMeshWorkSetting
constexpr auto bWeaponSupportsQuartzGunfire = 0x5a1; // bool
constexpr auto QuartzGunfireComp = 0x5a8; // UFortQuartzGunfireComponent*
constexpr auto bShouldDrawNativeReticle = 0x5b0; // bool
constexpr auto ReticleImage = 0x5b8; // UTexture2D*
constexpr auto AutoFireReticleImage = 0x5c0; // UTexture2D*
constexpr auto ReticleDefaultColor = 0x5c8; // FColor
constexpr auto ReticleEnemyColor = 0x5cc; // FColor
constexpr auto ReticleBuildingColor = 0x5d0; // FColor
constexpr auto ReticleNoTargetColor = 0x5d4; // FColor
constexpr auto HitNotifyReticleImage = 0x5d8; // UTexture2D*
constexpr auto HitNotifyLocationReticleImage = 0x5e0; // UTexture2D*
constexpr auto CriticalHitNotifyLocationReticleImage = 0x5e8; // UTexture2D*
constexpr auto ReticleCenterImage = 0x5f0; // UTexture2D*
constexpr auto ReticleCenterPerfectAimImage = 0x5f8; // UTexture2D*
constexpr auto ReticleInvalidTargetImage = 0x600; // UTexture2D*
constexpr auto MuzzleBlockedReticleImage = 0x608; // UTexture2D*
constexpr auto ReticleAltCenterImage = 0x610; // UTexture2D*
constexpr auto ReticleOuterImage = 0x618; // UTexture2D*
constexpr auto ReticleAltOuterImage = 0x620; // UTexture2D*
constexpr auto ReticleDefaultPrimaryStrikeAngle = 0x628; // float
constexpr auto ReticleDefaultSecondaryStrikeAngle = 0x62c; // float
constexpr auto bSupportsAutofireAtReticleTarget = 0x630; // bool
constexpr auto CameraBase3PClass = 0x638; // UFortCameraMode*
constexpr auto CameraTargeting3PClass = 0x640; // UFortCameraMode*
constexpr auto CameraBase1PClass = 0x648; // UFortCameraMode*
constexpr auto CameraTargeting1PClass = 0x650; // UFortCameraMode*
constexpr auto DestroyedSound = 0x658; // USoundBase*
constexpr auto OutOfAmmoSound = 0x660; // USoundBase*
constexpr auto ReloadSounds0x3 = 0x668; // USoundBase*
constexpr auto PrimaryFireSound1P = 0x680; // USoundBase*
constexpr auto PrimaryFireSound0x3 = 0x688; // USoundBase*
constexpr auto PrimaryFireStopSound1P = 0x6a0; // USoundBase*
constexpr auto PrimaryFireStopSound0x3 = 0x6a8; // USoundBase*
constexpr auto SecondaryFireSound0x3 = 0x6c0; // USoundBase*
constexpr auto SecondaryFireStopSound0x3 = 0x6d8; // USoundBase*
constexpr auto ChargeFireSound1P0x3 = 0x6f0; // USoundBase*
constexpr auto ChargeFireSound0x3 = 0x708; // USoundBase*
constexpr auto TargetingStartSound = 0x720; // USoundBase*
constexpr auto TargetingEndSound = 0x728; // USoundBase*
constexpr auto PrimaryFireSoundFadeOutTime = 0x730; // float
constexpr auto ImpactPhysicalSurfaceSounds0x1c = 0x738; // USoundBase*
constexpr auto ImpactPhysicalSurfaceEffects0x1c = 0x820; // UParticleSystem*
constexpr auto ImpactNiagaraPhysicalSurfaceEffectAssets = 0x900; // TArray<UNiagaraSystem*>
constexpr auto ImpactCameraShake = 0x910; // UMatineeCameraShake*
constexpr auto PrimaryForceFeedbackEffect = 0x918; // UForceFeedbackEffect*
constexpr auto SecondaryForceFeedbackEffect = 0x920; // UForceFeedbackEffect*
constexpr auto PrimaryImpactForceFeedbackEffect = 0x928; // UForceFeedbackEffect*
constexpr auto SecondaryImpactForceFeedbackEffect = 0x930; // UForceFeedbackEffect*
constexpr auto ImpactNiagaraPhysicalSurfaceEffectInstances = 0x938; // TArray<UNiagaraSystem*>
constexpr auto DataStoreManager = 0x948; // UFortGenericDataStoreManagerComponent*
constexpr auto FireAudioChannels0x4 = 0x950; // UAudioComponent*
constexpr auto ReloadAudioChannels0x3 = 0x970; // UAudioComponent*
constexpr auto TargetingAudioChannels0x2 = 0x988; // UAudioComponent*
constexpr auto SoundIndicatorComponent = 0x998; // UFortSoundIndicatorComponent*
constexpr auto CurrentGunFireIndex = 0x9a0; // int32_t
constexpr auto WeaponMesh = 0x9a8; // USkeletalMeshComponentBudgeted*
constexpr auto AllWeaponMeshes = 0x9b0; // TArray<USkeletalMeshComponentBudgeted*>
constexpr auto DefaultWeaponMaterials = 0x9c0; // TArray<UMaterialInterface*>
constexpr auto OriginalMaterialMap = 0x9d0; // TMap<USkeletalMeshComponentBudgeted*, FMaterialInterfaceArray>
constexpr auto FireAudioChannelWantsToPlay0x4 = 0xa20; // int32_t
constexpr auto WrapSectionMask = 0xa30; // int32_t
constexpr auto bUsingSecondaryFireAudio = 0xa34; // bool
constexpr auto bHasCachedAdditionalMeshes = 0xa35; // bool
constexpr auto CurrentReticleColor = 0xa38; // FColor
constexpr auto CurrentDamageStartLocation = 0xa40; // FVector
constexpr auto CurrentAdjustedAimDirection = 0xa58; // FVector
constexpr auto FireFXSignificance = 0xa70; // FFortEffectDistanceQuality
constexpr auto LastFireTime = 0xa88; // float
constexpr auto LastFireTimeVerified = 0xa8c; // float
constexpr auto bIsPlayingFireFX = 0xa90; // bool
constexpr auto bFireFXTriggered = 0xa91; // bool
constexpr auto TimerIntervalAdjustment = 0xa94; // float
constexpr auto InputQueueTimePercent = 0xa98; // float
constexpr auto bAllowTargeting = 0xa9c; // bool
constexpr auto bIsTargeting = 0xa9d; // bool
constexpr auto LastTargetingTransitionTime = 0xaa0; // float
constexpr auto TargetSourceOffset = 0xaa8; // FVector
constexpr auto TargetSourceOffsetWhileCrouched = 0xac0; // FVector
constexpr auto TargetSourceOffsetWhileTargeting = 0xad8; // FVector
constexpr auto CameraLocOffsetWhileTargeting = 0xaf0; // FVector
constexpr auto bTraceThroughPawns = 0xb08; // bool
constexpr auto bTraceThroughWorld = 0xb09; // bool
constexpr auto TraceThroughPawnsLimit = 0xb0c; // int32_t
constexpr auto TraceThroughBuildingsLimit = 0xb10; // int32_t
constexpr auto TraceThroughLandscapeLimit = 0xb14; // int32_t
constexpr auto bUseProjectileTrace = 0xb18; // bool
constexpr auto bUseVariableFocalDistanceTargeting = 0xb19; // bool
constexpr auto bUseWeaponTraceForReticle = 0xb1a; // bool
constexpr auto ProjectilePitchOffset = 0xb1c; // float
constexpr auto LastReloadTime = 0xb20; // float
constexpr auto LastSuccessfulReloadTime = 0xb24; // float
constexpr auto CurrentReloadDuration = 0xb28; // float
constexpr auto ItemEntryGuid = 0xb30; // FGuid
constexpr auto TrackerGuid = 0xb40; // FGuid
constexpr auto WeaponLevel = 0xb50; // int32_t
constexpr auto AmmoCount = 0xb54; // int32_t
constexpr auto PhantomReserveAmmo = 0xb58; // int32_t
constexpr auto BurstFireCounter = 0xb64; // int32_t
constexpr auto ChargeTime = 0xb68; // float
constexpr auto AccumulatedChargeTime = 0xb6c; // float
constexpr auto LastChargeTime = 0xb70; // float
constexpr auto StartChargeGameplayCue = 0xb74; // FGameplayTag
constexpr auto MaxChargeGameplayCue = 0xb78; // FGameplayTag
constexpr auto OutOfAmmoTextOverrideFailTag = 0xb7c; // FGameplayTag
constexpr auto NoSpareAmmoToReloadTextOverrideFailTag = 0xb80; // FGameplayTag
constexpr auto CurrentShotLogIndex = 0xb84; // int32_t
constexpr auto ShotLogFlags = 0xb88; // TArray<uint32_t>
constexpr auto bInitializedWeaponItem = 0xb98; // char : 1
constexpr auto bPendingDestroyDueToDurabilityOrStackCount = 0xb98; // char : 1
constexpr auto bCompletedAppliedAlterationsLoad = 0xb99; // char : 1
constexpr auto bCompletedWeaponLoad = 0xb99; // char : 1
constexpr auto bIsCosmeticLimited = 0xb99; // char : 1
constexpr auto bReplicatedAppliedAlterationsWithNoInstigator = 0xb99; // char : 1
constexpr auto bShouldFullyApplyVariantsOnEquip = 0xb99; // char : 1
constexpr auto bSecondaryFireAlwaysCancelSwimSprint = 0xb99; // char : 1
constexpr auto ChargeStatusPack = 0xb9c; // int16_t
constexpr auto AttachedTrajectoryIndicator = 0xbac; // TWeakObjectPtr<AFortProjectileTrajectory>
constexpr auto ActiveAbility = 0xbb8; // UFortGameplayAbility*
constexpr auto PrimaryAbilitySpecHandle = 0xbc0; // FGameplayAbilitySpecHandle
constexpr auto SecondaryAbilitySpecHandle = 0xbc4; // FGameplayAbilitySpecHandle
constexpr auto ReloadAbilitySpecHandle = 0xbc8; // FGameplayAbilitySpecHandle
constexpr auto ImpactAbilitySpecHandle = 0xbcc; // FGameplayAbilitySpecHandle
constexpr auto ReticleTraceOverrideSpecHandle = 0xbd0; // FGameplayAbilitySpecHandle
constexpr auto EquippedAbilityHandles = 0xbd8; // TArray<FGameplayAbilitySpecHandle>
constexpr auto EquippedAbilitySetHandles = 0xbe8; // TArray<FFortAbilitySetHandle>
constexpr auto AppliedAlterations = 0xbf8; // TArray<UFortAlterationItemDefinition*>
constexpr auto WeaponModSlots = 0xc08; // TArray<FFortWeaponModSlot>
constexpr auto EquippedWeaponModSlots = 0xc18; // TArray<FFortEquippedWeaponModSlot>
constexpr auto PreviousWeaponVariants = 0xc28; // FCosmeticVariantCache
constexpr auto AppliedItemWrap = 0x1248; // UAthenaItemWrapDefinition*
constexpr auto CachedFXManager = 0x1250; // AFortFXManager*
constexpr auto CachedSignificanceManager = 0x1258; // UFortSignificanceManager*
constexpr auto MuzzleSocketName = 0x1260; // FName
constexpr auto MuzzleFalloffSocketName = 0x1264; // FName
constexpr auto WeaponHandSocketNameOverride = 0x1268; // FName
constexpr auto LeftHandWeaponHandSocketNameOverride = 0x126c; // FName
constexpr auto WeaponHandSocketPartOverrides = 0x1270; // TArray<EFortCustomPartType>
constexpr auto bForceOverrideGenerateOverlapEvents = 0x1288; // char : 1
constexpr auto MaxWeaponSwitchNetworkWaitTime = 0x1374; // float
constexpr auto LastFireAbilityTime = 0x1378; // float
constexpr auto EquipAnimation = 0x13b0; // UAnimMontage*
constexpr auto ReloadAnimation = 0x13b8; // UAnimMontage*
constexpr auto CustomReloadAnimationPerAmmoToFill = 0x13c0; // TArray<UAnimMontage*>
constexpr auto PrimaryAbilityAnimation = 0x13d0; // UAnimMontage*
constexpr auto SecondaryAbilityAnimation = 0x13d8; // UAnimMontage*
constexpr auto WeaponEquipMontage = 0x13e0; // UAnimMontage*
constexpr auto WeaponReloadMontage = 0x13e8; // UAnimMontage*
constexpr auto CustomWeaponReloadMontagePerAmmoToFill = 0x13f0; // TArray<UAnimMontage*>
constexpr auto WeaponPrimaryAbilityMontage = 0x1400; // UAnimMontage*
constexpr auto WeaponSecondaryAbilityMontage = 0x1408; // UAnimMontage*
constexpr auto PoseOffsetAnimSequence = 0x1410; // UAnimSequence*
constexpr auto PoseOffsetAnimSequenceFemaleOverride = 0x1418; // UAnimSequence*
constexpr auto WeaponCoreAnimation = 0x1420; // EFortWeaponCoreAnimation
constexpr auto WeaponPawnAnimSet = 0x1428; // UFortWeaponAnimSet*
constexpr auto WeaponPawnAnimLayerOverlayClass = 0x1430; // UAnimInstance*
constexpr auto WeaponAdditiveAnimSet = 0x1438; // UFortWeaponAdditiveAnimSet*
constexpr auto WeaponPawnAnimsetOverride = 0x1440; // UFortWeaponAnimSet*
constexpr auto UnableToPerformActionMontageOverride = 0x1478; // UAnimMontage*
constexpr auto ActiveFireMode = 0x1480; // TSoftObjectPtr<UFortWeaponFireModeData>
constexpr auto FireModeData_HipFire = 0x14a8; // TSoftObjectPtr<UFortWeaponFireModeData>
constexpr auto FireModeData_AimDownSight = 0x14d0; // TSoftObjectPtr<UFortWeaponFireModeData>
constexpr auto FireModeData_Override = 0x14f8; // TSoftObjectPtr<UFortWeaponFireModeData>
constexpr auto ItemWrapModifier = 0x1530; // ACustomItemWrapModifier*
constexpr auto LockOnTargetCandidate = 0x1550; // AActor*
constexpr auto bIgnoreTryToFireSlotCooldownRestriction = 0x1559; // bool
constexpr auto bFireConsumableAnalyticEvent = 0x155b; // bool
constexpr auto OnWeaponHudKeyActionUpdated = 0x1560; // FMulticastInlineDelegate
constexpr auto HudKeyActionData = 0x1570; // TArray<FWeaponHudData>
}


namespace SkeletalMeshComponent {
	constexpr auto AnimBlueprintGeneratedClass = 0x820; // ClassPtrProperty
constexpr auto AnimClass = 0x828; // UAnimInstance*
constexpr auto AnimScriptInstance = 0x830; // UAnimInstance*
constexpr auto PostProcessAnimInstance = 0x838; // UAnimInstance*
constexpr auto AnimationData = 0x840; // FSingleAnimationPlayData
constexpr auto RootBoneTranslation = 0x868; // FVector
constexpr auto LineCheckBoundsScale = 0x880; // FVector
constexpr auto LinkedInstances = 0x8c8; // TArray<UAnimInstance*>
constexpr auto CachedBoneSpaceTransforms = 0x8d8; // TArray<FTransform>
constexpr auto CachedComponentSpaceTransforms = 0x8e8; // TArray<FTransform>
constexpr auto GlobalAnimRateScale = 0x9a8; // float
constexpr auto KinematicBonesUpdateType = 0x9ac; // EKinematicBonesUpdateToPhysics
constexpr auto PhysicsTransformUpdateMode = 0x9ad; // EPhysicsTransformUpdateMode
constexpr auto AnimationMode = 0x9af; // EAnimationMode
constexpr auto bEnablePhysicsOnDedicatedServer = 0x9b1; // char : 1
constexpr auto bUpdateJointsFromAnimation = 0x9b1; // char : 1
constexpr auto bUpdateOverlapsOnAnimationFinalize = 0x9b1; // char : 1
constexpr auto bBlendPhysics = 0x9b1; // char : 1
constexpr auto bHasValidBodies = 0x9b1; // char : 1
constexpr auto bDisablePostProcessBlueprint = 0x9b1; // char : 1
constexpr auto bAllowClothActors = 0x9b2; // char : 1
constexpr auto bDisableClothSimulation = 0x9b2; // char : 1
constexpr auto bDisableRigidBodyAnimNode = 0x9b8; // char : 1
constexpr auto bAllowAnimCurveEvaluation = 0x9b8; // char : 1
constexpr auto bDisableAnimCurves = 0x9b8; // char : 1
constexpr auto bCollideWithEnvironment = 0x9b8; // char : 1
constexpr auto bCollideWithAttachedChildren = 0x9b8; // char : 1
constexpr auto bEnablePerPolyCollision = 0x9b9; // char : 1
constexpr auto bUseRefPoseOnInitAnim = 0x9b9; // char : 1
constexpr auto bPauseAnims = 0x9b9; // char : 1
constexpr auto bNoSkeletonUpdate = 0x9b9; // char : 1
constexpr auto bDeferKinematicBoneUpdate = 0x9b9; // char : 1
constexpr auto bLocalSpaceSimulation = 0x9b9; // char : 1
constexpr auto bResetAfterTeleport = 0x9b9; // char : 1
constexpr auto bForceRefpose = 0x9ba; // char : 1
constexpr auto bOnlyAllowAutonomousTickPose = 0x9ba; // char : 1
constexpr auto bIsAutonomousTickPose = 0x9ba; // char : 1
constexpr auto bOldForceRefPose = 0x9ba; // char : 1
constexpr auto bShowPrePhysBones = 0x9ba; // char : 1
constexpr auto bRequiredBonesUpToDate = 0x9ba; // char : 1
constexpr auto bAnimTreeInitialised = 0x9ba; // char : 1
constexpr auto bIncludeComponentLocationIntoBounds = 0x9ba; // char : 1
constexpr auto bSkipBoundsUpdateWhenInterpolating = 0x9bb; // char : 1
constexpr auto bNeedsQueuedAnimEventsDispatched = 0x9bb; // char : 1
constexpr auto bSkipKinematicUpdateWhenInterpolating = 0x9bb; // char : 1
constexpr auto bPropagateCurvesToSlaves = 0x9bb; // char : 1
constexpr auto bEnableLineCheckWithBounds = 0x9bb; // char : 1
constexpr auto CachedAnimCurveUidVersion = 0x9bc; // uint16_t
constexpr auto ClothBlendWeight = 0x9c0; // float
constexpr auto bWaitForParallelClothTask = 0x9c4; // bool
constexpr auto DisallowedAnimCurves = 0x9c8; // TArray<FName>
constexpr auto BodySetup = 0x9d8; // UBodySetup*
constexpr auto ClothMaxDistanceScale = 0x9e4; // float
constexpr auto OnConstraintBroken = 0x9e8; // FMulticastInlineDelegate
constexpr auto OnPlasticDeformation = 0x9f8; // FMulticastInlineDelegate
constexpr auto ClothingSimulationFactory = 0xa08; // UClothingSimulationFactory*
constexpr auto TeleportDistanceThreshold = 0xb08; // float
constexpr auto TeleportRotationThreshold = 0xb0c; // float
constexpr auto LastPoseTickFrame = 0xb18; // uint32_t
constexpr auto ClothingInteractor = 0xbb0; // UClothingSimulationInteractor*
constexpr auto OnAnimInitialized = 0xc80; // FMulticastInlineDelegate
}

namespace   SceneComponent{
	constexpr auto PhysicsVolume = 0xb8; // TWeakObjectPtr<APhysicsVolume>
constexpr auto AttachParent = 0xc0; // USceneComponent*
constexpr auto AttachSocketName = 0xc8; // FName
constexpr auto AttachChildren = 0xd0; // TArray<USceneComponent*>
constexpr auto ClientAttachedChildren = 0xe0; // TArray<USceneComponent*>
constexpr auto RelativeLocation = 0x138; // FVector
constexpr auto RelativeRotation = 0x150; // FRotator
constexpr auto RelativeScale3D = 0x168; // FVector
constexpr auto ComponentVelocity = 0x180; // FVector
constexpr auto bShouldSnapLocationWhenAttached = 0x198; // char : 1
constexpr auto bShouldBeAttached = 0x198; // char : 1
constexpr auto bVisible = 0x198; // char : 1
constexpr auto bAbsoluteScale = 0x198; // char : 1
constexpr auto bAbsoluteRotation = 0x198; // char : 1
constexpr auto bAbsoluteLocation = 0x198; // char : 1
constexpr auto bComponentToWorldUpdated = 0x198; // char : 1
constexpr auto bShouldSnapRotationWhenAttached = 0x199; // char : 1
constexpr auto bShouldUpdatePhysicsVolume = 0x199; // char : 1
constexpr auto bHiddenInGame = 0x199; // char : 1
constexpr auto bBoundsChangeTriggersStreamingDataRebuild = 0x199; // char : 1
constexpr auto bUseAttachParentBound = 0x199; // char : 1
constexpr auto bComputeFastLocalBounds = 0x199; // char : 1
constexpr auto bComputeBoundsOnceForGame = 0x199; // char : 1
constexpr auto bComputedBoundsOnceForGame = 0x199; // char : 1
constexpr auto Mobility = 0x19b; // EComponentMobility
constexpr auto DetailMode = 0x19c; // EDetailMode
constexpr auto PhysicsVolumeChangedDelegate = 0x19d; // FMulticastSparseDelegate
}


namespace  GameInstance
{
	constexpr auto LocalPlayers = 0x38; // TArray<ULocalPlayer*>
	constexpr auto OnlineSession = 0x48; // UOnlineSession*
	constexpr auto ReferencedObjects = 0x50; // TArray<UObject*>
	constexpr auto OnPawnControllerChangedDelegates = 0x78; // FMulticastInlineDelegate
}



namespace  Pawn{
constexpr auto bUseControllerRotationPitch = 0x2a0; // char : 1
constexpr auto bUseControllerRotationYaw = 0x2a0; // char : 1
constexpr auto bUseControllerRotationRoll = 0x2a0; // char : 1
constexpr auto bCanAffectNavigationGeneration = 0x2a0; // char : 1
constexpr auto bIsLocalViewTarget = 0x2a0; // char : 1
constexpr auto BaseEyeHeight = 0x2a4; // float
constexpr auto AutoPossessPlayer = 0x2a8; // EAutoReceiveInput
constexpr auto AutoPossessAI = 0x2a9; // EAutoPossessAI
constexpr auto RemoteViewPitch = 0x2aa; // char
constexpr auto AIControllerClass = 0x2b0; // AController*
constexpr auto PlayerState = 0x2b8; // APlayerState*
constexpr auto LastHitBy = 0x2c8; // AController*
constexpr auto Controller = 0x2d0; // AController*
constexpr auto PreviousController = 0x2d8; // AController*
constexpr auto ReceiveControllerChangedDelegate = 0x2e4; // FMulticastSparseDelegate
constexpr auto ReceiveRestartedDelegate = 0x2e5; // FMulticastSparseDelegate
constexpr auto ControlInputVector = 0x2e8; // FVector
constexpr auto LastControlInputVector = 0x300; // FVector
}

namespace  DefaultPawn {
	constexpr auto BaseTurnRate = 0x318; // float
	constexpr auto BaseLookUpRate = 0x31c; // float
	constexpr auto MovementComponent = 0x320; // UPawnMovementComponent*
	constexpr auto CollisionComponent = 0x328; // USphereComponent*
	constexpr auto MeshComponent = 0x330; // UStaticMeshComponent*
	constexpr auto bAddDefaultMovementBindings = 0x338; // char : 1
}
namespace  SkinnedMeshComponent {
	constexpr auto SkeletalMesh = 0x580; // USkeletalMesh*
	constexpr auto MasterPoseComponent = 0x588; // TWeakObjectPtr<USkinnedMeshComponent>
	constexpr auto SkinCacheUsage = 0x590; // TArray<ESkinCacheUsage>
	constexpr auto PhysicsAssetOverride = 0x6a8; // UPhysicsAsset*
	constexpr auto ForcedLodModel = 0x6b0; // int32_t
	constexpr auto MinLodModel = 0x6b4; // int32_t
	constexpr auto StreamingDistanceMultiplier = 0x6c0; // float
	constexpr auto LODInfo = 0x6d0; // TArray<FSkelMeshComponentLODInfo>
	constexpr auto VisibilityBasedAnimTickOption = 0x704; // EVisibilityBasedAnimTickOption
	constexpr auto bOverrideMinLOD = 0x706; // char : 1
	constexpr auto bUseBoundsFromMasterPoseComponent = 0x706; // char : 1
	constexpr auto bForceWireframe = 0x706; // char : 1
	constexpr auto bDisplayBones = 0x706; // char : 1
	constexpr auto bDisableMorphTarget = 0x706; // char : 1
	constexpr auto bCanHighlightSelectedSections = 0x707; // char : 1
	constexpr auto bCastCapsuleDirectShadow = 0x707; // char : 1
	constexpr auto bRecentlyRendered = 0x707; // char : 1
	constexpr auto bComponentUseFixedSkelBounds = 0x707; // char : 1
	constexpr auto bSyncAttachParentLOD = 0x707; // char : 1
	constexpr auto bConsiderAllBodiesForBounds = 0x707; // char : 1
	constexpr auto bPerBoneMotionBlur = 0x707; // char : 1
	constexpr auto bHideSkin = 0x707; // char : 1
	constexpr auto bCastCapsuleIndirectShadow = 0x708; // char : 1
	constexpr auto bCPUSkinning = 0x708; // char : 1
	constexpr auto bEnableUpdateRateOptimizations = 0x708; // char : 1
	constexpr auto bDisplayDebugUpdateRateOptimizations = 0x708; // char : 1
	constexpr auto bRenderStatic = 0x708; // char : 1
	constexpr auto bIgnoreMasterPoseComponentLOD = 0x708; // char : 1
	constexpr auto bCachedLocalBoundsUpToDate = 0x709; // char : 1
	constexpr auto bForceMeshObjectUpdate = 0x709; // char : 1
	constexpr auto CapsuleIndirectShadowMinVisibility = 0x70c; // float
	constexpr auto CachedWorldSpaceBounds = 0x748; // FBoxSphereBounds
	constexpr auto CachedWorldToLocalTransform = 0x780; // FMatrix
}


namespace  AnimInstance {
	    constexpr auto CurrentSkeleton = 0x28;
		constexpr auto RootMotionMode = 0x30;
		constexpr auto bUseMultiThreadedAnimationUpdate = 0x31;
		constexpr auto bUsingCopyPoseFromMesh = 0x31;
		constexpr auto bReceiveNotifiesFromLinkedInstances = 0x31;
		constexpr auto bPropagateNotifiesToLinkedInstances = 0x31;
		constexpr auto bUseMainInstanceMontageEvaluationData = 0x31;
		constexpr auto bQueueMontageEvents = 0x31;
		constexpr auto OnMontageBlendingOut = 0x38;
		constexpr auto OnMontageStarted = 0x48;
		constexpr auto OnMontageEnded = 0x58;
		constexpr auto OnAllMontageInstancesEnded = 0x68;
		constexpr auto NotifyQueue = 0x150;
		constexpr auto ActiveAnimNotifyState = 0x1C0;
		constexpr auto ActiveAnimNotifyEventReference = 0x1D0;
}

namespace  APlayerController {
	constexpr auto Player = 0x330; // UPlayer*
	constexpr auto AcknowledgedPawn = 0x338; // APawn*
	constexpr auto ControllingDirTrackInst = 0x340; // UInterpTrackInstDirector*
	constexpr auto MyHUD = 0x348; // AHUD*
	constexpr auto PlayerCameraManager = 0x350; // APlayerCameraManager*
	constexpr auto PlayerCameraManagerClass = 0x358; // APlayerCameraManager*
	constexpr auto bAutoManageActiveCameraTarget = 0x360; // bool
	constexpr auto TargetViewRotation = 0x368; // FRotator
	constexpr auto SmoothTargetViewRotationSpeed = 0x398; // float
	constexpr auto HiddenActors = 0x3a0; // TArray<AActor*>
	constexpr auto HiddenPrimitiveComponents = 0x3b0; // TArray<TWeakObjectPtr<UPrimitiveComponent>>
	constexpr auto LastSpectatorStateSynchTime = 0x3c4; // float
	constexpr auto LastSpectatorSyncLocation = 0x3c8; // FVector
	constexpr auto LastSpectatorSyncRotation = 0x3e0; // FRotator
	constexpr auto ClientCap = 0x3f8; // int32_t
	constexpr auto CheatManager = 0x400; // UCheatManager*
	constexpr auto CheatClass = 0x408; // UCheatManager*
	constexpr auto PlayerInput = 0x410; // UPlayerInput*
	constexpr auto ActiveForceFeedbackEffects = 0x418; // TArray<FActiveForceFeedbackEffect>
	constexpr auto bPlayerIsWaiting = 0x4a8; // char : 1
	constexpr auto NetPlayerIndex = 0x4ac; // char
	constexpr auto PendingSwapConnection = 0x508; // UNetConnection*
	constexpr auto NetConnection = 0x510; // UNetConnection*
	constexpr auto InputYawScale = 0x530; // float
	constexpr auto InputPitchScale = 0x534; // float
	constexpr auto InputRollScale = 0x538; // float
	constexpr auto bShowMouseCursor = 0x53c; // char : 1
	constexpr auto bEnableClickEvents = 0x53c; // char : 1
	constexpr auto bEnableTouchEvents = 0x53c; // char : 1
	constexpr auto bEnableMouseOverEvents = 0x53c; // char : 1
	constexpr auto bEnableTouchOverEvents = 0x53c; // char : 1
	constexpr auto bForceFeedbackEnabled = 0x53c; // char : 1
	constexpr auto bEnableStreamingSource = 0x53c; // char : 1
	constexpr auto bStreamingSourceShouldActivate = 0x53c; // char : 1
	constexpr auto ForceFeedbackScale = 0x540; // float
	constexpr auto ClickEventKeys = 0x548; // TArray<FKey>
	constexpr auto DefaultMouseCursor = 0x558; // EMouseCursor
	constexpr auto CurrentMouseCursor = 0x559; // EMouseCursor
	constexpr auto DefaultClickTraceChannel = 0x55a; // ECollisionChannel
	constexpr auto CurrentClickTraceChannel = 0x55b; // ECollisionChannel
	constexpr auto HitResultTraceDistance = 0x55c; // float
	constexpr auto SeamlessTravelCount = 0x560; // uint16_t
	constexpr auto LastCompletedSeamlessTravelCount = 0x562; // uint16_t
	constexpr auto InactiveStateInputComponent = 0x5d8; // UInputComponent*
	constexpr auto bShouldPerformFullTickWhenPaused = 0x5e0; // char : 1
	constexpr auto CurrentTouchInterface = 0x5f8; // UTouchInterface*
	constexpr auto SpectatorPawn = 0x678; // ASpectatorPawn*
	constexpr auto bIsLocalPlayerController = 0x684; // bool
	constexpr auto SpawnLocation = 0x688; // FVector
}
namespace FortPlayerController {
constexpr auto OnPlayerPawnPossessed = 0x838; // FMulticastInlineDelegate
constexpr auto OnPickupCreated = 0x848; // FMulticastInlineDelegate
constexpr auto OnViewTargetChanged = 0x888; // FMulticastInlineDelegate
constexpr auto OnInputFiltered = 0x898; // FMulticastInlineDelegate
constexpr auto bAllowPcbBenefits = 0x8c0; // bool
constexpr auto OnFortPawnChangedEvent = 0x8c8; // FMulticastInlineDelegate
constexpr auto OnControllerComponentAttachedEvent = 0x8d8; // FMulticastInlineDelegate
constexpr auto bInPossession = 0x981; // bool
constexpr auto AircraftInputComponent = 0x9d8; // UInputComponent*
constexpr auto MiniMapInputComponent = 0x9e0; // UFortMiniMapInputComponent*
constexpr auto SprintOverrideComponent = 0x9e8; // UActorComponent*
constexpr auto SkydiveMusicAudioComp = 0x9f0; // UAudioComponent*
constexpr auto bAssignedStartSpawn = 0x9f8; // char : 1
constexpr auto bReadyToStartMatch = 0x9f8; // char : 1
constexpr auto bClientPawnIsLoaded = 0x9f8; // char : 1
constexpr auto bHasInitiallySpawned = 0x9f8; // char : 1
constexpr auto bIsBeingKicked = 0x9f8; // char : 1
constexpr auto bIsDisconnecting = 0x9f8; // char : 1
constexpr auto bFailedToRespawn = 0x9f8; // char : 1
constexpr auto SpawnLoc = 0xa00; // FVector
constexpr auto NumPreviousSpawns = 0xa18; // int32_t
constexpr auto bCanSpectateBot = 0xa1c; // bool
constexpr auto OnBlueprintReadyCheckCompleted = 0xa20; // FMulticastInlineDelegate
constexpr auto OnDelayForPreServerTransitionAnimationEvent = 0xa40; // FMulticastInlineDelegate
constexpr auto SimpleLoadingScreenSoundMix = 0xa68; // USoundMix*
constexpr auto RegisteredPartnerId = 0xa80; // FString
constexpr auto RegisteredPartnerTag = 0xa90; // FGameplayTag
constexpr auto SprintOverrideAbilityGameplayTag = 0xa94; // FGameplayTag
constexpr auto ManagedAIs = 0xa98; // TArray<AFortAIPawn*>
constexpr auto MyFortPawn = 0xaa8; // AFortPlayerPawn*
constexpr auto MyFortPawnBeforeTakeoverOfScriptedPawn = 0xab0; // AFortPlayerPawn*
constexpr auto ScriptedPawnControllerBeforeTakeover = 0xab8; // AController*
constexpr auto bHasClientFinishedLoading = 0xac0; // bool
constexpr auto bHasServerFinishedLoading = 0xac1; // bool
constexpr auto TimeStartedWaiting = 0xac4; // float
constexpr auto TimeFinishedNavigationBuild = 0xac8; // float
constexpr auto MaterialParameterCollection = 0xad0; // UMaterialParameterCollection*
constexpr auto bLoadingScreenDropped = 0xae1; // bool
constexpr auto PendingSpectatorLocation = 0xae8; // FVector
constexpr auto ActorUnderReticle = 0xb00; // TWeakObjectPtr<AActor>
constexpr auto AutoFireReticleTarget = 0xb08; // TWeakObjectPtr<AActor>
constexpr auto AutofireTimerHandle = 0xb10; // FTimerHandle
constexpr auto WeakspotUnderReticle = 0xb20; // TWeakObjectPtr<ABuildingWeakSpot>
constexpr auto ActiveWeakSpots = 0xb28; // TArray<FBuildingWeakSpotData>
constexpr auto IdleKickLastTimeActive = 0xb38; // float
constexpr auto LastTimeActive = 0xb3c; // float
constexpr auto bRevertPlayerListenerChange = 0xb60; // bool
constexpr auto VehicleInputComponent = 0xb80; // UInputComponent*
constexpr auto bHoldingPrimaryFireFromTouch = 0xb88; // bool
constexpr auto bSupportNextPieceAssist = 0xb89; // bool
constexpr auto bAutoBuildForTrapPlacement = 0xb8a; // bool
constexpr auto bAutoBuildForFloorTrapPlacement = 0xb8b; // bool
constexpr auto bAutoBuildForWallTrapPlacement = 0xb8c; // bool
constexpr auto bAutoBuildForCeilingTrapPlacement = 0xb8d; // bool
constexpr auto bNoControllerLighting = 0xb8e; // bool
constexpr auto ReturnToMainMenuTimeoutDelay = 0xb90; // float
constexpr auto OnQuestObjectiveStateChanged = 0xb98; // FMulticastInlineDelegate
constexpr auto LastDamager = 0xbc0; // AFortPlayerController*
constexpr auto LastFallInstigator = 0xbd0; // AFortPlayerController*
constexpr auto LastDamagerCreditThresholdDropElim = 0xbdc; // float
constexpr auto LastDamagerCreditThresholdSelfElim = 0xbe0; // float
constexpr auto LastDamagerCreditThresholdStormElim = 0xbe4; // float
constexpr auto bGiveLastDamagerElimCreditOnDrop = 0xbe8; // bool
constexpr auto bGiveLastDamagerElimCreditOnSelfDamage = 0xbe9; // bool
constexpr auto bGiveLastDamagerElimCreditOnStormDamage = 0xbea; // bool
constexpr auto OnMcpProfilesInitializedEvent = 0xc38; // FMulticastInlineDelegate
constexpr auto OnEnterVehicleDriver = 0xdd8; // FMulticastInlineDelegate
constexpr auto OnEnterVehiclePassenger = 0xde8; // FMulticastInlineDelegate
constexpr auto OnExitVehicle = 0xdf8; // FMulticastInlineDelegate
constexpr auto OnFullyExitVehicle = 0xe08; // FMulticastInlineDelegate
constexpr auto OnVehicleSeatChanged = 0xe18; // FMulticastInlineDelegate
constexpr auto OnVehicleAbilitiesRemoved = 0xe28; // FMulticastInlineDelegate
constexpr auto OnTetherChanged = 0xe38; // FMulticastInlineDelegate
constexpr auto bHoldingObject = 0xe80; // char : 1
constexpr auto DBNOCarryInputComponent = 0xe88; // UInputComponent*
constexpr auto HeldObjectsInputComponent = 0xe90; // UInputComponent*
constexpr auto bForceJogHeld = 0xee0; // char : 1
constexpr auto bSprintWasCanceledByReload = 0xee0; // char : 1
constexpr auto bForceBinaryForward = 0xee0; // char : 1
constexpr auto bShouldAttemptReloadOnEquip = 0xee0; // char : 1
constexpr auto bForcingJogFromToggle = 0xee0; // char : 1
constexpr auto bSprintToggleable = 0xee0; // char : 1
constexpr auto bHoldingSprint = 0xee0; // char : 1
constexpr auto bWantsToSprint = 0xee0; // char : 1
constexpr auto bSprintBehaviorIsOverridden = 0xee1; // char : 1
constexpr auto bSprintByDefaultWhenSprintIsOverridden = 0xee1; // char : 1
constexpr auto bSprintByDefault = 0xee1; // char : 1
constexpr auto bAutoRunOn = 0xee1; // char : 1
constexpr auto bUseHoldToSwapPickup = 0xee1; // char : 1
constexpr auto bTargetingToggleable = 0xee1; // char : 1
constexpr auto bTargetingToggleableWithTouch = 0xee1; // char : 1
constexpr auto bMovementDisabledDueToCancellableAction = 0xee1; // char : 1
constexpr auto bIsPlayerActivelyMoving = 0xee2; // char : 1
constexpr auto bPlaceHeldObjectPressed = 0xee2; // char : 1
constexpr auto InMovementCancellableAction = 0xee4; // int32_t
constexpr auto bAllowHoldForAmmoCrafting = 0xee8; // bool
constexpr auto bIsClientTimingOut = 0xee9; // bool
constexpr auto ClientTimeoutBlockInputTime = 0xeec; // float
constexpr auto LastMoveInputFrame = 0xef8; // uint64_t
constexpr auto LastPressGamepadSprintTime = 0xf00; // float
constexpr auto bAutoRunWasHoldingForward = 0xf04; // bool
constexpr auto bAtNameBaseScreen = 0xf05; // bool
constexpr auto OnSetFirstPersonCamera = 0xf08; // FMulticastInlineDelegate
constexpr auto CinematicCameraClassOverride = 0xf88; // UFortCinematicCamera*
constexpr auto bOnPressExecuteJetpack = 0xf90; // bool
constexpr auto bShowHitMarkersForFriendlyFire = 0xfb0; // bool
constexpr auto bServerSideHitMarkers = 0xfb1; // bool
constexpr auto OnUiChoiceCompleted = 0xfc8; // FMulticastInlineDelegate
constexpr auto OnRegainedFocus = 0xfd8; // FMulticastInlineDelegate
constexpr auto OnReloadCancelingSprint = 0xfe8; // FMulticastInlineDelegate
constexpr auto OnOpenVoteDialog = 0x1010; // FMulticastInlineDelegate
constexpr auto bGamepadAbilityPending = 0x12c4; // bool
constexpr auto bForceAllowCursorMode = 0x12c5; // bool
constexpr auto bForceAllowCameraMode = 0x12c6; // bool
constexpr auto bSuppressEventNotifications = 0x12c8; // bool
constexpr auto LastSpotTime = 0x1338; // float
constexpr auto CurrentMarks = 0x1350; // TArray<TWeakObjectPtr<AFortMarkActor>>
constexpr auto LoopingUIFeedbackComponents = 0x1360; // TMap<FName, UAudioComponent*>
constexpr auto PreviewAbility = 0x13b0; // UFortGameplayAbility*
constexpr auto IntensityGraphInfo = 0x13d0; // FAIDirectorDebugInfo
constexpr auto PIDValuesGraphInfo = 0x13f8; // FAIDirectorDebugInfo
constexpr auto PIDContributionsGraphInfo = 0x1420; // FAIDirectorDebugInfo
constexpr auto AIDirectorDataManager = 0x1448; // AFortAIDirectorDataManager*
constexpr auto MusicManager = 0x1450; // AFortMusicManager*
constexpr auto OnBuildPreviewMarkerVisibilityChanged = 0x1458; // FMulticastInlineDelegate
constexpr auto OnWeakSpotReset = 0x1468; // FMulticastInlineDelegate
constexpr auto bUsePredictedBuildingActors = 0x1488; // bool
constexpr auto bRegisterPredictedBuildingActorsWithGrid = 0x1489; // bool
constexpr auto bPredictedBuildingWallsHaveNoCollision = 0x148a; // bool
constexpr auto PredictedActorLifespan = 0x148c; // float
constexpr auto PredictedBuildingSMActors = 0x1490; // TArray<ABuildingSMActor*>
constexpr auto BuildPreviewModeInputComponent = 0x1620; // UInputComponent*
constexpr auto BuildPreviewMarker = 0x1628; // ABuildingPlayerPrimitivePreview*
constexpr auto BuildPreviewMarkerExtraPiece = 0x1630; // ABuildingPlayerPrimitivePreview*
constexpr auto bAllowBuildingPreviewAutoRotation = 0x16a0; // bool
constexpr auto bRequireTraceToExistingBuildingToSetContext = 0x16a1; // bool
constexpr auto bAllowTraceToExistingBuildingToSetContextToRedirectToBlockingBuilding = 0x16a2; // bool
constexpr auto bRequireTraceToExistingBuildingToSetContextExcludeCurrentContext = 0x16a3; // bool
constexpr auto TargetedBuilding = 0x1770; // ABuildingActor*
constexpr auto TargetedVehicle = 0x1778; // AActor*
constexpr auto ContextualConversionClass = 0x1780; // ABuildingSMActor*
constexpr auto StartUpgradeSound = 0x1788; // TSoftObjectPtr<USoundBase>
constexpr auto HighlightedPrimaryBuildings = 0x17b0; // TArray<ABuildingActor*>
constexpr auto HighlightedInteractionBuildings = 0x17c0; // TArray<ABuildingActor*>
constexpr auto HighlightedPrimaryBuilding = 0x17d0; // TWeakObjectPtr<ABuildingActor>
constexpr auto BuildPreviewMarkerParentMaterial = 0x17d8; // TSoftObjectPtr<UMaterialInterface>
constexpr auto BuildPreviewMarkerMIDs = 0x1800; // TArray<UMaterialInstanceDynamic*>
constexpr auto BuildPreviewRotationIterations = 0x1810; // char
constexpr auto bBuildPreviewMirrored = 0x1814; // char : 1
constexpr auto BuildPreviewMarkerOptionalAdjustment = 0x1818; // EFortBuildPreviewMarkerOptionalAdjustment
constexpr auto bBuildFree = 0x181c; // char : 1
constexpr auto bCraftFree = 0x1854; // char : 1
constexpr auto CurrentCostInfoType = 0x1858; // EFortCostInfoTypes
constexpr auto CurrentBuildableClass = 0x1860; // ABuildingSMActor*
constexpr auto PreviousBuildableClass = 0x1868; // ABuildingSMActor*
constexpr auto CurrentResourceLevel = 0x1870; // EFortResourceLevel
constexpr auto CurrentResourceType = 0x1871; // EFortResourceType
constexpr auto LastBuildableStateData0xc = 0x1878; // FLastBuildableState
constexpr auto QueuedDamageNumbers = 0x1948; // TArray<FFortDamageNumberInfo>
constexpr auto DamageNumbersActor = 0x1958; // AFortDamageNumbersActor*
constexpr auto EditModeInputComponent = 0x1960; // UInputComponent*
constexpr auto EditBuildingActor = 0x1968; // ABuildingSMActor*
constexpr auto EditModeDistance = 0x1970; // float
constexpr auto LastBuildPreviewGridSnapLoc = 0x1978; // FVector
constexpr auto LastBuildPreviewGridSnapRot = 0x1990; // FRotator
constexpr auto LastBuildPreviewGridSnapCentroid = 0x19a8; // FVector
constexpr auto PickerInputComponent = 0x19c0; // UInputComponent*
constexpr auto TrapPickerDecoHelper = 0x19c8; // AFortDecoHelper*
constexpr auto TouchEditResults = 0x19d0; // TArray<FHitResult>
constexpr auto bBuildingPlacementTraceSkipInitialPenetrationOfBuildingSMActor = 0x19e1; // bool
constexpr auto bBuildingPlacementTraceSkipInitialPenetrationOfStaticMesh = 0x19e2; // bool
constexpr auto ClientQuickBars = 0x1a28; // AFortQuickBars*
constexpr auto RecentlyRemovedQuickbarInfo = 0x1a38; // TArray<FRecentlyRemovedQuickbarInfo>
constexpr auto DelayedQuickBarActions = 0x1a98; // FDelayedQuickBarActionContainer
constexpr auto ClientProcessedQuickBarActions = 0x1bb8; // TSet<uint32_t>
constexpr auto bShouldForceDeleteDroppedItems = 0x1c08; // bool
constexpr auto QueuedItemsToDrop = 0x1c30; // FQueuedItemsToDropViaPickup
constexpr auto bAutoEquipBetterItems = 0x1cd8; // char : 1
constexpr auto WorldInventory = 0x1ce0; // AFortInventory*
constexpr auto OutpostInventory = 0x1ce8; // AFortInventory*
constexpr auto ViewTargetInventory = 0x1cf0; // AFortInventory*
constexpr auto bIsSavingGadgetLoadout = 0x1d44; // char : 1
constexpr auto bForceWorldInventoryUpdate = 0x1d44; // char : 1
constexpr auto bAccountInventoryWasUpdated = 0x1d44; // char : 1
constexpr auto bHasInitializedHeroInventory = 0x1d44; // char : 1
constexpr auto bHasInitializedWorldInventory = 0x1d44; // char : 1
constexpr auto BotPilot = 0x1de0; // UFortClientPilot_Base*
constexpr auto BotManager = 0x1e00; // UFortClientBotManager*
constexpr auto ClientBotManagerClass = 0x1e10; // UFortClientBotManager*
constexpr auto CosmeticLoadoutPC = 0x1e30; // FFortAthenaLoadout
constexpr auto LocalPawnCustomizationAssetLoader = 0x1f90; // UFortCustomizationAssetLoader*
constexpr auto bDropWeaponsDuringAllMissionStates = 0x1fb0; // bool
constexpr auto LatestRewardReport = 0x1fd0; // FFortRewardReport
constexpr auto MyPlayerInfo = 0x2040; // UFortRegisteredPlayerInfo*
constexpr auto UpdatedObjectiveStats = 0x2048; // TArray<FFortUpdatedObjectiveStat>
constexpr auto bHasUnsavedPrimaryMissionProgress = 0x2058; // bool
constexpr auto StatManager = 0x2098; // UStatManager*
constexpr auto HeartbeatManager = 0x20a0; // UHeartbeatManager*
constexpr auto StatEventManager = 0x20a8; // UFortStatEventManager*
constexpr auto CachedPersistentGameplayStats = 0x20b0; // FFortPersistentGameplayStatContainer
constexpr auto LastEmotePlayed = 0x20d0; // UFortMontageItemDefinitionBase*
constexpr auto EmoteUsageCounts = 0x20d8; // TMap<UFortMontageItemDefinitionBase*, int32_t>
constexpr auto AnalyticsBuildingWallTooLowLocations = 0x2128; // TArray<FVector>
constexpr auto NearbyEmotingPawns = 0x2138; // TSet<AFortPlayerPawn*>
constexpr auto NearbyEmotingPawnCount = 0x2188; // TMap<FName, int32_t>
constexpr auto McpProfileGroup = 0x21d8; // UMcpProfileGroup*
constexpr auto CommonPublicMcpProfile = 0x21e0; // UFortMcpProfileCommonPublic*
constexpr auto CommonCoreMcpProfile = 0x21e8; // UFortMcpProfileCommonCore*
constexpr auto MainMcpProfile = 0x21f0; // UFortMcpProfileCampaign*
constexpr auto AthenaProfile = 0x21f8; // UFortMcpProfileAthena*
constexpr auto MetadataProfile = 0x2200; // UFortMcpProfileMetadata*
constexpr auto CreativeModeProfile = 0x2208; // UFortMcpProfileCreative*
constexpr auto TutorialCompletedState = 0x2210; // EFortPCTutorialCompletedState
constexpr auto bShouldReceiveCriticalMatchBonus = 0x2248; // bool
constexpr auto OnPlayerChangedBuildMode = 0x2250; // FMulticastInlineDelegate
constexpr auto OnAutoRunEnabled = 0x2260; // FMulticastInlineDelegate
constexpr auto VoiceInputSourceEffectPresetChain = 0x23d0; // USoundEffectSourcePresetChain*
constexpr auto LocationUnderReticle = 0x2478; // FVector
constexpr auto bUsePickers = 0x2490; // char : 1
constexpr auto bInfiniteDurability = 0x2490; // char : 1
constexpr auto bNoCoolDown = 0x2490; // char : 1
constexpr auto bInfiniteConsumables = 0x2490; // char : 1
constexpr auto bInfiniteMagazine = 0x2490; // char : 1
constexpr auto bVoiceChatPTTTransmit = 0x2490; // char : 1
constexpr auto bEnableVoiceChatPTT = 0x2490; // char : 1
constexpr auto bInfiniteAmmo = 0x2490; // char : 1
constexpr auto bCheatFly = 0x2491; // char : 1
constexpr auto bEnableShotLogging = 0x2491; // char : 1
constexpr auto bIsNearActiveEncounters = 0x2491; // char : 1
constexpr auto bCheatGhost = 0x2491; // char : 1
constexpr auto bPickerEnabled = 0x2491; // char : 1
constexpr auto bPickerOpen = 0x2491; // char : 1
constexpr auto OverriddenBackpackSize = 0x2494; // int32_t
constexpr auto CurrentReplaySpotLight = 0x2498; // AFortReplayMovableSpotLight*
constexpr auto AimHelpMode = 0x24a0; // uint32_t
constexpr auto JumpStaminaCost = 0x24a4; // EFortJumpStaminaCost
constexpr auto CameraPrototypeName = 0x24a8; // FName
constexpr auto bHideHudEnglishText = 0x24e8; // bool
constexpr auto bAutoChangeMaterial = 0x24e9; // bool
constexpr auto bServerAutoChangeMaterial = 0x24ea; // bool
constexpr auto bPeripheralLightingEnabled = 0x24eb; // bool
constexpr auto bRudderControlEnabled = 0x24ec; // bool
constexpr auto RudderDeadZone = 0x24f0; // float
constexpr auto RudderMaxThrottle = 0x24f4; // float
constexpr auto ActiveSprayInstances = 0x24f8; // TArray<AFortSprayDecalInstance*>
constexpr auto ActiveToyInstances = 0x2508; // TArray<AActor*>
constexpr auto ToySummonCounts = 0x2518; // TMap<UObject*, int32_t>
constexpr auto bSyncPeripheralLightingWithEmoteMusic = 0x2568; // bool
constexpr auto bPushEmoteAudioDataToCosmeticMaterials = 0x2569; // bool
constexpr auto LastEmoteMusicFFT100hz = 0x256c; // float
constexpr auto LastEmoteMusicFFT2000hz = 0x2570; // float
constexpr auto EmoteMusicBeatThreshold = 0x2574; // float
constexpr auto EmoteMusicEnvelopeBeatCount = 0x2578; // float
constexpr auto bZeroingCameraRoll = 0x26e0; // bool
constexpr auto bTryPickupSwap = 0x26e1; // bool
constexpr auto bClientSideEditPrediction = 0x26e2; // bool
constexpr auto ClientSideEditPredictionTimeout = 0x26e4; // float
constexpr auto PendingEnterEditModeActor = 0x26f0; // ABuildingSMActor*
constexpr auto RandomCharacterIndex = 0x26f8; // int32_t
constexpr auto AntiAddictionPlayTimeMultiplier = 0x26fc; // float
constexpr auto bUsesWidgetForFPSDisplay = 0x2700; // bool
constexpr auto bShowFPS = 0x2701; // bool
constexpr auto OnShowFPSChange = 0x2708; // FMulticastInlineDelegate
constexpr auto bShowTemperature = 0x2718; // bool
constexpr auto OnShowTemperatureChange = 0x2720; // FMulticastInlineDelegate
constexpr auto LockOnInfo = 0x2788; // FLockOnInfo
constexpr auto bLockPrimaryInputMethodToMouse = 0x27d8; // bool
constexpr auto IndicatorManager = 0x27e8; // UFortIndicatorManager*
constexpr auto bFinalXPUpdateFailed = 0x2800; // bool
constexpr auto TestUserWidget = 0x2808; // UUserWidget*
constexpr auto PreviousStasisMode = 0x2810; // EFortPawnStasisMode
constexpr auto BattleMapSpectatorClass = 0x2818; // ABattleMapPawnLive*
constexpr auto bReleaseBuildingContextOnPlace = 0x283d; // bool
constexpr auto TurboPlaceFirstInterval = 0x2840; // float
constexpr auto TurboPlaceInterval = 0x2844; // float
constexpr auto bCreativeTurboDelete = 0x2848; // bool
constexpr auto TurboDeleteFirstInterval = 0x284c; // float
constexpr auto TurboDeleteInterval = 0x2850; // float
constexpr auto bTurboBuild = 0x2855; // bool
constexpr auto TurboBuildFirstInterval = 0x2858; // float
constexpr auto TurboBuildRequestFailedInterval = 0x285c; // float
constexpr auto TurboBuildInterval = 0x2860; // float
constexpr auto FortControllerComponent_Telemetry = 0x2870; // UFortControllerComponent_Telemetry*
constexpr auto InventoryNetworkManagementComponent = 0x2878; // UFortControllerComponent_InventoryNetworkManagement*
constexpr auto InteractionComponent = 0x2880; // UFortControllerComponent_Interaction*
constexpr auto QuickEditComponent = 0x2888; // UFortControllerComponent_QuickEdit*
constexpr auto SmartBuildComponent = 0x2890; // UFortControllerComponent_SmartBuild*
constexpr auto CollectionsComponent = 0x2898; // UFortControllerComponent_Collections*
constexpr auto PendingExecuteInventoryItemHandle = 0x28a0; // FItemVariantHandle
constexpr auto QuickHealItemPickerClass = 0x28d0; // UQuickHealItemPicker*
constexpr auto OnPlayerSpawnedBuildingActor = 0x28d8; // FMulticastInlineDelegate
constexpr auto MeshParentIds = 0x28e8; // TArray<FString>
constexpr auto OnToggleFullscreenMap = 0x28f8; // FMulticastInlineDelegate
constexpr auto ForcedInputRotationSpeed = 0x2a00; // float
constexpr auto PendingClientRestartPawn = 0x2a08; // APawn*
}
namespace APlayerCameraManager
{
	constexpr auto PCOwner = 0x298; // APlayerController*
	constexpr auto TransformComponent = 0x2a0; // USceneComponent*
	constexpr auto DefaultFOV = 0x2ac; // float
	constexpr auto DefaultOrthoWidth = 0x2b4; // float
	constexpr auto DefaultAspectRatio = 0x2bc; // float
	constexpr auto CameraCache = 0x330; // FCameraCacheEntry
	constexpr auto LastFrameCameraCache = 0xab0; // FCameraCacheEntry
	constexpr auto ViewTarget = 0x1230; // FTViewTarget
	constexpr auto PendingViewTarget = 0x19c0; // FTViewTarget
	constexpr auto CameraCachePrivate = 0x2180; // FCameraCacheEntry
	constexpr auto LastFrameCameraCachePrivate = 0x2900; // FCameraCacheEntry
	constexpr auto ModifierList = 0x3080; // TArray<UCameraModifier*>
	constexpr auto DefaultModifiers = 0x3090; // TArray<UCameraModifier*>
	constexpr auto FreeCamDistance = 0x30a0; // float
	constexpr auto FreeCamOffset = 0x30a8; // FVector
	constexpr auto ViewTargetOffset = 0x30c0; // FVector
	constexpr auto OnAudioFadeChangeEvent = 0x30d8; // FMulticastInlineDelegate
	constexpr auto CameraLensEffects = 0x3100; // TArray<TScriptInterface<ICameraLensEffectInterface>>
	constexpr auto CachedCameraShakeMod = 0x3110; // UCameraModifier_CameraShake*
	constexpr auto AnimInstPool0x8 = 0x3118; // UCameraAnimInst*
	constexpr auto PostProcessBlendCache = 0x3158; // TArray<FPostProcessSettings>
	constexpr auto ActiveAnims = 0x3178; // TArray<UCameraAnimInst*>
	constexpr auto FreeAnims = 0x3188; // TArray<UCameraAnimInst*>
	constexpr auto AnimCameraActor = 0x3198; // ACameraActor*
	constexpr auto bClientSimulatingViewTarget = 0x31a0; // char : 1
	constexpr auto bUseClientSideCameraUpdates = 0x31a0; // char : 1
	constexpr auto bDefaultConstrainAspectRatio = 0x31a0; // char : 1
	constexpr auto bIsOrthographic = 0x31a0; // char : 1
	constexpr auto bGameCameraCutThisFrame = 0x31a1; // char : 1
	constexpr auto ViewPitchMin = 0x31a4; // float
	constexpr auto ViewPitchMax = 0x31a8; // float
	constexpr auto ViewYawMin = 0x31ac; // float
	constexpr auto ViewYawMax = 0x31b0; // float
	constexpr auto ViewRollMin = 0x31b4; // float
	constexpr auto ViewRollMax = 0x31b8; // float
	constexpr auto ServerUpdateCameraTimeout = 0x31c0; // float
}

namespace FortAthenaSKVehicle {

	constexpr auto WheelOffsetFR = 0x1868; // float
	constexpr auto WheelOffsetFL = 0x186c; // float
	constexpr auto WheelOffsetLimitF = 0x1870; // float
	constexpr auto WheelOffsetBR = 0x1874; // float
	constexpr auto WheelOffsetBL = 0x1878; // float
	constexpr auto WheelOffsetLimitB = 0x187c; // float
	constexpr auto WheelOffsetLerpPerSecondUp = 0x1880; // float
	constexpr auto WheelOffsetLerpPerSecondDown = 0x1884; // float
	constexpr auto AxleOffsetZ = 0x1888; // float
	constexpr auto AxleOffsetZ_B = 0x188c; // float
	constexpr auto AxleCenterF = 0x1890; // float
	constexpr auto AxleCenterB = 0x1894; // float
	constexpr auto AxleRollF = 0x1898; // float
	constexpr auto AxleRollB = 0x189c; // float
	constexpr auto WheelRotationFR = 0x18a0; // float
	constexpr auto WheelRotationFL = 0x18a4; // float
	constexpr auto WheelRotationBR = 0x18a8; // float
	constexpr auto WheelRotationBL = 0x18ac; // float
	constexpr auto WheelRotationVelocityFR = 0x18b0; // float
	constexpr auto WheelRotationVelocityFL = 0x18b4; // float
	constexpr auto WheelRotationVelocityBR = 0x18b8; // float
	constexpr auto WheelRotationVelocityBL = 0x18bc; // float
	constexpr auto WheelSpinFR = 0x18c0; // float
	constexpr auto WheelSpinFL = 0x18c4; // float
	constexpr auto WheelSpinBR = 0x18c8; // float
	constexpr auto WheelSpinBL = 0x18cc; // float
	constexpr auto WheelSpinVelocityFR = 0x18d0; // float
	constexpr auto WheelSpinVelocityFL = 0x18d4; // float
	constexpr auto WheelSpinVelocityBR = 0x18d8; // float
	constexpr auto WheelSpinVelocityBL = 0x18dc; // float
	constexpr auto WheelSpinDampingPerSecond = 0x18e0; // float
}

namespace StaticMeshComponent {
	constexpr auto ForcedLodModel = 0x578; // int32_t
	constexpr auto PreviousLODLevel = 0x57c; // int32_t
	constexpr auto MinLOD = 0x580; // int32_t
	constexpr auto SubDivisionStepSize = 0x584; // int32_t
	constexpr auto StaticMesh = 0x588; // UStaticMesh*
	constexpr auto WireframeColorOverride = 0x590; // FColor
	constexpr auto bForceNavigationObstacle = 0x594; // char : 1
	constexpr auto bIgnoreInstanceForTextureStreaming = 0x594; // char : 1
	constexpr auto bDisallowMeshPaintPerInstance = 0x594; // char : 1
	constexpr auto bOverrideLightMapRes = 0x594; // char : 1
	constexpr auto bOverrideNavigationExport = 0x594; // char : 1
	constexpr auto bOverrideWireframeColor = 0x594; // char : 1
	constexpr auto bEvaluateWorldPositionOffset = 0x594; // char : 1
	constexpr auto bOverrideMinLOD = 0x594; // char : 1
	constexpr auto bUseDefaultCollision = 0x595; // char : 1
	constexpr auto bReverseCulling = 0x595; // char : 1
	constexpr auto bSortTriangles = 0x595; // char : 1
	constexpr auto bUseSubDivisions = 0x595; // char : 1
	constexpr auto bOverrideDistanceFieldSelfShadowBias = 0x595; // char : 1
	constexpr auto bCastDistanceFieldIndirectShadow = 0x595; // char : 1
	constexpr auto OverriddenLightMapRes = 0x598; // int32_t
	constexpr auto DistanceFieldIndirectShadowMinVisibility = 0x59c; // float
	constexpr auto DistanceFieldSelfShadowBias = 0x5a0; // float
	constexpr auto StreamingDistanceMultiplier = 0x5a4; // float
	constexpr auto LODData = 0x5a8; // TArray<FStaticMeshComponentLODInfo>
	constexpr auto StreamingTextureData = 0x5b8; // TArray<FStreamingTextureBuildInfo>
	constexpr auto LightmassSettings = 0x5c8; // FLightmassPrimitiveSettings
}

namespace FortCameraMode {


	constexpr auto PlayerCamera = 0x28; // AFortPlayerCameraBase*
	constexpr auto TransitionTime = 0x30; // float
	constexpr auto TransitionOutTime = 0x34; // float
	constexpr auto bOverrideTransitionOutTime = 0x38; // bool
	constexpr auto TransitionParams = 0x3c; // FViewTargetTransitionParams
	constexpr auto bResetInterpolation = 0x4c; // char : 1
	constexpr auto bShouldAllowBlendingWhenActive = 0x4c; // char : 1
	constexpr auto bShouldAllowBlendingWhenInactive = 0x4c; // char : 1
	constexpr auto bShouldPassViewTargetCheckOnTransition = 0x4c; // char : 1

}


namespace FortCameraMode_ThirdPerson {
	constexpr auto FOV = 0x50; // float
	constexpr auto CameraSpaceForwardDistance = 0x54; // float
	constexpr auto bClampCameraPitch = 0x58; // bool
	constexpr auto bClampCameraYaw = 0x59; // bool
	constexpr auto CameraPitchMin = 0x5c; // float
	constexpr auto CameraPitchMax = 0x60; // float
	constexpr auto CameraYawMin = 0x64; // float
	constexpr auto CameraYawMax = 0x68; // float
	constexpr auto CameraOrigin = 0x6c; // ECameraOrigin
	constexpr auto CameraOriginSocketName = 0x70; // FName
	constexpr auto CameraOriginInterpSpeed = 0x78; // FVector
	constexpr auto CameraLocationErrorConstraintBox = 0x90; // FBox
	constexpr auto ViewTargetSpaceViewOffset = 0xc8; // FInterpOffset
	constexpr auto ViewTargetSpaceViewOffset_Crouch = 0xd8; // FInterpOffset
	constexpr auto ViewTargetSpaceViewOffseInterpSpeed = 0xe8; // FVector
	constexpr auto CameraSpaceViewOffset = 0x100; // FInterpOffset
	constexpr auto ViewTargetAlignmentFlipInterpDuration = 0x110; // float
	constexpr auto bScaleViewOffsetByViewTargetScale = 0x114; // bool
	constexpr auto bSupportsShoulderSwap = 0x115; // bool
	constexpr auto LastCameraOrigin = 0x178; // FVector
	constexpr auto CameraOriginLocalOffset = 0x190; // FVector
	constexpr auto PenetrationBlendInTime = 0x1a8; // float
	constexpr auto PenetrationBlendOutTime = 0x1ac; // float
	constexpr auto bPreventPenetration = 0x1b0; // bool
	constexpr auto bDoPredictiveAvoidance = 0x1b1; // bool
	constexpr auto CollisionPushOutDistance = 0x1b4; // float
	constexpr auto HidePawnPenetrationPercent = 0x1b8; // float
	constexpr auto LastAttachSocketName = 0x220; // FName
	constexpr auto LastBasePOV = 0x230; // FMinimalViewInfo
	constexpr auto DeltaBasePOV = 0x9a0; // FMinimalViewInfo
	constexpr auto BlendAlpha = 0x1110; // float
	constexpr auto PenetrationAvoidanceFeelers = 0x1128; // TArray<FPenetrationAvoidanceFeeler>
	constexpr auto SafeLocToAimLineBlockedPct = 0x1138; // float
	constexpr auto AimLineToDesiredPosBlockedPct = 0x113c; // float
	constexpr auto LastDrawDebugTime = 0x1140; // float
	constexpr auto LastViewTargetSpaceViewOffset = 0x1148; // FVector
	constexpr auto LastViewTargetAlignmentUp = 0x1160; // FVector
	constexpr auto ViewTargetAlignmentFlipInterpTime = 0x1178; // float
	constexpr auto LastCameraPivot = 0x1180; // FVector
	constexpr auto CachedPitchLimitMin = 0x1198; // float
	constexpr auto CachedPitchLimitMax = 0x119c; // float
	constexpr auto CachedYawLimitMin = 0x11a0; // float
	constexpr auto CachedYawLimitMax = 0x11a4; // float
	constexpr auto bLastViewTargetValidGroupEmoteLookTarget = 0x11a8; // bool
	constexpr auto IgnoreActorForCameraPenetration = 0x11b0; // AActor*
	constexpr auto DebugActorsHitDuringCameraPenetration = 0x11b8; // TArray<AActor*>
	constexpr auto bWasInVehicle = 0x11c8; // char : 1
	constexpr auto PreviousIgnoreActorForCameraPenetration = 0x11d0; // AActor*


}


namespace FortVehicleConfigs {


	constexpr auto NumWheelsTouchingGroundForWheelsOnGround = 0x28; // int32_t
	constexpr auto TimeToIdleBrake = 0x2c; // float
	constexpr auto ChangeDirBrakeDelta = 0x30; // float
	constexpr auto VehicleSleepCounter = 0x34; // float
	constexpr auto GasPedalDownMinSpeed = 0x38; // float
	constexpr auto AcceleratingSpeedThresholdMin = 0x3c; // float
	constexpr auto AcceleratingSpeedThresholdMax = 0x40; // float
	constexpr auto VehicleMinFOV = 0x44; // float
	constexpr auto VehicleMaxFOV = 0x48; // float
	constexpr auto VehicleMinFOVSpeed = 0x4c; // float
	constexpr auto VehicleMaxFOVSpeed = 0x50; // float
	constexpr auto VehicleFOVInterpSpeed = 0x54; // float
	constexpr auto VehicleFOVPassengerInterpSpeed = 0x58; // float
	constexpr auto CameraSpaceForwardDistanceOverride = 0x5c; // float
	constexpr auto DriverCameraShakeClass = 0x60; // UMatineeCameraShake*
	constexpr auto OffroadCamShakeClass = 0x68; // UMatineeCameraShake*
	constexpr auto OffroadCameraShakeOscillationYAmplitude = 0x70; // float
	constexpr auto OffroadCameraShakeOscillationZAmplitude = 0x74; // float
	constexpr auto OffroadCameraShakeMaxVehicleSpeed = 0x78; // float
	constexpr auto OffroadCameraShakeOscillationRotationAmplitude = 0x7c; // float
	constexpr auto OffroadCameraShakeOscillationMinFrequency = 0x80; // float
	constexpr auto OffroadCameraShakeOscillationMaxFrequency = 0x84; // float
	constexpr auto AcceleratingCamShakeClass = 0x88; // UMatineeCameraShake*
	constexpr auto AcceleratingMaxSpeedForCameraShakeIntensity = 0x90; // float
	constexpr auto AcceleratingMaxCameraShakeIntensity = 0x94; // float
	constexpr auto AcceleratingCameraShakeIntensityFalloff = 0x98; // float
	constexpr auto AcceleratingForceFeedbackDuration = 0x9c; // float
	constexpr auto bAcceleratingAffectsLeftLarge = 0xa0; // bool
	constexpr auto bAcceleratingAffectsLeftSmall = 0xa1; // bool
	constexpr auto bAcceleratingAffectsRightLarge = 0xa2; // bool
	constexpr auto bAcceleratingAffectsRightSmall = 0xa3; // bool
	constexpr auto AcceleratingMaxSpeedForForceFeedbackIntensity = 0xa4; // float
	constexpr auto AcceleratingMaxForceFeedbackIntensity = 0xa8; // float
	constexpr auto AcceleratingForceFeedbackIntensityFalloff = 0xac; // float
	constexpr auto InteractDistanceScalar = 0xb0; // float
	constexpr auto MinFallDamageHeight = 0xb4; // float
	constexpr auto MaxFallDamageHeight = 0xb8; // float
	constexpr auto MinFallDamage = 0xbc; // float
	constexpr auto MaxFallDamage = 0xc0; // float
	constexpr auto PlayerFallDamageMultiplier = 0xc4; // float
	constexpr auto bDamageFriendlyVehicles = 0xc8; // bool
	constexpr auto bDamageOtherVehicles = 0xc9; // bool
	constexpr auto bDamageOwnVehicle = 0xca; // bool
	constexpr auto bDamageAllowedFromOtherVehicle = 0xcb; // bool
	constexpr auto VehicleEjectCooldown = 0xcc; // float
	constexpr auto PlayerToSocketSweepRadius = 0xd0; // float
	constexpr auto VehicleGravity = 0xd4; // float
	constexpr auto PlayerGravityMultiplier = 0xd8; // float
	constexpr auto PassengerDamageOnDestruction = 0xdc; // float
	constexpr auto MinFallDamageNormalScale = 0xe0; // float
	constexpr auto DriverExitLaunchScalar = 0xe4; // float
	constexpr auto DriverExitLaunchUpScalar = 0xe8; // float
	constexpr auto DriverExitInAirLaunchScalar = 0xec; // float
	constexpr auto DriverExitInAirLaunchUpScalar = 0xf0; // float
	constexpr auto PassengerExitLaunchScalar = 0xf4; // float
	constexpr auto PassengerExitLaunchUpScalar = 0xf8; // float
	constexpr auto PassengerExitInAirLaunchScalar = 0xfc; // float
	constexpr auto PassengerExitInAirLaunchUpScalar = 0x100; // float
	constexpr auto bCanDoTricks = 0x104; // bool
	constexpr auto bShouldDriverHaveReticle = 0x105; // bool
	constexpr auto bSupportsWraps = 0x106; // bool
	constexpr auto ExitVehicleCoolDown = 0x108; // float
	constexpr auto bShouldProtectFromFireDamage = 0x10c; // bool
	constexpr auto bInheritScale = 0x10d; // bool
	constexpr auto HoldToExitTime = 0x110; // float
	constexpr auto ForceExitZOffset = 0x114; // float
	constexpr auto bBlockBuilding = 0x118; // bool
	constexpr auto bPreferDriverSeatWhenEmpty = 0x119; // bool
	constexpr auto bCanUseSkeletalMeshSimulationUpdatesChildTransforms = 0x11a; // bool
	constexpr auto FireDamagePerSecond = 0x11c; // float
	constexpr auto FireDamageTickRate = 0x120; // float
	constexpr auto bCanBeOnFire = 0x124; // bool
	constexpr auto DamageableParts = 0x128; // TArray<FVehicleDamageablePartConfig>
	constexpr auto ToggleablePartNames = 0x138; // TArray<FName>
	constexpr auto WeaponDynamicReticleData = 0x148; // TArray<FVehicleWeaponReticle3DConfig>
	constexpr auto UnoccupiedAutoDestroyTime = 0x158; // FScalableFloat
	constexpr auto HUDTopSpeed = 0x180; // float
	constexpr auto PlayerFacingName = 0x188; // FString
	constexpr auto WheelRotationRange = 0x198; // float
	constexpr auto VehicleFrontLowLateralFrictionMultiplier = 0x19c; // float
	constexpr auto VehicleRearLowLateralFrictionMultiplier = 0x1a0; // float
	constexpr auto VehicleFrontHighLateralFrictionMultiplier = 0x1a4; // float
	constexpr auto VehicleRearHighLateralFrictionMultiplier = 0x1a8; // float
	constexpr auto LowToHighFrictionDuration = 0x1ac; // float
	constexpr auto UphillIncline = 0x1b0; // float
	constexpr auto ReverseToForwardFrontFriction = 0x1b4; // float
	constexpr auto ReverseToForwardRearFriction = 0x1b8; // float
	constexpr auto ReverseToForwardMaxSpeed = 0x1bc; // float
	constexpr auto TireModDataMapping = 0x1c0; // TMap<FGameplayTag, FTireInfo>
	constexpr auto HonkTimeMax = 0x210; // float
	constexpr auto HonkCooldownMax = 0x214; // float
	constexpr auto HonkTimePerHonk = 0x218; // float
	constexpr auto ServerExtraHealth = 0x21c; // float
	constexpr auto MaxTimeZeroHealth = 0x220; // float
	constexpr auto MaxTimeExplosion = 0x224; // float
	constexpr auto SelfDestructTime = 0x228; // float
	constexpr auto MaxTimeSelfDestructCleanup = 0x22c; // float

}

namespace Character {


	constexpr auto Mesh = 0x318; // USkeletalMeshComponent*
	constexpr auto CharacterMovement = 0x320; // UCharacterMovementComponent*
	constexpr auto CapsuleComponent = 0x328; // UCapsuleComponent*
	constexpr auto BasedMovement = 0x330; // FBasedMovementInfo
	constexpr auto ReplicatedBasedMovement = 0x378; // FBasedMovementInfo
	constexpr auto AnimRootMotionTranslationScale = 0x3c0; // float
	constexpr auto BaseTranslationOffset = 0x3c8; // FVector
	constexpr auto BaseRotationOffset = 0x3e0; // FQuat
	constexpr auto ReplicatedServerLastTransformUpdateTimeStamp = 0x400; // float
	constexpr auto ReplayLastTransformUpdateTimeStamp = 0x404; // float
	constexpr auto ReplicatedMovementMode = 0x408; // char
	constexpr auto bInBaseReplication = 0x409; // bool
	constexpr auto CrouchedEyeHeight = 0x40c; // float
	constexpr auto bClientWasFalling = 0x410; // char : 1
	constexpr auto bSimGravityDisabled = 0x410; // char : 1
	constexpr auto bClientResimulateRootMotion = 0x410; // char : 1
	constexpr auto bClientResimulateRootMotionSources = 0x410; // char : 1
	constexpr auto bClientUpdating = 0x410; // char : 1
	constexpr auto bPressedJump = 0x410; // char : 1
	constexpr auto bProxyIsJumpForceApplied = 0x410; // char : 1
	constexpr auto bIsCrouched = 0x410; // char : 1
	constexpr auto bClientCheckEncroachmentOnNetUpdate = 0x411; // char : 1
	constexpr auto bServerMoveIgnoreRootMotion = 0x411; // char : 1
	constexpr auto bWasJumping = 0x411; // char : 1
	constexpr auto JumpKeyHoldTime = 0x414; // float
	constexpr auto JumpForceTimeRemaining = 0x418; // float
	constexpr auto ProxyJumpForceStartedTime = 0x41c; // float
	constexpr auto JumpMaxHoldTime = 0x420; // float
	constexpr auto JumpMaxCount = 0x424; // int32_t
	constexpr auto JumpCurrentCount = 0x428; // int32_t
	constexpr auto JumpCurrentCountPreJump = 0x42c; // int32_t
	constexpr auto OnReachedJumpApex = 0x438; // FMulticastInlineDelegate
	constexpr auto MovementModeChangedDelegate = 0x458; // FMulticastInlineDelegate
	constexpr auto OnCharacterMovementUpdated = 0x468; // FMulticastInlineDelegate
	constexpr auto SavedRootMotion = 0x478; // FRootMotionSourceGroup
	constexpr auto ClientRootMotionParams = 0x4c0; // FRootMotionMovementParams
	constexpr auto RootMotionRepMoves = 0x530; // TArray<FSimulatedRootMotionReplicatedMove>
	constexpr auto RepRootMotion = 0x540; // FRepRootMotionMontage

}

namespace FortPawn {


	constexpr auto bUseBaseChanged = 0x6a0; // char : 1
	constexpr auto bAllowDeathFromFallingDamage = 0x6a0; // char : 1
	constexpr auto bIsDying = 0x6a0; // char : 1
	constexpr auto bPlayedDying = 0x6a0; // char : 1
	constexpr auto bIsHiddenForDeath = 0x6a0; // char : 1
	constexpr auto bIsKnockedback = 0x6a0; // char : 1
	constexpr auto bIgnoreNextFallingDamage = 0x6a0; // char : 1
	constexpr auto bMovingEmote = 0x6a1; // char : 1
	constexpr auto bMovingEmoteFollowingOnly = 0x6a1; // char : 1
	constexpr auto bMovingEmoteForwardOnly = 0x6a1; // char : 1
	constexpr auto bUseLineTestForDamageZoneBoneDetection = 0x6a1; // char : 1
	constexpr auto bCanCapsuleBeUsedForTargeting = 0x6a1; // char : 1
	constexpr auto bIsStaggered = 0x6a1; // char : 1
	constexpr auto bMovingEmoteSkipLandingFX = 0x6a2; // char : 1
	constexpr auto bIsInvulnerable = 0x6a2; // char : 1
	constexpr auto bSpotted = 0x6a2; // char : 1
	constexpr auto bRegisterWithAISight = 0x6a2; // char : 1
	constexpr auto bRegisterWithAimAssist = 0x6a2; // char : 1
	constexpr auto bPrimaryInputHeld = 0x6a2; // char : 1
	constexpr auto bSecondaryInputHeld = 0x6a2; // char : 1
	constexpr auto bPrimaryInputQueued = 0x6a2; // char : 1
	constexpr auto bIsSwinging = 0x6a3; // char : 1
	constexpr auto bIsSynchedAction = 0x6a3; // char : 1
	constexpr auto bSwingingAttached = 0x6a3; // char : 1
	constexpr auto bIsSliding = 0x6a3; // char : 1
	constexpr auto bIsInGoop = 0x6a3; // char : 1
	constexpr auto bWeaponActivated = 0x6a3; // char : 1
	constexpr auto bReplicatedIsInGoop = 0x6a3; // char : 1
	constexpr auto SwingAttachLocation = 0x6a8; // FVector
	constexpr auto SwingAttachLocationUpdateDistanceThreshold = 0x6c0; // float
	constexpr auto SynchedActionLocation = 0x6c8; // FVector
	constexpr auto SynchedActionRotator = 0x6e0; // FRotator
	constexpr auto bSkipAnalogJump = 0x6f8; // char : 1
	constexpr auto FootstepTraceTypeQuery = 0x6f9; // ETraceTypeQuery
	constexpr auto FootstepSurfaceType = 0x6fa; // EFortFootstepSurfaceType
	constexpr auto SoundIndicatorComponent = 0x700; // UFortSoundIndicatorComponent*
	constexpr auto UroShiftBucket = 0x710; // EUpdateRateShiftBucket
	constexpr auto bWeaponHolstered = 0x711; // char : 1
	constexpr auto bPrioritizePawnCollisionsOnAbilityTargetSelectionVisibilityTest = 0x711; // char : 1
	constexpr auto bSkipReticleColorTrace = 0x711; // char : 1
	constexpr auto bPostProcessNavLocation = 0x711; // char : 1
	constexpr auto bHealthSynced = 0x711; // char : 1
	constexpr auto bUROCanTieToLODs = 0x711; // char : 1
	constexpr auto bUpdateMeshComponentUpdateFlagOnServer = 0x711; // char : 1
	constexpr auto bTreatAsPawnForHitMarkers = 0x712; // char : 1
	constexpr auto bDisplayPawnHitMarkersForChildActors = 0x712; // char : 1
	constexpr auto bUsesStats = 0x712; // char : 1
	constexpr auto bAllowBuildingActorTeleport = 0x712; // char : 1
	constexpr auto bIsDBNO = 0x712; // char : 1
	constexpr auto bWasDBNOOnDeath = 0x712; // char : 1
	constexpr auto bCachedIsInAthena = 0x712; // char : 1
	constexpr auto bShouldUseCharacterMovementIdleFastPath = 0x712; // char : 1
	constexpr auto CurrentMovementStyle = 0x713; // EFortMovementStyle
	constexpr auto ControlRecoveryBehavior = 0x714; // EFortControlRecoveryBehavior
	constexpr auto TeleportCounter = 0x715; // char
	constexpr auto PawnStatHandle = 0x718; // FDataTableRowHandle
	constexpr auto SlidingFriction = 0x728; // float
	constexpr auto SlidingBrakingDeceleration = 0x72c; // float
	constexpr auto StormShieldComponent = 0x730; // UFortStormShieldComponent*
	constexpr auto OnStormShieldComponentCreated = 0x738; // FMulticastInlineDelegate
	constexpr auto PushSize = 0x748; // EFortPawnPushSize
	constexpr auto LastSurfaceTraceTime = 0x754; // float
	constexpr auto LastSurfaceTraceLocation = 0x758; // FVector
	constexpr auto OnPawnJumped = 0x798; // FMulticastInlineDelegate
	constexpr auto PawnUniqueID = 0x7a8; // int32_t
	constexpr auto CurrentWeapon = 0x7b0; // AFortWeapon*
	constexpr auto PreviousWeapon = 0x7b8; // AFortWeapon*
	constexpr auto CurrentWeaponList = 0x7c0; // TArray<AFortWeapon*>
	constexpr auto PreviousAbilityWeaponNameForTelemetry = 0x7d0; // FString
	constexpr auto WeaponHandSocketName = 0x7e0; // FName
	constexpr auto LeftHandWeaponHandSocketName = 0x7e4; // FName
	constexpr auto SpawnSpot = 0x7e8; // AActor*
	constexpr auto DeathTags = 0x7f0; // FGameplayTagContainer
	constexpr auto SpawnImmunityTime = 0x810; // float
	constexpr auto CurrentWaterBody = 0x818; // AFortWaterBodyActor*
	constexpr auto bShouldSupportSurfaceSwimming = 0x820; // bool
	constexpr auto ReplicatedWaterBody = 0x828; // AFortWaterBodyActor*
	constexpr auto IncomingPickups = 0x830; // TArray<AFortPickup*>
	constexpr auto PickupDirectionData = 0x840; // TArray<FFortPickupEntryData>
	constexpr auto bIsStunned = 0x850; // bool
	constexpr auto VortexParams = 0x860; // FVortexParams
	constexpr auto bIsInVortex = 0x8e0; // char : 1
	constexpr auto bReplicatedIsInVortex = 0x8e0; // char : 1
	constexpr auto CurrentSkyTube = 0x8e8; // AFortSkyTube*
	constexpr auto ReplicatedSkyTube = 0x8f0; // AFortSkyTube*
	constexpr auto OverlappedSkyTubes = 0x8f8; // TArray<AFortSkyTube*>
	constexpr auto bPrioritizeEarlierTubes = 0x908; // FScalableFloat
	constexpr auto OnSkyTubeChanged = 0x930; // FMulticastInlineDelegate
	constexpr auto AdditiveCringeCount = 0x940; // int32_t
	constexpr auto AdditiveCringeDuration = 0x944; // float
	constexpr auto bSupportsDamageNumbersAtHitLocation = 0x948; // bool
	constexpr auto PushMomentum = 0x950; // FVector_NetQuantize
	constexpr auto LocalSpin = 0x96c; // float
	constexpr auto bTurnTransitionActiveAndControllingRotation = 0x971; // bool
	constexpr auto DeathCueTag = 0x9cc; // FGameplayCueTag
	constexpr auto DeathStatTags = 0x9d0; // TArray<FFortStatManagerTag>
	constexpr auto DeathHitSocket = 0x9e0; // USkeletalMeshSocket*
	constexpr auto OnPlayerStartDBNO = 0x9e8; // FMulticastInlineDelegate
	constexpr auto OnDBNOStateChanged = 0x9f8; // FMulticastInlineDelegate
	constexpr auto DefaultLifespanAfterDeath = 0xa08; // float
	constexpr auto TeamBeaconMaxDist = 0xa0c; // float
	constexpr auto TeamBeaconTextColor = 0xa10; // FColor
	constexpr auto LastTakeHitTimeTimeout = 0xa14; // float
	constexpr auto LastDamagedTime = 0xa18; // float
	constexpr auto CurrentlyAttachedWeapon = 0xa20; // AFortWeapon*
	constexpr auto CachedNavFloor = 0xa28; // UPrimitiveComponent*
	constexpr auto MaxFootstepDistance = 0xa30; // float
	constexpr auto DBNOLandingSound = 0xa38; // USoundBase*
	constexpr auto DefaultFootstepSound = 0xa40; // USoundBase*
	constexpr auto DefaultFastFootstepSound = 0xa48; // USoundBase*
	constexpr auto DefaultLandingSound = 0xa50; // USoundBase*
	constexpr auto DefaultHardLandingSound = 0xa58; // USoundBase*
	constexpr auto DefaultJumpSound = 0xa60; // USoundBase*
	constexpr auto DefaultHitNotifyAudioBank = 0xa68; // UWeaponHitNotifyAudioBank*
	constexpr auto DefaultSwimmingAudioBank = 0xa70; // UFortSwimmingAudioBank*
	constexpr auto LineTestForDamageZoneBoneDetectionRadius = 0xa78; // float
	constexpr auto DamageZones0x4 = 0xa80; // FPawnDamageZones
	constexpr auto DamageZoneActiveBitMask = 0xae0; // char
	constexpr auto TargettingZOffset = 0xae4; // float
	constexpr auto JumpFlashCountPacked = 0xae8; // char
	constexpr auto LandingFlashCountPacked = 0xae9; // char
	constexpr auto EmoteAudioComps = 0xaf0; // TMap<FName, FEmoteAudioComponentData>
	constexpr auto FrontEndEmoteAudioAttenuation = 0xb40; // USoundAttenuation*
	constexpr auto InGameEmoteAudioAttenuation = 0xb48; // USoundAttenuation*
	constexpr auto InGameEmoteSoundEffectSoundPresetChain = 0xb50; // USoundEffectSourcePresetChain*
	constexpr auto EmoteMeshComps = 0xb58; // TMap<int32_t, UMeshComponent*>
	constexpr auto EmotePropActors = 0xba8; // TMap<int32_t, AActor*>
	constexpr auto EmoteParticleSystemComps = 0xbf8; // TMap<int32_t, UParticleSystemComponent*>
	constexpr auto EmoteCount = 0xc48; // int32_t
	constexpr auto LastEmoteTime = 0xc4c; // float
	constexpr auto LastEmoteEndTime = 0xc50; // float
	constexpr auto LastEmoteItemDef = 0xc58; // UFortItemDefinition*
	constexpr auto LastReplicatedEmoteExecuted = 0xc60; // UFortItemDefinition*
	constexpr auto bFireBlockedByEmoteCooldown = 0xc68; // bool
	constexpr auto EmoteToFireCooldownTime = 0xc6c; // float
	constexpr auto EmoteWalkSpeed = 0xc70; // float
	constexpr auto AdditionalModifierDefinitions = 0xc78; // TArray<UFortGameplayModifierItemDefinition*>
	constexpr auto OnPawnTeleported = 0xc88; // FMulticastInlineDelegate
	constexpr auto OnPawnLanded = 0xc98; // FMulticastInlineDelegate
	constexpr auto OnPawnStartedEmote = 0xca8; // FMulticastInlineDelegate
	constexpr auto OnPawnStoppedEmote = 0xcb8; // FMulticastInlineDelegate
	constexpr auto OnHitPawn = 0xcc8; // FMulticastInlineDelegate
	constexpr auto OnDied = 0xcd8; // FMulticastInlineDelegate
	constexpr auto OnDeathEffects = 0xce8; // FMulticastInlineDelegate
	constexpr auto OnDamaged = 0xd28; // FMulticastInlineDelegate
	constexpr auto OnDidDamage = 0xd38; // FMulticastInlineDelegate
	constexpr auto FootstepBank = 0xd48; // UFortFootstepAudioBank*
	constexpr auto CachedStepSurfaceNormal = 0xd60; // FVector
	constexpr auto FoleyFootstepContext = 0xd78; // UFortFoleyFootstepContext*
	constexpr auto FoleyHitContext = 0xd80; // UFortFoleyHitContext*
	constexpr auto FortFootstepComponent = 0xd88; // UFortFootstepComponent*
	constexpr auto OnWeaponEquippedDelegate = 0xd90; // FMulticastInlineDelegate
	constexpr auto OnWeaponUnEquippedDelegate = 0xda0; // FMulticastInlineDelegate
	constexpr auto OnWeaponAttachmentChangedDelegate = 0xdb0; // FMulticastInlineDelegate
	constexpr auto HealthRegenDelayGameplayEffect = 0xdc0; // UGameplayEffect*
	constexpr auto HealthRegenGameplayEffect = 0xdc8; // UGameplayEffect*
	constexpr auto ShieldRegenDelayGameplayEffect = 0xdd0; // UGameplayEffect*
	constexpr auto ShieldRegenGameplayEffect = 0xdd8; // UGameplayEffect*
	constexpr auto CurrentWeaponAnimLayerOverlayClass = 0xde0; // UAnimInstance*
	constexpr auto OnHolsteredEvent = 0xde8; // FMulticastInlineDelegate
	constexpr auto OnUnholsteredEvent = 0xdf8; // FMulticastInlineDelegate
	constexpr auto WeaponHolsterCounter = 0xe20; // int32_t
	constexpr auto WeaponHolsterIds = 0xe28; // TArray<FName>
	constexpr auto StaySpottedTime = 0xe38; // float
	constexpr auto SpottedEvent = 0xe3c; // FName
	constexpr auto DefaultFeedback = 0xe40; // UFortFeedbackBank*
	constexpr auto ActiveSoundIndicators = 0xe48; // TArray<AFortEmitterCameraLensEffectDirectional*>
	constexpr auto DefaultSoundTrackingVisual = 0xe58; // AFortEmitterCameraLensEffectDirectional*
	constexpr auto SoundTrackingVisibilityTags = 0xe60; // FGameplayTagContainer
	constexpr auto PriorityModifiers = 0xe80; // TMap<EFortSoundIndicatorTypes, float>
	constexpr auto VocalChords = 0xed0; // TArray<FFortPawnVocalChord>
	constexpr auto bIsDisconnectedPawn = 0xf38; // bool
	constexpr auto MaxHealthApplicationHandle = 0xf3c; // FActiveGameplayEffectHandle
	constexpr auto MaxHealthApplicationGameplayEffect = 0xf48; // UGameplayEffect*
	constexpr auto HealthSet = 0xf50; // UFortHealthSet*
	constexpr auto ControlResistanceSet = 0xf58; // UFortControlResistanceSet*
	constexpr auto DamageSet = 0xf60; // UFortDamageSet*
	constexpr auto MovementSet = 0xf68; // UFortMovementSet*
	constexpr auto AdvancedMovementSet = 0xf70; // UFortAdvancedMovementSet*
	constexpr auto OnAbilityDecisionWindowStackUpdated = 0xf80; // FMulticastInlineDelegate
	constexpr auto AbilitySystemComponent = 0xf90; // UFortAbilitySystemComponent*
	constexpr auto DecisionWindowStack = 0xf98; // TArray<FFortActiveMontageDecisionWindow>
	constexpr auto GameplayTags = 0xfa8; // FGameplayTagContainer
	constexpr auto DisplayName = 0xfc8; // FText
	constexpr auto Damagers = 0xfe0; // TArray<FDamagerInfo>
	constexpr auto DamageDone = 0xff0; // TArray<FDamageDoneInfo>
	constexpr auto TotalDamageDoneTrackers = 0x1000; // TArray<FDamageDoneSourceInfo>
	constexpr auto TargetDamageDoneTrackers = 0x1010; // TArray<FDamageDoneTargetInfo>
	constexpr auto TotalDamageTakenTrackers = 0x1020; // TArray<FDamageDoneSourceInfo>
	constexpr auto TargetDamageTakenTrackers = 0x1030; // TArray<FDamageDoneTargetInfo>
	constexpr auto DamageDoneLastAtTime = 0x1040; // float
	constexpr auto DamageTakenLastAtTime = 0x1044; // float
	constexpr auto LastHitTime = 0x1048; // float
	constexpr auto TotalPlayerDamageDealt = 0x104c; // float
	constexpr auto HealthBarIndicator = 0x1050; // UFortHealthBarIndicator*
	constexpr auto CurrentCalloutTag = 0x1058; // FGameplayTag
	constexpr auto CalloutEntries = 0x1060; // TArray<FCalloutEntry>
	constexpr auto HealthBarWidth = 0x1070; // float
	constexpr auto HealthBarHeightMultiplier = 0x1074; // float
	constexpr auto SpottedBrush = 0x1080; // FSlateBrush
	constexpr auto SpottedIconOffset = 0x1150; // FVector
	constexpr auto ClientNonRenderedAnimUpdateRate = 0x1168; // int32_t
	constexpr auto MaxEvalRateForInterpolation = 0x116c; // int32_t
	constexpr auto AnimUpdateRateVisibleMaxDistanceFactor = 0x1170; // TArray<float>
	constexpr auto LODToFrameSkipMap = 0x1180; // TMap<int32_t, int32_t>
	constexpr auto CurrentSentence = 0x11e0; // FFortConversationSentence
	constexpr auto OnPawnHealthChanged = 0x12b8; // FMulticastInlineDelegate
	constexpr auto OnPawnMaxOvershieldChanged = 0x12c8; // FMulticastInlineDelegate
	constexpr auto AccumulatedBatchData_Shared = 0x12d8; // FAthenaBatchedDamageGameplayCues_Shared
	constexpr auto AccumulatedBatchData_NonShared = 0x1350; // FAthenaBatchedDamageGameplayCues_NonShared
	constexpr auto BatchedGameplayCueParameters = 0x1368; // FGameplayCueParameters
	constexpr auto ReplayItemActions = 0x1438; // FGameplayTagContainer
	constexpr auto HidingVisibilityTags = 0x1478; // FGameplayTagContainer
	constexpr auto HidingTransitionVisibilityTags = 0x1498; // FGameplayTagContainer
	constexpr auto PegasusTimelineCollector = 0x14b8; // UPegasusGameEventCollector*
	constexpr auto AILODComponent = 0x14c0; // UFortAthenaAILODComponent*
	constexpr auto ClientAILODSettings = 0x14e8; // FClientAILODSettings
	constexpr auto FallbackTag = 0x1570; // FGameplayTag
	constexpr auto DebugType = 0x1578; // FString
	constexpr auto RecordedGunshots = 0x1588; // TMap<uint32_t, FRecordedGunshot>
	constexpr auto OnPawnComponentAttachedEvent = 0x1618; // FMulticastInlineDelegate

}

namespace FortPlayerPawn {
constexpr auto VehicleInputStateReliable = 0x1678; // FFortAthenaVehicleInputStateReliable
constexpr auto bHasDisableSprintTag = 0x167a; // char : 1
constexpr auto bIsWaterJump = 0x167a; // char : 1
constexpr auto bDisableSwimSprintCancel = 0x167a; // char : 1
constexpr auto bIsNearSafeZoneEdge = 0x167a; // char : 1
constexpr auto bIsSprintJump = 0x167a; // char : 1
constexpr auto bIsSwimmingAnimLayerLinked = 0x167a; // char : 1
constexpr auto bDoSafeZoneCleanup = 0x167a; // char : 1
constexpr auto bPlayingSafeZoneEffects = 0x167a; // char : 1
constexpr auto bIsWaterSprintBoost = 0x167b; // char : 1
constexpr auto bIsWaterSprintBoostPending = 0x167b; // char : 1
constexpr auto bPlayingPassengerToPassengerAnimation = 0x167b; // char : 1
constexpr auto bPlayingDriverToPassengerAnimation = 0x167b; // char : 1
constexpr auto bIsTargeting = 0x167b; // char : 1
constexpr auto bIsTargetingConsumableThrow = 0x167b; // char : 1
constexpr auto bIsSwappingCharacterParts = 0x167c; // char : 1
constexpr auto bBalloonMovementActivated = 0x167c; // char : 1
constexpr auto bIsScriptedBot = 0x167c; // char : 1
constexpr auto bBuildHotfix = 0x167c; // char : 1
constexpr auto FortPlayerPawnLightingChannels = 0x167d; // FLightingChannels
constexpr auto StasisMode = 0x167f; // EFortPawnStasisMode
constexpr auto BuildingState = 0x1681; // EFortBuildingState
constexpr auto AccelerationZPack = 0x1682; // int8_t
constexpr auto ParachuteDirectionalSpeedMultiplierCurve = 0x16a0; // UCurveFloat*
constexpr auto SkydivingDirectionalSpeedMultiplierCurve = 0x16a8; // UCurveFloat*
constexpr auto BallooningDirectionalSpeedMultiplierCurve = 0x16b0; // UCurveFloat*
constexpr auto DirectionalSpeedMultiplierCurve = 0x16b8; // UCurveFloat*
constexpr auto LastCustomizationTimestamp = 0x16c0; // float
constexpr auto MinimumTimeBetweenSteps = 0x16c4; // float
constexpr auto LastStepTime = 0x16c8; // float
constexpr auto OnFootstepEvent = 0x16d0; // FMulticastInlineDelegate
constexpr auto OnPawnEnterWater = 0x16e0; // FMulticastInlineDelegate
constexpr auto OnPawnExitWater = 0x16f0; // FMulticastInlineDelegate
constexpr auto OnPawnExitSwinging = 0x1718; // FMulticastInlineDelegate
constexpr auto bIsInWaterVolume = 0x1728; // bool
constexpr auto bNotifyBlueprintWhenLandscapeTeleporting = 0x1729; // bool
constexpr auto CachedTeamControllingRC = 0x172a; // char
constexpr auto BalloonActiveCount = 0x172b; // char
constexpr auto bParachuteDeployFixedVerticalDistance = 0x172c; // char : 1
constexpr auto bIsSkydiving = 0x172d; // bool
constexpr auto bIsParachuteOpen = 0x172e; // bool
constexpr auto bIsSkydivingFromLaunchPad = 0x172f; // char : 1
constexpr auto bIsInSlipperyMovement = 0x172f; // char : 1
constexpr auto bPendingSkydiveLaunch = 0x172f; // char : 1
constexpr auto bIsSkydivingFromBus = 0x172f; // char : 1
constexpr auto bLocalIsParachuteForcedOpen = 0x172f; // char : 1
constexpr auto bLocalIsSkydiving = 0x172f; // char : 1
constexpr auto bIsParachuteForcedOpen = 0x172f; // char : 1
constexpr auto bIsPedestalHero = 0x1730; // char : 1
constexpr auto bInGliderRedeploy = 0x1730; // char : 1
constexpr auto bLocalInGliderRedeploy = 0x1730; // char : 1
constexpr auto bIsProxySimulationTimedOut = 0x1730; // char : 1
constexpr auto bIsSlopeSliding = 0x1730; // char : 1
constexpr auto bIsBelowAutoDeployTestHeight = 0x1730; // char : 1
constexpr auto bReplicatedIsInSlipperyMovement = 0x1730; // char : 1
constexpr auto bBeingRepossessed = 0x1731; // char : 1
constexpr auto bInitAbilitySystemComponentFromPlayerState = 0x1731; // char : 1
constexpr auto bStartedInteractSearch = 0x1731; // char : 1
constexpr auto bPawnLODDirty = 0x1731; // char : 1
constexpr auto bIsUsingJetpack = 0x1731; // char : 1
constexpr auto bIsPlayingEmote = 0x1731; // char : 1
constexpr auto bShowingOverdriveEffect = 0x1731; // char : 1
constexpr auto bIsRespawning = 0x1731; // char : 1
constexpr auto bCanShowDefaultSkin = 0x1732; // char : 1
constexpr auto bDisabledTetheringSupport = 0x1732; // char : 1
constexpr auto bIsInFrontEndHologram = 0x1732; // char : 1
constexpr auto bHasWaterParticleSystem = 0x1732; // char : 1
constexpr auto bInitializedPostRepPlayerState = 0x1732; // char : 1
constexpr auto bIsRespawningInAir = 0x1732; // char : 1
constexpr auto HeldObject = 0x1784; // TWeakObjectPtr<AActor>
constexpr auto bForceMoveRelativeToCameraRotation = 0x17a0; // char : 1
constexpr auto bIsWaitingForEmoteInteraction = 0x17a0; // char : 1
constexpr auto bIsEmoteLeader = 0x17a0; // char : 1
constexpr auto bShouldSyncAnimationWithEmoteLeader = 0x17a0; // char : 1
constexpr auto bShouldJitterAnimationSyncWithEmoteLeader = 0x17a0; // char : 1
constexpr auto bDoubleFileEmoteSecondLine = 0x17a0; // char : 1
constexpr auto bEmoteUsesSecondaryFire = 0x17a0; // char : 1
constexpr auto bLockGroupEmoteLeaderRotation = 0x17a0; // char : 1
constexpr auto GroupEmoteLookTarget = 0x17a8; // AFortPlayerPawn*
constexpr auto GroupEmoteTailTarget = 0x17b0; // AFortPlayerPawn*
constexpr auto GroupEmoteFollowers = 0x17b8; // TArray<AFortPlayerPawn*>
constexpr auto GroupEmoteAnimOffset = 0x1824; // float
constexpr auto GroupEmoteLeaderRotationYawOffset = 0x1828; // float
constexpr auto GroupEmoteLookTargetRotationLeader = 0x1830; // FRotator
constexpr auto GroupEmoteMaximumZDifference = 0x1860; // float
constexpr auto OnGroupEmoteSyncValueChanged = 0x1868; // FMulticastInlineDelegate
constexpr auto OnGroupEmoteFollowerJoined = 0x1878; // FMulticastInlineDelegate
constexpr auto OnGroupEmoteFollowerLeft = 0x1888; // FMulticastInlineDelegate
constexpr auto OnGroupEmoteSecondaryFirePressed = 0x1898; // FMulticastInlineDelegate
constexpr auto GroupEmoteSyncValue = 0x18a8; // char
constexpr auto GroupEmoteSoundValue = 0x18a9; // char
constexpr auto GroupEmoteParticleValue = 0x18aa; // char
constexpr auto TransformationMontage = 0x18b0; // UAnimMontage*
constexpr auto TransformationMontageStartTime = 0x18b8; // float
constexpr auto CurrentMontagerLeader = 0x1918; // UAnimMontage*
constexpr auto CurrentSyncedMontage = 0x1920; // UAnimMontage*
constexpr auto bCharacterPartsCastIndirectShadows = 0x1928; // char : 1
constexpr auto CharacterGender = 0x192a; // EFortCustomGender
constexpr auto CharacterBodyType = 0x192b; // EFortCustomBodyType
constexpr auto JumpLastActivatedTime = 0x193c; // float
constexpr auto PreviousPosition = 0x1940; // FVector
constexpr auto PreviousVelocity = 0x1958; // FVector
constexpr auto ReplicatedCustomMeshHeightAdjustTarget = 0x19b8; // uint16_t
constexpr auto UnburrowLaunchXYSpeed = 0x19bc; // float
constexpr auto UnburrowLaunchZSpeed = 0x19c0; // float
constexpr auto VehicleInputStateUnreliable = 0x1a08; // FFortAthenaVehicleInputStateUnreliable
constexpr auto bIsInAnyStorm = 0x1a88; // char : 1
constexpr auto bIsInsideSafeZone = 0x1a88; // char : 1
constexpr auto SafeZoneAppliedGE = 0x1a98; // UGameplayEffect*
constexpr auto DisableSlideGameplayEffectClass = 0x1ac8; // UGameplayEffect*
constexpr auto SelfReviveGameplayEffect = 0x1ad0; // UGameplayEffect*
constexpr auto TeammateReviveGameplayEffect = 0x1ad8; // UGameplayEffect*
constexpr auto SetByCallerReviveHealth = 0x1ae0; // FScalableFloat
constexpr auto DBNOInteractionCollisionProfile = 0x1b08; // FName
constexpr auto DBNOInteractionBoxExtent = 0x1b10; // FVector
constexpr auto DBNODeferTime = 0x1b28; // float
constexpr auto DBNOInteractCollisionComponent = 0x1b30; // UBoxComponent*
constexpr auto EventReviveTag = 0x1b38; // FGameplayTag
constexpr auto AggroRangeOverride = 0x1b3c; // float
constexpr auto SetByCallerReviveSignalInStorm = 0x1b40; // float
constexpr auto ArmoredInterface = 0x1b48; // TScriptInterface<IFortArmoredInterface>
constexpr auto LastBuildingMetadata = 0x1b58; // UBuildingEditModeMetadata*
constexpr auto SprintCancelTime = 0x1b68; // float
constexpr auto WaterSprintBoostAllowedTimer = 0x1b70; // float
constexpr auto bHasStartedFloating = 0x1bfc; // bool
constexpr auto ZiplineState = 0x1c00; // FZiplinePawnState
constexpr auto ZiplineJumpDampening = 0x1c40; // FCurveTableRowHandle
constexpr auto ZiplineJumpStrength = 0x1c50; // FCurveTableRowHandle
constexpr auto ZiplineJumpActivateDelay = 0x1c60; // FScalableFloat
constexpr auto ZiplineRentryProtectionDelay = 0x1c88; // FScalableFloat
constexpr auto ZiplineSocketZOffset = 0x1cb0; // float
constexpr auto ZiplineAnimBlueprintClass = 0x1cb8; // UAnimInstance*
constexpr auto TimeBeforeZiplineStateDeactivated = 0x1cc0; // float
constexpr auto ZiplineStateChanged = 0x1cd0; // FMulticastInlineDelegate
constexpr auto ZiplineSpeedFactorTarget = 0x1ce0; // float
constexpr auto ZiplineSpeedFactor = 0x1ce4; // float
constexpr auto EnableSwimSprintDiveCooldown = 0x1cf0; // FScalableFloat
constexpr auto SwimSprintDiveCooldown = 0x1d18; // FScalableFloat
constexpr auto SwimDiveBoostTimeThreshold = 0x1d40; // FScalableFloat
constexpr auto ClientSwimDiveInputTime = 0x1d68; // float
constexpr auto bCanPredictJumpApex = 0x1d6c; // bool
constexpr auto AbilityAITargets = 0x1d78; // TArray<AFortAIPawn*>
constexpr auto UnableToPerformActionMontage = 0x1da0; // UAnimMontage*
constexpr auto UnableToPerformActionSound = 0x1da8; // USoundBase*
constexpr auto MoveSoundStimulusBroadcastInterval = 0x1db0; // float
constexpr auto EmoteStartTime = 0x1e94; // float
constexpr auto EmoteRandomNum = 0x1e98; // float
constexpr auto bPlayingPassengerToDriverAnimation = 0x1eb0; // bool
constexpr auto VehicleSpeedAtTimeOfJump = 0x1ec8; // float
constexpr auto VehicleStateRep = 0x1ed0; // FVehiclePawnState
constexpr auto InteractingPCRep = 0x1f00; // AFortPlayerControllerGameplay*
constexpr auto VehicleStateLocal = 0x1f08; // FVehiclePawnState
constexpr auto VehicleLastTick = 0x1f38; // AActor*
constexpr auto OnVehicleStateChangedEvent = 0x1f58; // FMulticastInlineDelegate
constexpr auto TetherComponent = 0x1f68; // UFortPawnComponent_Tether*
constexpr auto PendingTetherLaunch = 0x1f70; // float
constexpr auto TetherJumpLastTime = 0x1fc0; // float
constexpr auto bSupportsTetheredMovement = 0x1fc4; // bool
constexpr auto BalloonRope = 0x1fc8; // ABuildingGameplayActor*
constexpr auto OnPossessedProp = 0x1fd0; // FMulticastInlineDelegate
constexpr auto PossessedProp = 0x1fe0; // ABuildingGameplayActorPlayerPropAttachment*
constexpr auto SlopeCameraOffsetFrameCounter = 0x2018; // int64_t
constexpr auto SlopeCameraOffsetInterpolator = 0x2020; // FVectorRK4SpringInterpolator
constexpr auto LargeBodyTypeTargetingOffset = 0x2080; // FVector
constexpr auto VehicleInputComponent = 0x2180; // UInputComponent*
constexpr auto BluePrintPlaceAnimation = 0x2190; // UAnimMontage*
constexpr auto BluePrintEditAnimation = 0x2198; // UAnimMontage*
constexpr auto OnStartedInteractSearch = 0x21a8; // FMulticastInlineDelegate
constexpr auto OnEndedInteractSearch = 0x21b8; // FMulticastInlineDelegate
constexpr auto OnAttemptedInstantInteractSearch = 0x21c8; // FMulticastInlineDelegate
constexpr auto EmoteInteractionCollisionProfile = 0x21d8; // FName
constexpr auto EmoteInteractionBoxExtent = 0x21e0; // FVector
constexpr auto EmoteInteractCollisionComponent = 0x21f8; // UBoxComponent*
constexpr auto OnPartChanged = 0x2200; // FMulticastInlineDelegate
constexpr auto BlueprintPaperMID = 0x2240; // UMaterialInstanceDynamic*
constexpr auto BlueprintPaperPulseTimeline = 0x2248; // FTimeline
constexpr auto AccessoryColorSwatchHandler0x7 = 0x22d8; // UCustomColorComponent*
constexpr auto Hero = 0x2310; // UFortHero*
constexpr auto OvrHeroType = 0x2318; // TWeakObjectPtr<UFortHeroType>
constexpr auto DisplayContext = 0x2320; // EFortPawnDisplayContext
constexpr auto HACK_CustomPRIComponent = 0x2340; // UCustomPlayerComponent*
constexpr auto CharacterParts0x7 = 0x2348; // UCustomCharacterPart*
constexpr auto CharacterColorSwatches0x2 = 0x2380; // UCustomColorSwatch*
constexpr auto CharacterPartColorSwatches0x7 = 0x2390; // UCustomColorSwatch*
constexpr auto CharacterCharms0x4 = 0x23c8; // UAthenaCharmItemDefinition*
constexpr auto RequiredVariantParts = 0x23e8; // TArray<UCustomCharacterPart*>
constexpr auto CharacterPartSkeletalMeshComponents0x7 = 0x2400; // USkeletalMeshComponentBudgeted*
constexpr auto CharacterCharmActors = 0x2438; // TArray<AFortPlayerCharm*>
constexpr auto CharacterPartSMHiddenRefCount0x7 = 0x2448; // int8_t
constexpr auto BaseCosmeticLoadout = 0x2450; // FFortAthenaLoadout
constexpr auto AppliedCosmeticLoadout = 0x25b0; // FFortAthenaLoadout
constexpr auto AppliedSwaps = 0x2710; // TArray<FFortAppliedSwapItemAndVariantData>
constexpr auto CosmeticLoadout = 0x2770; // FFortAthenaLoadout
constexpr auto ServerLoadoutChangeSync = 0x28d0; // uint32_t
constexpr auto bAllowClientLoadoutChangeSync = 0x28d8; // bool
constexpr auto OnMaterialOverrideApplied = 0x2900; // FMulticastInlineDelegate
constexpr auto OnMaterialOverrideCleared = 0x2910; // FMulticastInlineDelegate
constexpr auto MaterialOverrides = 0x2920; // TArray<FFortPawnMaterialOverride>
constexpr auto LocalMaterialOverrides = 0x2930; // TArray<FFortPawnMaterialOverride>
constexpr auto MaterialOverrideStateMap = 0x2940; // TMap<USceneComponent*, FFortPawnMaterialOverrideState>
constexpr auto PreviousCharacterParts0x7 = 0x2990; // UCustomCharacterPart*
constexpr auto CharacterPartModifiers0x7 = 0x29c8; // ACustomCharacterPartModifier*
constexpr auto RepCharPartAnimMontageInfo = 0x2a00; // FFortCharacterPartsRepMontageInfo
constexpr auto ClientObservedStats = 0x2a20; // FFortClientObservedStatArray
constexpr auto AnimBPOverride = 0x2b70; // UAnimInstance*
constexpr auto OriginalAnimBP = 0x2b78; // UAnimInstance*
constexpr auto OnCrouchStartSound = 0x2b80; // USoundBase*
constexpr auto OnCrouchEndSound = 0x2b88; // USoundBase*
constexpr auto FootstepBankOverride = 0x2b90; // UFortFootstepAudioBank*
constexpr auto OriginalFootstepBank = 0x2b98; // UFortFootstepAudioBank*
constexpr auto CachedFootStepIndex = 0x2ba0; // int32_t
constexpr auto AnimSetOverride = 0x2ba8; // UFortWeaponAnimSet*
constexpr auto AnimLayersOverride = 0x2bb0; // TArray<UAnimInstance*>
constexpr auto PreviousAnimLayersOverride = 0x2bc0; // TArray<UAnimInstance*>
constexpr auto QueuedAutoPickups = 0x2bd0; // TArray<AFortPickup*>
constexpr auto IgnoreActors = 0x2be0; // TArray<FIgnoreCollisionActor>
constexpr auto AutoPickupDropRepickupDelay = 0x2bf8; // FScalableFloat
constexpr auto CarriedObjectAttachmentSocket = 0x2c30; // FName
constexpr auto PickupSpeedMultiplier = 0x2c34; // float
constexpr auto MiniMapIconBrush = 0x2c40; // FSlateBrush
constexpr auto AboveBelowMiniMapIconBrush = 0x2d10; // FSlateBrush
constexpr auto FarOffMiniMapIconBrush = 0x2de0; // FSlateBrush
constexpr auto DBNOMiniMapIconBrush = 0x2eb0; // FSlateBrush
constexpr auto MinimapIconColorSelf = 0x2f80; // FLinearColor
constexpr auto MinimapIconColorTeammate = 0x2f90; // FLinearColor
constexpr auto MinimapIconColorEnemy = 0x2fa0; // FLinearColor
constexpr auto MaxIndicatorVisibilityDistForEnemies = 0x2fb0; // float
constexpr auto MaxIndicatorVisibilityDistForAllies = 0x2fb4; // float
constexpr auto DBNOHoisterData = 0x3038; // FFortDBNOCarryHoisterData
constexpr auto DBNOHoistee = 0x3048; // AFortPlayerPawn*
constexpr auto DBNOHoisterAnimSet = 0x3050; // UFortWeaponAnimSet*
constexpr auto DBNOHoisteeAnimClass = 0x3058; // UAnimInstance*
constexpr auto ThrowCarriedPlayerStrengthXY = 0x3060; // float
constexpr auto ThrowCarriedPlayerStrengthZ = 0x3064; // float
constexpr auto DropCarriedPlayerForwardOffset = 0x3068; // float
constexpr auto DropCarriedPlayerHeightOffset = 0x306c; // float
constexpr auto DropCarriedPlayerTraceHeight = 0x3070; // float
constexpr auto bAllowDBNOCarry = 0x3074; // bool
constexpr auto bAllowDBNOCarryEnemies = 0x3075; // bool
constexpr auto bIsBeingDBNOCarried = 0x3076; // bool
constexpr auto bIsDBNOCarrying = 0x3077; // bool
constexpr auto bRequestedThrowCarriedPlayer = 0x3078; // bool
constexpr auto PackedReplicatedSlopeAngles = 0x3088; // uint16_t
constexpr auto OnDBNOHoisterChangedDelegate = 0x3090; // FMulticastInlineDelegate
constexpr auto OnRevivedFromDBNODelegate = 0x30a0; // FMulticastInlineDelegate
constexpr auto OnNewPlayerState = 0x30b0; // FMulticastInlineDelegate
constexpr auto OnAbilitySystemComponentInitialized = 0x30c0; // FMulticastInlineDelegate
constexpr auto OnPreInvalidateAbilitySystemComponent = 0x30d0; // FMulticastInlineDelegate
constexpr auto OnFinishedCharacterCustomization = 0x3100; // FMulticastInlineDelegate
constexpr auto OnCrouchInputJustPressed = 0x3110; // FMulticastInlineDelegate
constexpr auto CustomizationAssetLoader = 0x3120; // UFortCustomizationAssetLoader*
constexpr auto SpawnParticles = 0x3168; // UParticleSystem*
constexpr auto SpawnSound = 0x3170; // USoundBase*
constexpr auto bIsLocalPlayer = 0x317c; // char : 1
constexpr auto bDamagedEnemy = 0x3184; // char : 1
constexpr auto OnDamageComboIncrement = 0x31a0; // FMulticastInlineDelegate
constexpr auto OnDamageComboReset = 0x31b0; // FMulticastInlineDelegate
constexpr auto PlayerStatus = 0x31c8; // uint32_t
constexpr auto AccelerationPack = 0x31cc; // uint16_t
constexpr auto RepAnimMontageInfo = 0x31d0; // FGameplayAbilityRepAnimMontage
constexpr auto RepAnimMontageStartSection = 0x3208; // int32_t
constexpr auto bNetMovementPrioritized = 0x320c; // char : 1
constexpr auto LandingMontagePair = 0x3210; // FReplicatedMontagePair
constexpr auto PriorVariantData = 0x3230; // FPreviouslyAppliedVariantData
constexpr auto TempWeaponsStack = 0x32b8; // TArray<UFortWorldItemDefinition*>
constexpr auto RootMotionInterruptNotifyStack = 0x32c8; // TArray<UFortAnimNotifyState_RootMotionInterrupt*>
constexpr auto RootMotionInterruptMontageStack = 0x32d8; // TArray<UAnimMontage*>
constexpr auto VisibilityComponent = 0x3320; // UFortVisibilityComponent*
constexpr auto BlendablesPostProcessComp = 0x3328; // UPostProcessComponent*
constexpr auto bUseControllerRotationYawToRestore = 0x3334; // char : 1
constexpr auto OnBeginSkydivingEvent = 0x3338; // FMulticastInlineDelegate
constexpr auto OnEndSkydivingEvent = 0x3348; // FMulticastInlineDelegate
constexpr auto OnBeginParachuteMovementEvent = 0x3358; // FMulticastInlineDelegate
constexpr auto OnParachuteSpawned = 0x3368; // FMulticastInlineDelegate
constexpr auto OnEndParachuteMovementEvent = 0x3378; // FMulticastInlineDelegate
constexpr auto OnBallooningGravityCeilingChanged = 0x3388; // FMulticastInlineDelegate
constexpr auto OnEnteredAircraft = 0x3398; // FMulticastInlineDelegate
constexpr auto OnPawnPossessed = 0x33a8; // FMulticastInlineDelegate
constexpr auto OnPawnUnpossessed = 0x33b8; // FMulticastInlineDelegate
constexpr auto OnEmoteInteracted = 0x33c8; // FMulticastInlineDelegate
constexpr auto OnSafeZoneOccupancyChangedEvent = 0x33d8; // FMulticastInlineDelegate
constexpr auto OnHeldObjectPickedUp = 0x33e8; // FMulticastInlineDelegate
constexpr auto OnHeldObjectDropped = 0x33f8; // FMulticastInlineDelegate
constexpr auto CustomMovementIndicators = 0x3408; // TMap<EFortCustomMovement, UTexture*>
constexpr auto CurrentGliderOpenSound = 0x3468; // USoundBase*
constexpr auto CurrentGliderOpenAudioComponent = 0x3470; // TWeakObjectPtr<UAudioComponent>
constexpr auto CurrentGliderCloseSound = 0x3478; // USoundBase*
constexpr auto CurrentGliderCloseAudioComponent = 0x3480; // TWeakObjectPtr<UAudioComponent>
constexpr auto bParachuteLockedOpen = 0x3494; // bool
constexpr auto bLocalParachuteLockedOpen = 0x3495; // bool
constexpr auto AttachmentMesh = 0x3498; // FRepFortMeshAttachment
constexpr auto AttachmentMeshComponent = 0x34a8; // USkeletalMeshComponentBudgeted*
constexpr auto BotScriptedBehavior = 0x34b0; // UFortPawnScriptedBehavior*
constexpr auto IgnoredWaterBodies = 0x34d0; // TArray<AFortWaterBodyActor*>
constexpr auto UnderwaterDamageComponent = 0x34e0; // UFortUnderwaterDamageComponent*
constexpr auto SlipperySlopeParams = 0x34e8; // FSlipperySlopeParams
constexpr auto GliderClass = 0x36a0; // UAthenaGliderItemDefinition*
constexpr auto PetState = 0x36b8; // AFortPlayerPetRepState*
constexpr auto CosmeticPetInstance = 0x36c0; // AFortPlayerPet*
constexpr auto GliderSpawnComponent = 0x36d8; // UFortGliderSpawnComponent*
constexpr auto ParachuteAttachment = 0x36e0; // AFortPlayerParachute*
constexpr auto GliderOverrideStack = 0x36f0; // TArray<UAthenaGliderItemDefinition*>
constexpr auto bResetGliderOverrideOnLanding = 0x3710; // bool
constexpr auto ParachuteDeployTraceForGroundDistance = 0x3718; // FScalableFloat
constexpr auto LaunchPadParachuteDeployTraceForGroundDistance = 0x3740; // FScalableFloat
constexpr auto LaunchPadParachuteDeployTraceForDownwardSpeed = 0x3768; // FScalableFloat
constexpr auto ParachuteDeployVelocityBlend = 0x3790; // FScalableFloat
constexpr auto ParachuteCooldownToOpen = 0x37b8; // float
constexpr auto ParachuteCooldownToClose = 0x37bc; // float
constexpr auto GliderRedeployAllowedRow = 0x37c0; // FScalableFloat
constexpr auto GliderRedeployLateralVelocityMultiplierRow = 0x37e8; // FScalableFloat
constexpr auto GliderRedeployHeighLimitRow = 0x3810; // FScalableFloat
constexpr auto BalloonFallDamageThresholdVelocityZ = 0x3838; // FScalableFloat
constexpr auto DefaultLinkedAnimGraphAnimBlueprintClass = 0x3860; // UAnimInstance*
constexpr auto PreDrivingAnimBP = 0x3868; // UAnimInstance*
constexpr auto CurrentVehicleAnimLayerOverlayClass = 0x3870; // UAnimInstance*
constexpr auto CurrentSwimmingAnimLayerOverlayClass = 0x3878; // UAnimInstance*
constexpr auto DefaultSwimmingAnimLayerOverlayClass = 0x3880; // UAnimInstance*
constexpr auto TimeBeforeSwimmingLayerDeactivated = 0x3890; // float
constexpr auto ParachuteAudioLoop = 0x3898; // UAudioComponent*
constexpr auto ParachuteAndSkydiveAudioFadeInTime = 0x38a0; // float
constexpr auto ParachuteAndSkydiveAudioFadeOutTime = 0x38a4; // float
constexpr auto SkydiveAudioLoop = 0x38a8; // UAudioComponent*
constexpr auto SoundOnParachuteForcedOpen = 0x38b0; // USoundBase*
constexpr auto SkydivingLoop1P = 0x38b8; // USoundBase*
constexpr auto SkydivingLoop3P = 0x38c0; // USoundBase*
constexpr auto ParachuteOpenLoop1P = 0x38c8; // USoundBase*
constexpr auto ParachuteOpenLoop3P = 0x38d0; // USoundBase*
constexpr auto SwimmingAudioLoop = 0x38d8; // UAudioComponent*
constexpr auto SwimmingAudioFadeOutTime = 0x38e0; // float
constexpr auto SwimmingAudioInterpSpeed = 0x38e4; // float
constexpr auto SoundOnSwimmingLoop = 0x38e8; // USoundBase*
constexpr auto RemoteViewData32 = 0x3940; // uint32_t
constexpr auto LastQuickBarSwitchRequestTime = 0x3958; // float
constexpr auto CrouchStartTime = 0x395c; // float
constexpr auto CrouchEndTime = 0x3960; // float
constexpr auto CrouchLerpTime = 0x3964; // float
constexpr auto MeleeAbilityCooldown = 0x3968; // float
constexpr auto bDisallowInterrogation = 0x396c; // bool
constexpr auto bDisallowInterrogationOnNPC = 0x396d; // bool
constexpr auto bDisallowInterrogationCreative = 0x396e; // bool
constexpr auto bHideBodyOnDeathRequested = 0x396f; // char : 1
constexpr auto ControlledRCPawn = 0x3970; // TWeakObjectPtr<AFortRemoteControlledPawnAthena>
constexpr auto StoredControlRotation = 0x3978; // FRotator
constexpr auto FacialTypeOverride = 0x3994; // EFortFacialAnimTypes
constexpr auto GhostModeExitStartTime = 0x3998; // float
constexpr auto GhostModeExitDuration = 0x399c; // float
constexpr auto CachedReferencesByName = 0x3ad8; // TMap<FName, FFortPlayerPawnObjectReference>
constexpr auto PSC_PlayerInWater = 0x3b28; // UParticleSystemComponent*
constexpr auto PSC_PlayerInWaterSurfaceSwimming = 0x3b30; // UParticleSystemComponent*
constexpr auto NiagaraPlayerInWaterBasicAsset = 0x3b38; // UNiagaraSystem*
constexpr auto NiagaraPlayerInWaterSwimmingAsset = 0x3b40; // UNiagaraSystem*
constexpr auto NiagaraPlayerWaterHandSplashAsset = 0x3b48; // UNiagaraSystem*
constexpr auto NiagaraPlayerWaterFootSplashAsset = 0x3b50; // UNiagaraSystem*
constexpr auto NiagaraPlayerWaterLargePlayerSplashAsset = 0x3b58; // UNiagaraSystem*
constexpr auto NiagaraPlayerWaterBoostAsset = 0x3b60; // UNiagaraSystem*
constexpr auto FootSplashLeftSocketName = 0x3b68; // FName
constexpr auto FootSplashRightSocketName = 0x3b6c; // FName
constexpr auto NiagaraPlayerStandingInWater = 0x3b70; // UFXSystemComponent*
constexpr auto NiagaraPlayerSwimmingInWater = 0x3b78; // UFXSystemComponent*
constexpr auto NiagaraPlayerHandSplashInWater = 0x3b80; // UFXSystemComponent*
constexpr auto NiagaraPlayerFootSplashInWaterLeft = 0x3b88; // UFXSystemComponent*
constexpr auto NiagaraPlayerFootSplashInWaterRight = 0x3b90; // UFXSystemComponent*
constexpr auto NiagaraPlayerJumpSplashInWater = 0x3b98; // UFXSystemComponent*
constexpr auto NiagaraPlayerWaterBoost = 0x3ba0; // UFXSystemComponent*
constexpr auto bWaterFootSplashActive = 0x3ba8; // char : 1
constexpr auto bEnableWaterInteractionEffects = 0x3ba8; // char : 1
constexpr auto OnActivateAbility = 0x3bb0; // FMulticastInlineDelegate
constexpr auto OnFiringRangedWeapon = 0x3bc0; // FMulticastInlineDelegate
constexpr auto ConsecutiveWeakSpotResourceBonus = 0x3bd0; // FScalableFloat
constexpr auto LastHitWeakSpotResourceBonus = 0x3bf8; // FScalableFloat
constexpr auto CustomInteractionWidget = 0x3c28; // UWidget*
constexpr auto ConvertComponent = 0x3c48; // UFortPawnComponent_Convert*
constexpr auto AffiliationComponent = 0x3c50; // UFortActorComponent_Affiliation*
constexpr auto bUseViewRotationForCameraOrigin = 0x3c59; // char : 1
}

namespace FortItemDefinition {

	constexpr auto OnItemCountChanged = 0x50; // FMulticastInlineDelegate
	constexpr auto Rarity = 0x70; // EFortRarity
	constexpr auto ItemType = 0x71; // EFortItemType
	constexpr auto PrimaryAssetIdItemTypeOverride = 0x72; // EFortItemType
	constexpr auto FilterOverride = 0x73; // EFortInventoryFilter
	constexpr auto Tier = 0x74; // EFortItemTier
	constexpr auto MaxTier = 0x75; // EFortItemTier
	constexpr auto Access = 0x76; // EFortTemplateAccess
	constexpr auto bInventorySizeLimited = 0x77; // char : 1
	constexpr auto bForceAutoPickup = 0x77; // char : 1
	constexpr auto bAllowMultipleStacks = 0x77; // char : 1
	constexpr auto bAutoBalanceStacks = 0x77; // char : 1
	constexpr auto bNeverPersisted = 0x77; // char : 1
	constexpr auto bIsAccountItem = 0x77; // char : 1
	constexpr auto ItemTypeNameOverride = 0x78; // FText
	constexpr auto DisplayName = 0x90; // FText
	constexpr auto ShortDescription = 0xa8; // FText
	constexpr auto Description = 0xc0; // FText
	constexpr auto DisplayNamePrefix = 0xd8; // FText
	constexpr auto SearchTags = 0xf0; // FText
	constexpr auto GiftBoxGroupName = 0x108; // FName
	constexpr auto GameplayTags = 0x110; // FGameplayTagContainer
	constexpr auto AutomationTags = 0x130; // FGameplayTagContainer
	constexpr auto SecondaryCategoryOverrideTags = 0x150; // FGameplayTagContainer
	constexpr auto TertiaryCategoryOverrideTags = 0x170; // FGameplayTagContainer
	constexpr auto MaxStackSize = 0x190; // FScalableFloat
	constexpr auto PurchaseItemLimit = 0x1b8; // FScalableFloat
	constexpr auto FrontendPreviewScale = 0x1e0; // float
	constexpr auto TooltipClass = 0x1e8; // TSoftClassPtr<UObject>
	constexpr auto StatList = 0x210; // TSoftObjectPtr<UFortTooltipDisplayStatsList>
	constexpr auto RatingLookup = 0x238; // FCurveTableRowHandle
	constexpr auto WidePreviewImage = 0x248; // TSoftObjectPtr<UTexture2D>
	constexpr auto SmallPreviewImage = 0x270; // TSoftObjectPtr<UTexture2D>
	constexpr auto LargePreviewImage = 0x298; // TSoftObjectPtr<UTexture2D>
	constexpr auto DisplayAssetPath = 0x2c0; // FSoftObjectPath
	constexpr auto PopupDetailsTag = 0x2d8; // FDataTableRowHandle
	constexpr auto Series = 0x2e8; // UFortItemSeriesDefinition*
	constexpr auto FrontendPreviewPivotOffset = 0x2f0; // FVector
	constexpr auto FrontendPreviewInitialRotation = 0x308; // FRotator
	constexpr auto FrontendPreviewMeshOverride = 0x320; // TSoftObjectPtr<UStaticMesh>
	constexpr auto FrontendPreviewSkeletalMeshOverride = 0x348; // TSoftObjectPtr<USkeletalMesh>

}

namespace World {

	constexpr auto PersistentLevel = 0x30; // ULevel*
	constexpr auto NetDriver = 0x38; // UNetDriver*
	constexpr auto LineBatcher = 0x40; // ULineBatchComponent*
	constexpr auto PersistentLineBatcher = 0x48; // ULineBatchComponent*
	constexpr auto ForegroundLineBatcher = 0x50; // ULineBatchComponent*
	constexpr auto NetworkManager = 0x58; // AGameNetworkManager*
	constexpr auto PhysicsCollisionHandler = 0x60; // UPhysicsCollisionHandler*
	constexpr auto ExtraReferencedObjects = 0x68; // TArray<UObject*>
	constexpr auto PerModuleDataObjects = 0x78; // TArray<UObject*>
	constexpr auto StreamingLevels = 0x88; // TArray<ULevelStreaming*>
	constexpr auto StreamingLevelsToConsider = 0x98; // FStreamingLevelsToConsider
	constexpr auto StreamingLevelsPrefix = 0xc0; // FString
	constexpr auto CurrentLevelPendingVisibility = 0xd0; // ULevel*
	constexpr auto CurrentLevelPendingInvisibility = 0xd8; // ULevel*
	constexpr auto DemoNetDriver = 0xe0; // UDemoNetDriver*
	constexpr auto MyParticleEventManager = 0xe8; // AParticleEventManager*
	constexpr auto DefaultPhysicsVolume = 0xf0; // APhysicsVolume*
	constexpr auto bAreConstraintsDirty = 0x116; // char : 1
	constexpr auto NavigationSystem = 0x120; // UNavigationSystemBase*
	constexpr auto AuthorityGameMode = 0x128; // AGameModeBase*
	constexpr auto GameState = 0x130; // AGameStateBase*
	constexpr auto AISystem = 0x138; // UAISystemBase*
	constexpr auto AvoidanceManager = 0x140; // UAvoidanceManager*
	constexpr auto Levels = 0x148; // TArray<ULevel*>
	constexpr auto LevelCollections = 0x158; // TArray<FLevelCollection>
	constexpr auto OwningGameInstance = 0x190; // UGameInstance*
	constexpr auto ParameterCollectionInstances = 0x198; // TArray<UMaterialParameterCollectionInstance*>
	constexpr auto CanvasForRenderingToTarget = 0x1a8; // UCanvas*
	constexpr auto CanvasForDrawMaterialToRenderTarget = 0x1b0; // UCanvas*
	constexpr auto PhysicsField = 0x228; // UPhysicsFieldComponent*
	constexpr auto LWILastAssignedUID = 0x230; // uint32_t
	constexpr auto ComponentsThatNeedPreEndOfFrameSync = 0x238; // TSet<UActorComponent*>
	constexpr auto ComponentsThatNeedEndOfFrameUpdate = 0x288; // TArray<UActorComponent*>
	constexpr auto ComponentsThatNeedEndOfFrameUpdate_OnGameThread = 0x298; // TArray<UActorComponent*>
	constexpr auto WorldComposition = 0x628; // UWorldComposition*
	constexpr auto PSCPool = 0x6d8; // FWorldPSCPool

}


namespace BuildingWeakSpot {


	constexpr auto ParentObject = 0x2c0; // TWeakObjectPtr<UObject>
	constexpr auto bHit = 0x2c8; // char : 1
	constexpr auto bFadeOut = 0x2c8; // char : 1
	constexpr auto bActive = 0x2c8; // char : 1
	constexpr auto HitCount = 0x2cc; // int32_t
	constexpr auto Level = 0x2d0; // int32_t
	constexpr auto MaxLevel = 0x2d4; // int32_t
	constexpr auto StartingLocation = 0x2d8; // FVector
	constexpr auto HitNormal = 0x2f0; // FVector
	constexpr auto PhysicalSurfaceType = 0x308; // EPhysicalSurface

}


namespace FortPlayerControllerAthena {

	constexpr auto FireAbilityToWeaponSwitchTime = 0x3718; // float
	constexpr auto OnAircraftStateChange = 0x3728; // FMulticastInlineDelegate
	constexpr auto OnItemDropSpawnedDelegate = 0x3738; // FMulticastInlineDelegate
	constexpr auto OnItemDroppedDueToOverflow = 0x3748; // FMulticastInlineDelegate
	constexpr auto OnCreativePermissionsChanged = 0x3758; // FMulticastInlineDelegate
	constexpr auto SwappingItemDefinition = 0x3768; // UFortWorldItemDefinition*
	constexpr auto WinScreenDelayTime = 0x3770; // float
	constexpr auto bSkipPlayWinEffects = 0x3774; // bool
	constexpr auto bAllowPlayersCreditOnLeave = 0x3775; // bool
	constexpr auto bLockingOnFocalPoint = 0x3777; // bool
	constexpr auto FocalPoint = 0x3778; // AActor*
	constexpr auto FocalPointOffset = 0x3780; // FVector_NetQuantize
	constexpr auto FocalPointFOV = 0x3798; // float
	constexpr auto FocalPointDuration = 0x379c; // float
	constexpr auto OnUsingFocalPointChanged = 0x37a8; // FMulticastInlineDelegate
	constexpr auto OnFocalPointActorChanged = 0x37b8; // FMulticastInlineDelegate
	constexpr auto OnSkydiveLeaderChanged = 0x37c8; // FMulticastInlineDelegate
	constexpr auto OnClientDonationSuccessDelegate = 0x37d8; // FMulticastInlineDelegate
	constexpr auto SkydiveLeaderManualCameraTime = 0x3820; // float
	constexpr auto InterpolatedSkydiveFollowerViewRotation = 0x3828; // FRotator
	constexpr auto SkydiveLeader = 0x3858; // AFortPlayerState*
	constexpr auto OnPickupProjectileCreatedDelegate = 0x3868; // FMulticastInlineDelegate
	constexpr auto LastDownedVictim = 0x3878; // AFortPlayerStateAthena*
	constexpr auto LastElimVictim = 0x3880; // AFortPlayerStateAthena*
	constexpr auto OnCameraInStormWallChangeDelegate = 0x3890; // FMulticastInlineDelegate
	constexpr auto bLeaveDisconnectedPawnsInGame = 0x38b8; // bool
	constexpr auto DisconnectedPawn = 0x38c0; // AFortPlayerPawn*
	constexpr auto PreviousPawn = 0x38c8; // AFortPlayerPawn*
	constexpr auto bReplicateViewTargetInventory = 0x38d0; // bool
	constexpr auto bHideWarmUpLoadingScreen = 0x38d1; // char : 1
	constexpr auto bClientNotifiedOfLoss = 0x38d1; // char : 1
	constexpr auto bClientNotifiedOfTeamWin = 0x38d1; // char : 1
	constexpr auto bClientNotifiedOfWin = 0x38d1; // char : 1
	constexpr auto bHasHadValidPawn = 0x38d1; // char : 1
	constexpr auto PlayersTalking = 0x3900; // TArray<FString>
	constexpr auto TalkingPlayersChanged = 0x3910; // FMulticastInlineDelegate
	constexpr auto bHighlightRecordingEnabled = 0x3920; // bool
	constexpr auto bPlaceDangerMarkerWhenTargeting = 0x3921; // bool
	constexpr auto bDeferringStartRecordingHighlights = 0x3922; // bool
	constexpr auto HighlightGroupId = 0x3928; // FString
	constexpr auto CachedHighlightCount = 0x3938; // int32_t
	constexpr auto HighlightFirstKillTime = 0x393c; // float
	constexpr auto HighlightKillMultiple = 0x3940; // int32_t
	constexpr auto HighlightDownMultiple = 0x3944; // int32_t
	constexpr auto HighlightKillCooldown = 0x3948; // float
	constexpr auto HighlightKillRewindTime = 0x394c; // float
	constexpr auto RespawnCamera_Time = 0x3950; // float
	constexpr auto RespawnCamera_HoldPositionTime = 0x3954; // float
	constexpr auto RespawnCamera_InitialLocOffset_InAir = 0x3958; // FVector
	constexpr auto RespawnCamera_InitialLocOffset_OnGround = 0x3970; // FVector
	constexpr auto RespawnCamera_InitialRotOffset_InAir = 0x3988; // FRotator
	constexpr auto RespawnCamera_InitialRotOffset_OnGround = 0x39a0; // FRotator
	constexpr auto RespawnCamera_OffsetFromHit = 0x39b8; // float
	constexpr auto bNextRespawnInAir = 0x39bc; // bool
	constexpr auto RespawnCameraBehavior = 0x39c0; // FName
	constexpr auto MaximumNumberOfPawnsToSearchForEmoteMusic = 0x39f0; // int32_t
	constexpr auto PickupSwapHoldTime = 0x3a00; // float
	constexpr auto bUseNewPickupSwapLogic = 0x3a04; // bool
	constexpr auto SpectatorLevelStreamDistance = 0x3a08; // float
	constexpr auto RespawnLevelStreamDistance = 0x3a0c; // float
	constexpr auto SpectatorStreamingChanged = 0x3a10; // FMulticastInlineDelegate
	constexpr auto InGameLoadScreenChanged = 0x3a20; // FMulticastInlineDelegate
	constexpr auto OnLocalPlayerChangedTeams = 0x3a30; // FMulticastInlineDelegate
	constexpr auto LevelStreamRequestHandshakeState = 0x3a60; // FLevelStreamRequestHandshakeState
	constexpr auto OnCreativePlotLinkedVolumeChanged = 0x3a98; // FMulticastInlineDelegate
	constexpr auto OnClientLeaveIsland = 0x3aa8; // FMulticastInlineDelegate
	constexpr auto OnClientForcedOffIsland = 0x3ab8; // FMulticastInlineDelegate
	constexpr auto OnMakeNewCreativePlotFinished = 0x3ad8; // FMulticastInlineDelegate
	constexpr auto OnDestroyCreativePlotFinished = 0x3ae8; // FMulticastInlineDelegate
	constexpr auto OnRestoreCreativePlotFinished = 0x3af8; // FMulticastInlineDelegate
	constexpr auto OnDuplicateCreativePlotFinished = 0x3b08; // FMulticastInlineDelegate
	constexpr auto OnIslandEntriesChanged = 0x3b18; // FMulticastInlineDelegate
	constexpr auto OnUpdateCreativePlotName = 0x3b38; // FMulticastInlineDelegate
	constexpr auto OnUpdateCreativeDescriptionTags = 0x3b48; // FMulticastInlineDelegate
	constexpr auto RespawnCameraActor = 0x3b70; // ACameraActor*
	constexpr auto bDelayedTeleporting = 0x3b78; // bool
	constexpr auto bBlockTeleporting = 0x3b79; // bool
	constexpr auto MaxPlotCount = 0x3b7c; // int32_t
	constexpr auto InGameMatchmakingReadyCheckStarted = 0x3be0; // FMulticastInlineDelegate
	constexpr auto InGameMatchmakingReadyCheckComplete = 0x3bf0; // FMulticastInlineDelegate
	constexpr auto InGameMatchmakingReadyCheckCanceled = 0x3c00; // FMulticastInlineDelegate
	constexpr auto InGameMatchmakingStarted = 0x3c10; // FMulticastInlineDelegate
	constexpr auto InGameMatchmakingComplete = 0x3c20; // FMulticastInlineDelegate
	constexpr auto InGameMatchmakingStateChanged = 0x3c30; // FMulticastInlineDelegate
	constexpr auto InGameMatchmakingQueuedStatusUpdated = 0x3c40; // FMulticastInlineDelegate
	constexpr auto InGameMatchmakingError = 0x3c50; // FMulticastInlineDelegate
	constexpr auto OnInGameMatchmakingCanceled = 0x3c60; // FMulticastInlineDelegate
	constexpr auto OnInGameMatchmakingUpdateCheckFailed = 0x3c70; // FMulticastInlineDelegate
	constexpr auto OnInGameContentDownloadStarted = 0x3c80; // FMulticastInlineDelegate
	constexpr auto bNoInGameMatchmaking = 0x3c90; // bool
	constexpr auto AudioOnExitAircraft = 0x3cc8; // USoundBase*
	constexpr auto AudioOnExitAircraftHornDoppler = 0x3cd0; // USoundBase*
	constexpr auto MinQuickChatCooldown = 0x3cd8; // float
	constexpr auto QuickChatOffCooldownTime = 0x3cdc; // float
	constexpr auto bMarkedAlive = 0x3ce0; // bool
	constexpr auto CreativeIslands = 0x3ce8; // TArray<FCreativeIslandData>
	constexpr auto LastUsedSavePlot = 0x3cf8; // FString
	constexpr auto bIsAllowedToPublish = 0x3d08; // bool
	constexpr auto GamepadSettingsAssetPtr = 0x3d10; // TSoftObjectPtr<UFortGamepadSettings>
	constexpr auto TeamMemberIndicatorColor = 0x3d50; // FLinearColor
	constexpr auto bMatchStatsForPlayerSent = 0x3d88; // bool
	constexpr auto bAddedBookProgressStatsToGamemode = 0x3d89; // bool
	constexpr auto bHasSentMatchEndedQuestProgress = 0x3d8a; // bool
	constexpr auto QuickBarDefinitions0x3 = 0x3d90; // FQuickBarData
	constexpr auto bEnableBroadcastRemoteClientInfo = 0x3dd0; // bool
	constexpr auto BroadcastRemoteClientInfo = 0x3dd8; // AFortBroadcastRemoteClientInfo*
	constexpr auto StrongMyHero = 0x3de8; // UFortHero*
	constexpr auto ClientGameWorldHolds = 0x3df0; // TArray<TWeakObjectPtr<UObject>>
	constexpr auto EndMatchHeartbeatTimerDelay = 0x3e28; // float
	constexpr auto EndMatchHeartbeatTimestamp = 0x3e30; // double
	constexpr auto WarmupPlayerStart = 0x3e38; // AFortPlayerStartWarmup*
	constexpr auto FullScreenScoreboardInputComponent = 0x3e40; // UInputComponent*
	constexpr auto CurrentFullscreenInputComponent = 0x3e48; // UInputComponent*
	constexpr auto GameChannelRecommendationInputComponent = 0x3e50; // UInputComponent*
	constexpr auto SocialNotificationInputComponent = 0x3e58; // UInputComponent*
	constexpr auto bUseTrapPicker = 0x3fcd; // bool
	constexpr auto DoubleTapEditTime = 0x4030; // float
	constexpr auto MatchReport = 0x4038; // UAthenaPlayerMatchReport*
	constexpr auto MinimapIndicatorClass = 0x4050; // UFortMiniMapTeamIndicators*
	constexpr auto MinimapChallengeIndicatorClass = 0x4058; // UFortMiniMapChallengeIndicators*
	constexpr auto MinimapChallengeIndicators = 0x4060; // UFortMiniMapChallengeIndicators*
	constexpr auto bEnableInGameChallengeLocationIndicators = 0x4068; // bool
	constexpr auto SquadMarkerActorClass = 0x4070; // AFortPlayerMarkerBase*
	constexpr auto BuildingsCreated = 0x4084; // int32_t
	constexpr auto BuildingsEdited = 0x4088; // int32_t
	constexpr auto BuildingsRepaired = 0x408c; // int32_t
	constexpr auto BuildingsUpgraded = 0x4090; // int32_t
	constexpr auto BuildingActionDoneLastAtTime = 0x4094; // float
	constexpr auto BuildingMatchStats = 0x4098; // FBuildingStats
	constexpr auto BuildingAnalyticsArray = 0x40b8; // TArray<FBuildingEditAnalyticEvent>
	constexpr auto TimeStartedTrackingBuildingAnalytics = 0x40c8; // float
	constexpr auto CreativePlotLinkedVolume = 0x41a8; // AFortVolume*
	constexpr auto CreativePlotSessionData = 0x41b0; // FCreativePlotSessionData
	constexpr auto OwnedPortal = 0x41c8; // AFortAthenaCreativePortal*
	constexpr auto OwnedPartyRiftPortal = 0x41d0; // AFortAthenaPartyRiftPortal*
	constexpr auto OnHUDMessageToggled = 0x4220; // FMulticastInlineDelegate
	constexpr auto CachedPurchasedItems = 0x4230; // TArray<FItemAndCount>
	constexpr auto CurrentPlayset = 0x4258; // UFortPlaysetItemDefinition*
	constexpr auto DestructedBuildingInGridTimeoutOverride = 0x4260; // float
	constexpr auto ClientRespawnText = 0x4268; // FText
	constexpr auto ClientRebootingText = 0x4280; // FText
	constexpr auto ClientIslandTravelText = 0x4298; // FText
	constexpr auto ClientTravelToCreativeHubText = 0x42b0; // FText
	constexpr auto VolumesLoading = 0x42c8; // TArray<AActor*>
	constexpr auto VolumesUnloading = 0x42d8; // TArray<AActor*>
	constexpr auto MarkerComponent = 0x42e8; // UAthenaMarkerComponent*
	constexpr auto ResurrectionComponent = 0x42f0; // UAthenaResurrectionComponent*
	constexpr auto SeasonItemComponent = 0x42f8; // UFortControllerComponent_SeasonItem*
	constexpr auto HeldDeviceUsageComponent = 0x4308; // UFortControllerComponent_HeldDeviceUsage*
	constexpr auto XPComponent = 0x4328; // UFortPlayerControllerAthenaXPComponent*
	constexpr auto DiscoverabilityComponent = 0x4330; // UFortControllerComponent_MapDiscoverability*
	constexpr auto TransientQuestsComponent = 0x4338; // UFortControllerComponent_TransientQuests*
	constexpr auto SkydiveFeedback = 0x4340; // UFortControllerComponent_SkydiveFeedback*
	constexpr auto ContextualChallenges = 0x4348; // UFortControllerComponent_ContextualChallenges*
	constexpr auto IndicatedActorManagementComponent = 0x4350; // UFortControllerComponent_IndicatedActorManagement*
	constexpr auto LocalizationServiceComponent = 0x4358; // UFortControllerComponent_LocalizationService*
	constexpr auto ToxicityServiceComponent = 0x4360; // UFortControllerComponent_ToxicityService*
	constexpr auto RechargingWeaponsComponent = 0x4368; // UFortControllerComponent_RechargeWeapons*
	constexpr auto InventoryServiceComponent = 0x4370; // UFortControllerComponent_InventoryService*
	constexpr auto RadiusTrackerComponent = 0x4378; // UFortControllerComponent_RadiusTracker*
	constexpr auto MinigameActivityComponent = 0x4380; // UFortControllerComponent_MinigameActivity*
	constexpr auto CreativeAnalyticsComponent = 0x4388; // UCreativeAnalyticsComponent*
	constexpr auto SightWeatherCapRadius = 0x4390; // FScalableFloat
	constexpr auto TimeSinceLastCreativeSpawn = 0x43b8; // double
	constexpr auto IgnoreSignifanceBasedCustomDepthRendering = 0x43e0; // FCompositeBool
	constexpr auto CreativeUserContentManager = 0x43f8; // UCreativeUserContentManager*
	constexpr auto CreativeUserContentManagerClassSoftClassPtr = 0x4400; // TSoftClassPtr<UObject>
	constexpr auto CreativeObjectTrackingComponent = 0x4438; // UFortCreativeObjectTrackingComponent*
	constexpr auto CreativeEntitlementComponent = 0x4440; // UFortCreativeEntitlementComponent*
	constexpr auto OnPreviewScreenshotCameraActivated = 0x4448; // FMulticastInlineDelegate
	constexpr auto CreativeItemToRemoveWhenAddingInventoryItem = 0x4530; // UFortWorldItem*
	constexpr auto PrimaryQuickBarSlotItemGuids = 0x4558; // FQuickBarEquippedItemGuids
	constexpr auto bIgnoreSpectatorViewRotation = 0x4628; // bool
	constexpr auto bIgnorePlayerInfoAbandonStateForSpecialEventRtmm = 0x4629; // bool
}


namespace FortPlayerPawnStats {


	constexpr auto MaxJumpTime = 0xB8;
	constexpr auto MaxStamina = 0xBC;
	constexpr auto StaminaRegenRate = 0xC0;
	constexpr auto StaminaRegenDelay = 0xC4;
	constexpr auto SprintingStaminaExpenditureRate = 0xC8;
	constexpr auto PersonalVehicleFallingDamageTableRow = 0xCC;

}

namespace PlayerCameraManager {

	constexpr auto PCOwner = 0x298; // APlayerController*
	constexpr auto TransformComponent = 0x2a0; // USceneComponent*
	constexpr auto DefaultFOV = 0x2ac; // float
	constexpr auto DefaultOrthoWidth = 0x2b4; // float
	constexpr auto DefaultAspectRatio = 0x2bc; // float
	constexpr auto CameraCache = 0x330; // FCameraCacheEntry
	constexpr auto LastFrameCameraCache = 0xab0; // FCameraCacheEntry
	constexpr auto ViewTarget = 0x1230; // FTViewTarget
	constexpr auto PendingViewTarget = 0x19c0; // FTViewTarget
	constexpr auto CameraCachePrivate = 0x2180; // FCameraCacheEntry
	constexpr auto LastFrameCameraCachePrivate = 0x2900; // FCameraCacheEntry
	constexpr auto ModifierList = 0x3080; // TArray<UCameraModifier*>
	constexpr auto DefaultModifiers = 0x3090; // TArray<UCameraModifier*>
	constexpr auto FreeCamDistance = 0x30a0; // float
	constexpr auto FreeCamOffset = 0x30a8; // FVector
	constexpr auto ViewTargetOffset = 0x30c0; // FVector
	constexpr auto OnAudioFadeChangeEvent = 0x30d8; // FMulticastInlineDelegate
	constexpr auto CameraLensEffects = 0x3100; // TArray<TScriptInterface<ICameraLensEffectInterface>>
	constexpr auto CachedCameraShakeMod = 0x3110; // UCameraModifier_CameraShake*
	constexpr auto AnimInstPool0x8 = 0x3118; // UCameraAnimInst*
	constexpr auto PostProcessBlendCache = 0x3158; // TArray<FPostProcessSettings>
	constexpr auto ActiveAnims = 0x3178; // TArray<UCameraAnimInst*>
	constexpr auto FreeAnims = 0x3188; // TArray<UCameraAnimInst*>
	constexpr auto AnimCameraActor = 0x3198; // ACameraActor*
	constexpr auto bClientSimulatingViewTarget = 0x31a0; // char : 1
	constexpr auto bUseClientSideCameraUpdates = 0x31a0; // char : 1
	constexpr auto bDefaultConstrainAspectRatio = 0x31a0; // char : 1
	constexpr auto bIsOrthographic = 0x31a0; // char : 1
	constexpr auto bGameCameraCutThisFrame = 0x31a1; // char : 1
	constexpr auto ViewPitchMin = 0x31a4; // float
	constexpr auto ViewPitchMax = 0x31a8; // float
	constexpr auto ViewYawMin = 0x31ac; // float
	constexpr auto ViewYawMax = 0x31b0; // float
	constexpr auto ViewRollMin = 0x31b4; // float
	constexpr auto ViewRollMax = 0x31b8; // float
	constexpr auto ServerUpdateCameraTimeout = 0x31c0; // float

}


namespace FortProjectileAthena
{

	constexpr auto FireStartLoc = 0xa18; // FVector_NetQuantize
constexpr auto PawnHitResult = 0xa38; // FHitResult
constexpr auto bExplodeOnPawnHit = 0xb18; // char : 1
constexpr auto bNoCollisionForNonOwningClients = 0xb18; // char : 1
constexpr auto bIgnoreActorsAttachedToFiringPawn = 0xb18; // char : 1
constexpr auto bProcessLocalHits = 0xb18; // char : 1
constexpr auto TimeToWaitForPawnHitBeforeKillOnServer = 0xb1c; // float
constexpr auto PredictedHitActor = 0xb70; // AActor*
constexpr auto PredictedHitComp = 0xb78; // UPrimitiveComponent*

}

namespace FortPickup {

	constexpr auto bUsePickupWidget = 0x2a8; // bool
	constexpr auto bSuppressInteractionWidget = 0x2a9; // bool
	constexpr auto bWeaponsCanBeAutoPickups = 0x2aa; // bool
	constexpr auto bAutoUpgradeWeapons = 0x2ab; // bool
	constexpr auto bDoServerHandlePickupTrace = 0x2ac; // bool
	constexpr auto SimulatingTooLongLength = 0x2b0; // float
	constexpr auto OnPickup = 0x2b8; // FMulticastInlineDelegate
	constexpr auto OnPickupAttempted = 0x2c8; // FMulticastInlineDelegate
	constexpr auto OnPickupDespawned = 0x2d8; // FMulticastInlineDelegate
	constexpr auto OnPickupDestroyed = 0x2e8; // FMulticastInlineDelegate
	constexpr auto OnPickupCombined = 0x2f8; // FMulticastInlineDelegate
	constexpr auto OnSetPawnWhoDroppedPickup = 0x308; // FMulticastInlineDelegate
	constexpr auto PrimaryPickupItemEntry = 0x320; // FFortItemEntry
	constexpr auto MultiItemPickupEntries = 0x4c0; // TArray<FFortItemEntry>
	constexpr auto PickupLocationData = 0x4d0; // FFortPickupLocationData
	constexpr auto PickupSourceTypeFlags = 0x568; // EFortPickupSourceTypeFlag
	constexpr auto PickupSpawnSource = 0x569; // EFortPickupSpawnSource
	constexpr auto OptionalOwnerID = 0x56a; // int16_t
	constexpr auto DropperID = 0x56c; // int16_t
	constexpr auto OptionalMissionGuid = 0x570; // FGuid
	constexpr auto PrimaryPickupDummyItem = 0x580; // UFortItem*
	constexpr auto PickupEffectBlueprint = 0x588; // TWeakObjectPtr<AFortPickupEffect>
	constexpr auto TouchCapsule = 0x590; // UCapsuleComponent*
	constexpr auto MovementComponent = 0x598; // UProjectileMovementComponent*
	constexpr auto WaterInteractionComponent = 0x5a0; // UFortWaterInteractionComponent*
	constexpr auto LinkToActorComponent = 0x5a8; // UFortLinkToActorComponent*
	constexpr auto bPickedUp = 0x5b0; // bool
	constexpr auto bSplitOnPickup = 0x5b1; // bool
	constexpr auto bTossedFromContainer = 0x5b2; // bool
	constexpr auto bForceHideMinimapIndicator = 0x5b3; // bool
	constexpr auto bCombinePickupsWhenTossCompletes = 0x5b4; // bool
	constexpr auto bServerStoppedSimulation = 0x5b5; // bool
	constexpr auto bClientUseInterpolationOnly = 0x5b6; // bool
	constexpr auto ServerImpactSoundFlash = 0x5b7; // char
	constexpr auto LastLandedSoundPlayTime = 0x5b8; // float
	constexpr auto OverrideInteractAimRadius = 0x5bc; // float
	constexpr auto LandSoundZForceThreshold = 0x5c0; // float
	constexpr auto DefaultFlyTime = 0x5c4; // float
	constexpr auto bForceDefaultFlyTime = 0x5c8; // bool
	constexpr auto DroppedLoopingSoundComp = 0x5d0; // UAudioComponent*
	constexpr auto LandedSoundOverride = 0x5d8; // USoundBase*
	constexpr auto PawnWhoDroppedPickup = 0x5e0; // AFortPawn*
	constexpr auto CachedSpecialActorIdx = 0x5e8; // int32_t
	constexpr auto SpecialActorID = 0x5ec; // FName
	constexpr auto MinimapIndicator = 0x5f0; // UFortSimpleMiniMapIndicator*
	constexpr auto HUDLabel = 0x5f8; // UFortSlateHUDIndicator*
	constexpr auto bRandomRotation = 0x6d4; // bool
	constexpr auto VolumeAtSpawn = 0x6d8; // AActor*
	constexpr auto DespawnTime = 0x6f8; // float
	constexpr auto StormDespawnTime = 0x6fc; // float
	constexpr auto StartSimulatingTime = 0x700; // float

}


namespace FortPlayerStateAthena {


	constexpr auto PersonalLobbyAction = 0xe84; // int32_t
	constexpr auto RespawnData = 0xe88; // FFortRespawnData
	constexpr auto ReplicatedTeamMemberState = 0xee0; // ETeamMemberState
	constexpr auto TeamMemberState = 0xee1; // ETeamMemberState
	constexpr auto TeamMemberStateRepTime = 0xee4; // float
	constexpr auto OnTeamIndexChangedDelegate = 0xf08; // FMulticastInlineDelegate
	constexpr auto OnSquadIdChangedDelegate = 0xf18; // FMulticastInlineDelegate
	constexpr auto bHasWonAGame = 0xf70; // bool
	constexpr auto TeamKillScore = 0xf74; // int32_t
	constexpr auto KillsWhileAthenaGadgetEquippedMap = 0xf78; // TMap<UAthenaGadgetItemDefinition*, int32_t>
	constexpr auto DamageDealtToBigHealthProps = 0xfc8; // TMap<FString, float>
	constexpr auto TeamIndex = 0x1018; // char
	constexpr auto TeamScorePlacement = 0x101c; // int32_t
	constexpr auto TeamScore = 0x1020; // int32_t
	constexpr auto Place = 0x1024; // int32_t
	constexpr auto DownScore = 0x1028; // int32_t
	constexpr auto KillScore = 0x102c; // int32_t
	constexpr auto SeasonLevelUIDisplay = 0x1030; // int32_t
	constexpr auto HumanKillScore = 0x1034; // int32_t
	constexpr auto AIKillCount = 0x1070; // int32_t
	constexpr auto NumChestsOpened = 0x1078; // int32_t
	constexpr auto NumAmmoCansOpened = 0x1080; // int32_t
	constexpr auto NumSupplyDropsOpened = 0x1088; // int32_t
	constexpr auto NumLlamasOpened = 0x1090; // int32_t
	constexpr auto NumForagedItemsConsumed = 0x1098; // int32_t
	constexpr auto NumMinutesAlive = 0x10a0; // int32_t
	constexpr auto NumBronzeCoinsCollected = 0x10a8; // int32_t
	constexpr auto NumSilverCoinsCollected = 0x10b0; // int32_t
	constexpr auto NumGoldCoinsCollected = 0x10b8; // int32_t
	constexpr auto TotalPlayerScore = 0x10c0; // int32_t
	constexpr auto PointsAddedToScore = 0x10c8; // FMulticastInlineDelegate
	constexpr auto TeamScoreChanged = 0x10d8; // FMulticastInlineDelegate
	constexpr auto TeamPlacementChanged = 0x10e8; // FMulticastInlineDelegate
	constexpr auto PlaceChanged = 0x10f8; // FMulticastInlineDelegate
	constexpr auto TeamAverageDamageChanged = 0x1108; // FMulticastInlineDelegate
	constexpr auto MatchAbandonStateChanged = 0x1118; // FMulticastInlineDelegate
	constexpr auto FriendsInSquad = 0x1128; // TArray<AFortPlayerStateAthena*>
	constexpr auto FriendsInMatch = 0x1138; // TMap<AFortPlayerStateAthena*, bool>
	constexpr auto FriendsInSquadAtPartnerCafe = 0x1188; // TArray<AFortPlayerStateAthena*>
	constexpr auto StormSurgeEffectCount = 0x11e8; // char
	constexpr auto TeamAverageDamageDealt = 0x11ea; // uint16_t
	constexpr auto SquadId = 0x11ec; // char
	constexpr auto bThankedBusDriver = 0x11ed; // char : 1
	constexpr auto bDidNotThankBusDriver = 0x11ed; // char : 1
	constexpr auto bUsingAnonymousMode = 0x11ed; // char : 1
	constexpr auto bUsingAnonymousCharacterMode = 0x11ed; // char : 1
	constexpr auto bShowingSeasonLevel = 0x11ed; // char : 1
	constexpr auto PlayerNameCustomOverride = 0x11f0; // FText
	constexpr auto bIsTalking = 0x1208; // bool
	constexpr auto bIsMuted = 0x1209; // bool
	constexpr auto OnPersistenceErrorTypeChanged = 0x1420; // FMulticastInlineDelegate
	constexpr auto MetricInformation = 0x1450; // FDetailedMetricInformation
	constexpr auto SimpleMetricInformation = 0x1460; // FSimpleMetricInformation
	constexpr auto SecondsAlive = 0x14d8; // int32_t
	constexpr auto TimeOfPawnCreation = 0x14dc; // int32_t
	constexpr auto bIsDisconnected = 0x14e4; // bool
	constexpr auto GameModeIcon = 0x1520; // UTexture2D*
	constexpr auto DeathInfo = 0x1528; // FDeathInfo
	constexpr auto ChangeTeamInfo = 0x15c8; // FChangeTeamInfo
	constexpr auto bResurrectionChipDisabled = 0x1638; // bool
	constexpr auto ResurrectionChipAvailable = 0x1640; // FFortResurrectionData
	constexpr auto bResurrectingNow = 0x1668; // bool
	constexpr auto RebootCounter = 0x166c; // int32_t
	constexpr auto InteractingRebootVan = 0x1670; // ABuildingGameplayActorSpawnMachine*
	constexpr auto MatchAbandonState = 0x167c; // EMatchAbandonState
	constexpr auto bIsContributingToOverbudgetHeatmap = 0x167e; // char : 1
	constexpr auto bIsAnAthenaGameParticipant = 0x167e; // char : 1
	constexpr auto BotUniqueId = 0x1680; // FUniqueNetIdRepl
	constexpr auto bPreserveSquad = 0x16a8; // bool
	constexpr auto KeepPlayingTogetherVotingStatus = 0x16c8; // EKeepPlayingTogetherVotingStatus
	constexpr auto KeepPlayingTogetherMatchmakingRegion = 0x16e8; // FString
	constexpr auto InitialSquadSize = 0x1710; // char
	constexpr auto SquadSizeIncrements = 0x1711; // char
	constexpr auto SquadSizeDecrements = 0x1712; // char
	constexpr auto PersistenceErrorType = 0x1760; // ECreativePersistenceErrorTypes

}


namespace ProceduralScatterActorContentVariation
{
	constexpr auto ActorClass = 0xe8; // AActor*
}

namespace FortWeaponItemDefinition {
	constexpr auto WeaponSoundLibraries = 0x900; // TArray<USoundLibrary*>
	constexpr auto WeaponOwnerSoundLibraries = 0x910; // TArray<USoundLibrary*>
	constexpr auto WeaponActorClass = 0x920; // TSoftClassPtr<UObject>
	constexpr auto WeaponMeshOverride = 0x948; // TSoftObjectPtr<USkeletalMesh>
	constexpr auto IntrinsicOverrideWrap = 0x970; // TSoftObjectPtr<UAthenaItemWrapDefinition>
	constexpr auto WeaponStatHandle = 0x998; // FDataTableRowHandle
	constexpr auto bRechargeAmmoToClip = 0x9a8; // bool
	constexpr auto WeaponRechargeAmmoRate = 0x9b0; // FScalableFloat
	constexpr auto WeaponRechargeAmmoQuantity = 0x9d8; // FScalableFloat
	constexpr auto AbilitySet = 0xa00; // TSoftObjectPtr<UFortAbilitySet>
	constexpr auto AlterationSlotsLoadoutRow = 0xa28; // FName
	constexpr auto BaselineAlterationSlotsLoadoutRow = 0xa2c; // FName
	constexpr auto BaseAlteration = 0xa30; // TSoftObjectPtr<UFortAlterationItemDefinition>
	constexpr auto BaseCosmeticAlteration = 0xa58; // TSoftObjectPtr<UFortAlterationItemDefinition>
	constexpr auto WeaponModSlots = 0xa80; // TArray<FFortWeaponModSlot>
	constexpr auto PrimaryFireAbility = 0xa90; // TSoftClassPtr<UObject>
	constexpr auto SecondaryFireAbility = 0xab8; // TSoftClassPtr<UObject>
	constexpr auto ReloadAbility = 0xae0; // TSoftClassPtr<UObject>
	constexpr auto OnHitAbility = 0xb08; // TSoftClassPtr<UObject>
	constexpr auto EquippedAbilities = 0xb30; // TArray<TSoftClassPtr<UObject>>
	constexpr auto EquippedAbilitySet = 0xb40; // TSoftObjectPtr<UFortAbilitySet>
	constexpr auto EquippedCharacterParts = 0xb68; // TArray<UCustomCharacterPart*>
	constexpr auto AmmoData = 0xb78; // TSoftObjectPtr<UFortWorldItemDefinition>
	constexpr auto AdditionalDataFields = 0xba0; // TArray<UFortWeaponAdditionalData*>
	constexpr auto LowAmmoPercentage = 0xbb0; // float
	constexpr auto TriggerType = 0xbb4; // EFortWeaponTriggerType
	constexpr auto SecondaryTriggerType = 0xbb5; // EFortWeaponTriggerType
	constexpr auto DisplayTier = 0xbb6; // EFortDisplayTier
	constexpr auto bTargetingPreventsReload = 0xbb7; // char : 1
	constexpr auto bCanFireWhileNotTargetedInVehicle = 0xbb7; // char : 1
	constexpr auto bCanFireWhileInstigatorTethered = 0xbb7; // char : 1
	constexpr auto bUsesPhantomReserveAmmo = 0xbb7; // char : 1
	constexpr auto bAllowTargetingDuringReload = 0xbb7; // char : 1
	constexpr auto bAllowSecondaryFireToInterruptPrimary = 0xbb7; // char : 1
	constexpr auto bShouldMagazineSizeDisplayInfinity = 0xbb7; // char : 1
	constexpr auto bUsesCustomAmmoType = 0xbb7; // char : 1
	constexpr auto bAlwaysChargeUpToMin = 0xbb8; // char : 1
	constexpr auto bNoFireOnReleaseBeforeMinChargeTime = 0xbb8; // char : 1
	constexpr auto bEndAbilityOnChargeEnd = 0xbb8; // char : 1
	constexpr auto bUpdateLastFireTimeOnDischarge = 0xbb8; // char : 1
	constexpr auto bReticleCornerOutsideSpreadRadius = 0xbb8; // char : 1
	constexpr auto bValidForLastEquipped = 0xbb8; // char : 1
	constexpr auto bRequestClientPreload = 0xbb8; // char : 1
	constexpr auto bEnableWeaponMeshOverrideUpdates = 0xbb8; // char : 1
	constexpr auto HitNotifyDuration = 0xbbc; // float
	constexpr auto ReticleImage = 0xbc0; // TSoftObjectPtr<UTexture2D>
	constexpr auto ReticleCornerAngles = 0xbe8; // TArray<float>
	constexpr auto ReticleCenterImage = 0xbf8; // TSoftObjectPtr<UTexture2D>
	constexpr auto ReticleCenterPerfectAimImage = 0xc20; // TSoftObjectPtr<UTexture2D>
	constexpr auto ReticleCenterImageOffset = 0xc48; // FVector2D
	constexpr auto ReticleInvalidTargetImage = 0xc58; // TSoftObjectPtr<UTexture2D>
	constexpr auto AnalyticTags = 0xc80; // FGameplayTagContainer
	constexpr auto PlayerGrantedGameplayTags = 0xca0; // FGameplayTagContainer
	constexpr auto ActualAnalyticFNames = 0xcc0; // TArray<FName>
	constexpr auto RequiredWeaponParent = 0xcd0; // TSoftObjectPtr<UAthenaCosmeticItemDefinition>
	constexpr auto CreativeTagsHelper = 0xcf8; // FFortCreativeTagsHelper
	constexpr auto AdditionalData = 0xd08; // UFortWeaponAdditionalData*

}

namespace FortPlayerStateZone {

	constexpr auto OnCurrentPawnChanged = 0xae8; // FMulticastInlineDelegate
	constexpr auto SpectatingTarget = 0xb10; // AFortPlayerStateZone*
	constexpr auto Spectators = 0xb18; // FFortSpectatorZoneArray
	constexpr auto OnSpectatorsRemovedEvent = 0xc48; // FMulticastInlineDelegate
	constexpr auto OnSpectatorCountChangedEvent = 0xc58; // FMulticastInlineDelegate
	constexpr auto OnSpectatingTargetChangedEvent = 0xc68; // FMulticastInlineDelegate
	constexpr auto OnBeginSpectatingEvent = 0xc78; // FMulticastInlineDelegate
	constexpr auto KickedFromSessionReason = 0xc90; // EFortKickReason
	constexpr auto RS_Zone_Old0x23 = 0xc94; // FReplicatedStatValues
	constexpr auto CarriedObject = 0xdb0; // AFortCarriedObject*
	constexpr auto NumRejoins = 0xdb8; // int32_t
	constexpr auto OldTotalScoreStat = 0xdbc; // int32_t
	constexpr auto bInvincibleDueToUI = 0xdd8; // bool
	constexpr auto CurrentHealth = 0xddc; // float
	constexpr auto MaxHealth = 0xde0; // float
	constexpr auto CurrentShield = 0xde4; // float
	constexpr auto MaxShield = 0xde8; // float
	constexpr auto CurrentOvershield = 0xdec; // float
	constexpr auto MaxOvershield = 0xdf0; // float
	constexpr auto CurrentSignalInStorm = 0xdf4; // float
	constexpr auto MaxSignalInStorm = 0xdf8; // float
	constexpr auto bOvershieldBarVisible = 0xdfc; // bool
	constexpr auto OnOvershieldVisibilityChanged = 0xe00; // FMulticastInlineDelegate
	constexpr auto AccumulatedItems = 0xe18; // TArray<FAccumulatedItemEntry>
	constexpr auto OnAccumulatedItemsChanged = 0xe28; // FMulticastInlineDelegate
	constexpr auto SimulatedAttributes = 0xe38; // TArray<FSimulatedAttributeEntry>
	constexpr auto PendingDestroyedGadgetItemDefinition = 0xe48; // UFortGadgetItemDefinition*
	constexpr auto bInAircraft = 0xe50; // char : 1
	constexpr auto bHasEverSkydivedFromBus = 0xe50; // char : 1
	constexpr auto bHasEverSkydivedFromBusAndLanded = 0xe50; // char : 1
	constexpr auto QuickbarEquippedItems = 0xe58; // TArray<UFortItemDefinition*>

}

namespace FortPlaylist {

	constexpr auto PlaylistId = 0x38; // int32_t
	constexpr auto PlaylistName = 0x3c; // FName
	constexpr auto GameType = 0x40; // EFortGameType
	constexpr auto MinPlayers = 0x44; // int32_t
	constexpr auto MaxPlayers = 0x48; // int32_t
	constexpr auto bUnderfillMatchmaking = 0x4c; // bool
	constexpr auto UnderfilledMaxPlayers = 0x50; // int32_t
	constexpr auto bOverrideMaxPlayers = 0x54; // bool
	constexpr auto MaxHumanAndBotParticipants = 0x58; // int32_t
	constexpr auto MaxTeamCount = 0x5c; // int32_t
	constexpr auto MaxTeamSize = 0x60; // int32_t
	constexpr auto MaxSocialPartySize = 0x64; // int32_t
	constexpr auto MaxSquadSize = 0x68; // int32_t
	constexpr auto MaxSquads = 0x6c; // int32_t
	constexpr auto EnforceSquadFill = 0x70; // bool
	constexpr auto bAllowSquadFillOption = 0x71; // bool
	constexpr auto bShouldFillWhenNoSquadFillOption = 0x72; // bool
	constexpr auto bAllowJoinInProgress = 0x73; // bool
	constexpr auto JoinInProgressMatchType = 0x78; // FText
	constexpr auto EndOfMatchXpFirstElim = 0x90; // int32_t
	constexpr auto EndOfMatchXpMultiplier = 0x94; // int32_t
	constexpr auto UserOptions = 0x98; // UPlaylistUserOptions*
	constexpr auto bEnableBackfillDuringWarmupPhase = 0xa0; // bool
	constexpr auto TimeAfterWarmupToDisableBackfill = 0xa4; // float
	constexpr auto RichPresenceAssetName = 0xa8; // FName
	constexpr auto bAllowKeepPlayingTogether = 0xac; // bool
	constexpr auto bAllowPartyRift = 0xad; // bool
	constexpr auto bAllowSquadSizeTracking = 0xae; // bool
	constexpr auto PreloadPersistentLevel = 0xb0; // TSoftObjectPtr<UWorld>
	constexpr auto AdditionalLevels = 0xd8; // TArray<TSoftObjectPtr<UWorld>>
	constexpr auto AdditionalLevelsServerOnly = 0xe8; // TArray<TSoftObjectPtr<UWorld>>
	constexpr auto BuiltInGameFeaturePluginsToLoad = 0xf8; // TArray<FString>
	constexpr auto OverrideGameFeaturePluginToDownload = 0x108; // FString
	constexpr auto GameFeaturePluginToActivateUntilDownloadedContentIsPresent = 0x118; // FString
	constexpr auto DefaultFirstTeam = 0x128; // char
	constexpr auto DefaultLastTeam = 0x129; // char
	constexpr auto GameplayTagContainer = 0x130; // FGameplayTagContainer
	constexpr auto FriendlyFireType = 0x150; // EFriendlyFireType
	constexpr auto bUseFriendlyFireAimAssist = 0x151; // bool
	constexpr auto LootLevel = 0x154; // int32_t
	constexpr auto LootTagQuery = 0x158; // FGameplayTagQuery
	constexpr auto BuildingLevelOverride = 0x1a0; // int32_t
	constexpr auto DBNOType = 0x1a4; // EDBNOType
	constexpr auto SpawnImmunityTime = 0x1a8; // FScalableFloat
	constexpr auto SkippedGamePhaseNotification = 0x1d0; // TArray<EAthenaGamePhaseStep>
	constexpr auto ModifierList = 0x1e0; // TArray<TSoftObjectPtr<UFortGameplayModifierItemDefinition>>
	constexpr auto TimeOfDayManager = 0x1f0; // TSoftClassPtr<UObject>
	constexpr auto bIgnoreWeatherEvents = 0x218; // bool
	constexpr auto ItemsToFullyLoad = 0x220; // TArray<UFortItemDefinition*>
	constexpr auto SharedAssetGroup = 0x230; // UFortSharedAssetGroup*
	constexpr auto ConditionalAssetGroup = 0x238; // UFortConditionalAssetGroup*
	constexpr auto bIsDefaultPlaylist = 0x240; // bool
	constexpr auto UIDisplayName = 0x248; // FText
	constexpr auto UIDescription = 0x260; // FText
	constexpr auto HUDElementsToHide = 0x278; // FGameplayTagContainer
	constexpr auto LootTierData = 0x298; // TSoftObjectPtr<UDataTable>
	constexpr auto LootPackages = 0x2c0; // TSoftObjectPtr<UDataTable>
	constexpr auto BaseCurveTableOverrides = 0x2e8; // TArray<FFortPlaylistBaseCurveTableOverride>
	constexpr auto BaseDataTablesOverride = 0x2f8; // TArray<FFortPlaylistBaseDataTableOverride>
	constexpr auto RangedWeapons = 0x308; // TSoftObjectPtr<UDataTable>
	constexpr auto GameData = 0x330; // TSoftObjectPtr<UCurveTable>
	constexpr auto ResourceRates = 0x358; // TSoftObjectPtr<UCurveTable>
	constexpr auto SkydiveMusic = 0x380; // TSoftObjectPtr<USoundBase>
	constexpr auto SkydiveMusicOutroStinger = 0x3a8; // TSoftObjectPtr<USoundBase>
	constexpr auto RespawnStinger = 0x3d0; // TSoftObjectPtr<USoundBase>
	constexpr auto GarbageCollectionFrequency = 0x3f8; // float
	constexpr auto ServerPerformanceEventFrequency = 0x3fc; // float
	constexpr auto ServerMetricsEventFrequency = 0x400; // float
	constexpr auto bUseLocalizationService = 0x404; // bool

}

namespace FortPlaylistAthena {

	constexpr auto bRewardsTrackPlacement = 0x408; // bool
	constexpr auto bRewardsAllowXPProgression = 0x409; // bool
	constexpr auto bRewardForRevivingTeammates = 0x40a; // bool
	constexpr auto RewardPlacementBonusType = 0x40b; // ERewardPlacementBonusType
	constexpr auto RewardsPlacementThreshold = 0x40c; // int32_t
	constexpr auto RewardTimePlayedType = 0x410; // ERewardTimePlayedType
	constexpr auto RewardTimePlayedXPPerMinute = 0x414; // int32_t
	constexpr auto RewardTimePlayedXPFlatValue = 0x418; // int32_t
	constexpr auto InMatchXPRewardScalar = 0x420; // FScalableFloat
	constexpr auto QuestEventXPTableOverride = 0x448; // TSoftObjectPtr<UDataTable>
	constexpr auto FirstWinRewards = 0x470; // TArray<TSoftObjectPtr<UFortItemDefinition>>
	constexpr auto CalendarEventsForEndOfMatchUpdate = 0x480; // TArray<FString>
	constexpr auto bAllowSinglePartyMatches = 0x490; // bool
	constexpr auto bRequeueAfterFailedSessionAssignment = 0x491; // bool
	constexpr auto bIsTournament = 0x492; // bool
	constexpr auto bUseMultidivisionQueues = 0x493; // bool
	constexpr auto CompetitivePointClamp = 0x494; // int32_t
	constexpr auto Strategy = 0x498; // FString
	constexpr auto BotVersionPlaylistName = 0x4a8; // FName
	constexpr auto MaxBucketCapacity = 0x4ac; // int32_t
	constexpr auto MaxPendingMatches = 0x4b0; // int32_t
	constexpr auto PriorityRatingExpansion = 0x4b8; // TArray<FRatingExpansion>
	constexpr auto bUseInputRules = 0x4c8; // bool
	constexpr auto bAllowBackfill = 0x4c9; // bool
	constexpr auto MinBackfillMatchPlayers = 0x4cc; // int32_t
	constexpr auto MaxTeamScoreAllowedForBackfill = 0x4d0; // int32_t
	constexpr auto MinPlayersForPrivateServer = 0x4d4; // int32_t
	constexpr auto MaxTeamScoreDiscrepancyPercent = 0x4d8; // float
	constexpr auto bUsePlayerRating = 0x4dc; // bool
	constexpr auto bEnableRatingUpdate = 0x4dd; // bool
	constexpr auto bEnableDynamicBotBackfill = 0x4de; // bool
	constexpr auto RatingType = 0x4e0; // FString
	constexpr auto bRequireCrossplayEnabled = 0x4f0; // bool
	constexpr auto bLimitedPoolMatchmakingEnabled = 0x4f1; // bool
	constexpr auto bAllowedInLeto = 0x4f2; // bool
	constexpr auto LastQueuedPlaylistPriority = 0x4f4; // int32_t
	constexpr auto bAllowInGameMatchMaking = 0x4f8; // bool
	constexpr auto bAllowReturnToMatchmakingOriginOnMatchEnd = 0x4f9; // bool
	constexpr auto bAllowBotsInHumanTeams = 0x4fa; // bool
	constexpr auto bForceNewPlayerStateOnReconnect = 0x4fb; // bool
	constexpr auto bShouldErrorOnAdditionalContentFailure = 0x4fc; // bool
	constexpr auto bRemoveFromSquadOnLogout = 0x4fd; // bool
	constexpr auto DADTestValue = 0x500; // int32_t
	constexpr auto RequiredCatalogItemId = 0x508; // FString
	constexpr auto DelayForPreServerTransitionAnimation = 0x518; // float
	constexpr auto WinConditionType = 0x51c; // EAthenaWinCondition
	constexpr auto TimedWinConditionTime = 0x520; // FScalableFloat
	constexpr auto FinalWinConditionTime = 0x548; // FScalableFloat
	constexpr auto ScoringData = 0x570; // FWinConditionScoreData
	constexpr auto TimedSafeZonePhaseTime = 0x5d0; // FScalableFloat
	constexpr auto WinConditionPlayersRemaining = 0x5f8; // int32_t
	constexpr auto NumWinningTeamsCN = 0x600; // FScalableFloat
	constexpr auto bIsLargeTeamGame = 0x628; // bool
	constexpr auto bShouldSpreadTeams = 0x629; // bool
	constexpr auto bIgnoreDefaultQuests = 0x62a; // bool
	constexpr auto bDisallowMultipleWeaponsOfType = 0x62b; // bool
	constexpr auto bAllowEditingEnemyWalls = 0x62c; // bool
	constexpr auto LootDropRounds = 0x630; // int32_t
	constexpr auto ForceKickAfterDeathTime = 0x634; // float
	constexpr auto ForceKickAfterDeathMode = 0x638; // EForceKickAfterDeathMode
	constexpr auto QuickbarSelectionPreservationMode = 0x639; // EWeaponSelectionPreservationType
	constexpr auto AlwaysAllowedNativeActions = 0x640; // FGameplayTagContainer
	constexpr auto PawnForcedCullDistance = 0x660; // FScalableFloat
	constexpr auto TransientMatchStartBonusCurrency = 0x688; // FScalableFloat
	constexpr auto InventoryItemsToGrant = 0x6b0; // TArray<FItemAndCount>
	constexpr auto bIgnoreGameModeStartingInventory = 0x6c0; // bool
	constexpr auto bRequirePickaxeInStartingInventory = 0x6c1; // bool
	constexpr auto DestructedBuildingInGridTimeout = 0x6c4; // float
	constexpr auto bTeamFilterDestructedBuildingsInGrid = 0x6c8; // bool
	constexpr auto bOwnerFilterDestructedBuildingsInGrid = 0x6c9; // bool
	constexpr auto bEnableBuildingCreatedEvent = 0x6ca; // bool
	constexpr auto MaximumAspectRatio = 0x6cc; // float
	constexpr auto bVehiclesDestroyAllBuildingSMActorsOnContact = 0x6d0; // bool
	constexpr auto VehicleBoundsXYSplineClass = 0x6d8; // AActor*
	constexpr auto bAutoAcquireSpawnChip = 0x6e0; // bool
	constexpr auto SoundMix = 0x6e8; // USoundMix*
	constexpr auto bAllowHardcoreModifiers = 0x6f0; // bool
	constexpr auto bForceCameraFadeOnRespawn = 0x6f1; // bool
	constexpr auto MinTimeBeforeRespawnCameraFade = 0x6f4; // float
	constexpr auto RespawnType = 0x6f8; // EAthenaRespawnType
	constexpr auto RespawnHeight = 0x700; // FScalableFloat
	constexpr auto MaxRespawnHeight = 0x728; // FScalableFloat
	constexpr auto RespawnTime = 0x750; // FScalableFloat
	constexpr auto bRespawnInAir = 0x778; // bool
	constexpr auto RespawnLevelStreamDistanceToForceScreenFade = 0x780; // FScalableFloat
	constexpr auto bForceRespawnLocationInsideOfVolume = 0x7a8; // bool
	constexpr auto bSkipWarmup = 0x7a9; // bool
	constexpr auto bSkipAircraft = 0x7aa; // bool
	constexpr auto bAllowWarmupPlayerStartInSetupPhase = 0x7ab; // bool
	constexpr auto WarmupEarlyRequiredPlayerPercent = 0x7ac; // float
	constexpr auto AirCraftBehavior = 0x7b0; // EAirCraftBehavior
	constexpr auto bUseCustomAircraftPathSelection = 0x7b1; // bool
	constexpr auto bUseSameDirectionForOpposingAircraft = 0x7b2; // bool
	constexpr auto bAircraftDropOnlyWithinSafeZone = 0x7b3; // bool
	constexpr auto AircraftSafetyMarginPct = 0x7b8; // FScalableFloat
	constexpr auto AircraftPathOffsetFromMapCenterMin = 0x7e0; // float
	constexpr auto AircraftPathOffsetFromMapCenterMax = 0x7e4; // float
	constexpr auto AircraftPathMidpointSelectionRadiusMin = 0x7e8; // float
	constexpr auto AircraftPathMidpointSelectionRadiusMax = 0x7ec; // float
	constexpr auto LastStepPushAircraftCenterLine_Magnitude = 0x7f0; // float
	constexpr auto LastStepPushAircraftCenterLine_Direction = 0x7f4; // float
	constexpr auto bDisableAudioShapes = 0x7f8; // bool
	constexpr auto NonRenderedCharacterAnimationScale = 0x7fc; // float
	constexpr auto PlaylistMissionGen = 0x800; // UFortMissionGenerator*
	constexpr auto bForceLTMLoadingScreenBackground = 0x808; // bool
	constexpr auto LoadingScreenWidget = 0x810; // TSoftClassPtr<UObject>
	constexpr auto UIExtensions = 0x838; // TArray<FUIExtension>
	constexpr auto PlaylistUIData = 0x848; // TSoftObjectPtr<UFortPlaylistUIInfo>
	constexpr auto HUDInfoDataAsset = 0x870; // TSoftObjectPtr<UFortAthenaHUDInfoDataAsset>
	constexpr auto MissionIcon = 0x898; // UTexture2D*
	constexpr auto UIDisplaySubName = 0x8a0; // FText
	constexpr auto bLimitedTimeMode = 0x8b8; // bool
	constexpr auto bDisable_ReportAPlayerReason_TeamingUpWithEnemies_WhileInGame = 0x8b9; // bool
	constexpr auto bDisplayScoreInHUD = 0x8ba; // bool
	constexpr auto bDisplayRespawnWidget = 0x8bb; // bool
	constexpr auto bDisableMatchStatsDisplay = 0x8bc; // bool
	constexpr auto SpecialActorInputActionDataTableRow = 0x8c0; // FDataTableRowHandle
	constexpr auto bEnforceFullSquadInUI = 0x8d0; // bool
	constexpr auto bShowEliminationIndicatorForSelf = 0x8d1; // bool
	constexpr auto bShowEliminationIndicatorForSquadmates = 0x8d2; // bool
	constexpr auto bShowEliminationIndicatorForTeammates = 0x8d3; // bool
	constexpr auto bShowEliminationIndicatorForEnemies = 0x8d4; // bool
	constexpr auto EliminationIndicatorMaxDistance = 0x8d8; // FScalableFloat
	constexpr auto bLeaderboardDisplaysIndividuals = 0x900; // bool
	constexpr auto bUsePointLeaderAsTeamLeaderInLeaderboard = 0x901; // bool
	constexpr auto TypeOfLeaderboard = 0x902; // EFortLeaderboardMetric
	constexpr auto OnlyRespectsGlobalSettingForReplayRecording = 0x908; // FScalableFloat
	constexpr auto DisableReplays = 0x930; // FScalableFloat
	constexpr auto EnableServerReplays = 0x958; // FScalableFloat
	constexpr auto ShouldUseCustomGameChannel = 0x980; // FScalableFloat
	constexpr auto ShouldRejectDefaultGameChat = 0x9a8; // FScalableFloat
	constexpr auto CustomGameChannel = 0x9d0; // ECustomGameVoiceChannel
	constexpr auto ShouldRecommendCustomGameChannel = 0x9d8; // FScalableFloat
	constexpr auto bForceGameChannel = 0xa00; // bool
	constexpr auto MapImageOverride = 0xa10; // FSlateBrush
	constexpr auto MapScaleOverride = 0xae0; // float
	constexpr auto bDrawCreativeDynamicIslands = 0xae4; // bool
	constexpr auto MapManagerClass = 0xae8; // TSoftClassPtr<UObject>
	constexpr auto bUseAsyncPhysics = 0xb10; // bool
	constexpr auto ServerMaxTickRate = 0xb11; // EFortServerTickRate
	constexpr auto bOverrideServerPerClientMaxAI = 0xb12; // bool
	constexpr auto ServerPerClientMaxAI = 0xb14; // int32_t
	constexpr auto SafeZoneStartUp = 0xb18; // ESafeZoneStartUp
	constexpr auto bWarmUpInStorm = 0xb19; // bool
	constexpr auto StormEffectDelay = 0xb1c; // float
	constexpr auto bDisplayFinalStormPosition = 0xb20; // bool
	constexpr auto bDrawLineToStormCircleIfOutside = 0xb21; // bool
	constexpr auto LastSafeZoneIndex = 0xb24; // int32_t
	constexpr auto SafeZoneLocationBlacklist = 0xb28; // TSoftObjectPtr<UCurveTable>
	constexpr auto CreativeItemListSource = 0xb50; // TSoftObjectPtr<UDataTable>
	constexpr auto UpgradeBenchData = 0xb78; // TSoftObjectPtr<UDataTable>
	constexpr auto AILootOnDeathData = 0xba0; // TSoftObjectPtr<UDataTable>
	constexpr auto HeroStats = 0xbc8; // TSoftObjectPtr<UDataTable>
	constexpr auto bUseDefaultSupplyDrops = 0xbf0; // bool
	constexpr auto SupplyDropModifierList = 0xbf8; // TArray<FSupplyDropModifierData>
	constexpr auto SupplyDropInfoList = 0xc08; // TArray<TSoftObjectPtr<UFortSupplyDropInfo>>
	constexpr auto QueryNameToLootChanceScaleTables = 0xc18; // TArray<TSoftObjectPtr<UDataTable>>
	constexpr auto QueryNameToLootCountScaleTables = 0xc28; // TArray<TSoftObjectPtr<UDataTable>>
	constexpr auto ExitCraftInfo = 0xc38; // TSoftObjectPtr<UFortAthenaExitCraftInfo>
	constexpr auto bPlaylistUsesCustomCharacterParts = 0xc60; // bool
	constexpr auto CharactersToPreload = 0xc68; // TArray<FCharacterPreloadBlock>
	constexpr auto CharacterFallbackTagsToPreload = 0xc78; // TArray<FCharacterFallbackPreloadBlock>
	constexpr auto AIPawnCustomizationFallbackTagsToPreload = 0xc88; // TArray<FGameplayTag>
	constexpr auto SpawnActorInfoList = 0xc98; // TArray<TSoftObjectPtr<UFortSpawnActorInfo>>
	constexpr auto NetActorDiscoveryBudgetInKBytesPerSec = 0xca8; // int32_t
	constexpr auto NetDormancyNumFramesUntilObsolete = 0xcac; // int32_t
	constexpr auto bUseCreativeStarterIsland = 0xcb0; // char : 1
	constexpr auto bPreloadAthenaMapsForMatchmaking = 0xcb0; // char : 1
	constexpr auto bForceCustomMinigame = 0xcb0; // char : 1
	constexpr auto bEnableCreativeMode = 0xcb0; // char : 1
	constexpr auto bAllowLayoutRequirementsFeature = 0xcb0; // char : 1
	constexpr auto bShowTeamSelectButton = 0xcb0; // char : 1
	constexpr auto bAllowTeamSwitching = 0xcb0; // char : 1
	constexpr auto bEnableSpawningStartup = 0xcb0; // char : 1
	constexpr auto bUsesAnimationSharing = 0xcb1; // bool
	constexpr auto AnimationSharingSetup = 0xcb8; // TSoftObjectPtr<UAnimationSharingSetup>
	constexpr auto bAllowBroadcasting = 0xce0; // bool
	constexpr auto bAllowSpectateAPartyMember = 0xce1; // bool
	constexpr auto bActivateCurie = 0xce2; // bool
	constexpr auto CurieSettings = 0xce8; // UFortCurieSettings*
	constexpr auto CurieManagerConfigOverrides = 0xcf0; // TArray<FName>
	constexpr auto PlaylistStatId = 0xd00; // int32_t
	constexpr auto bAccumulateToProfileStats = 0xd04; // bool
	constexpr auto bSaveToRecentGameList = 0xd05; // bool
	constexpr auto bEnableStatsV2Stats = 0xd06; // bool
	constexpr auto AISettings = 0xd08; // UAthenaAISettings*
	constexpr auto DefaultCreativeTOD = 0xd10; // TSoftClassPtr<UObject>
	constexpr auto MaxVehiclesCanSpawnWithTireMod = 0xd38; // FScalableFloat
	constexpr auto PercentChanceSpawnWithTireMod = 0xd60; // FScalableFloat

}

namespace FortProjectileMovementComponent{


	constexpr auto HomingData = 0x248; // FProjectileHomingData
	constexpr auto InitialHomingStyle = 0x2a0; // EFortHomingStyle
	constexpr auto bHasHomedTowardTarget = 0x2a1; // bool
	constexpr auto bSetInitialLocAndDir = 0x2a2; // bool
	constexpr auto bReplicatedAutoRegisterUpdatedComponent = 0x2a3; // char : 1
	constexpr auto bReplicateStopSimulating = 0x2a3; // char : 1
	constexpr auto HomingLaserTargetDistance = 0x2a4; // float
	constexpr auto HomingTravelTime = 0x2a8; // float
	constexpr auto LockedOnTarget = 0x2ac; // TWeakObjectPtr<AFortPawn>
	constexpr auto DesiredDirection = 0x2b8; // FVector
	constexpr auto PreviousHomingTargetPosition = 0x2d0; // FVector
	constexpr auto LaunchPosition = 0x2e8; // FVector
	constexpr auto InitialDirection = 0x300; // FVector
	constexpr auto AccelerationMagnitude = 0x318; // float
	constexpr auto ReplicatedVelocityData = 0x320; // FFortReplicatedVelocityData
	constexpr auto FortStopSimulatingRepData = 0x340; // FFortStopSimulatingRepData
	constexpr auto WaterInteractionComponent = 0x360; // UFortWaterInteractionComponent*
	constexpr auto OnProjectileVelocityReplicated = 0x380; // FMulticastInlineDelegate
	constexpr auto bUseSeparateGravityScaleInWater = 0x3d8; // bool
	constexpr auto GravityScaleInWater = 0x3dc; // float

}

namespace FortRuntimeOptions {

	constexpr auto CreativePlaysetPropActorPaths = 0x38; // TArray<FRuntimeOptionPlaysetPropActorPath>
	constexpr auto bCanAccoladesDeviceGrantAccolades = 0x48; // bool
	constexpr auto CreativeBetaPermissions = 0x50; // TArray<FCreativeBetaPermissionConfig>
	constexpr auto bEnableItemDefinitionWhiteListing = 0x60; // bool
	constexpr auto bEnableItemDefinitionWhiteListingForTransientPickups = 0x61; // bool
	constexpr auto bAlwaysReadyUpAllLocalPlayersForMatchmaking = 0x62; // bool
	constexpr auto IslandResources = 0x68; // TArray<FCreativeIslandResource>
	constexpr auto VolumeManagerBannedClasses = 0x78; // TArray<TSoftClassPtr<UObject>>
	constexpr auto CreativeIslandDescriptionTagsMaxQty = 0x88; // int32_t
	constexpr auto CreativeIslandDescriptionTagsWhitelist = 0x90; // TArray<FCreativeIslandDescriptionTag>
	constexpr auto ExperimentalCohortPercent = 0xa0; // TArray<FExperimentalCohortPercent>
	constexpr auto ExperimentalBucketPercentList = 0xb0; // TArray<FExperimentalBucketPercentList>
	constexpr auto bEnableSpectatorUpdates = 0xc0; // bool
	constexpr auto bEnableNPCInteractionsForSpectators = 0xc1; // bool
	constexpr auto bIsTournamentMode = 0xc2; // bool
	constexpr auto bIsOutOfSeasonMode = 0xc3; // bool
	constexpr auto bForceBRMode = 0xc4; // bool
	constexpr auto bLoadDirectlyIntoLobby = 0xc5; // bool
	constexpr auto bAllowBPTokenRefund = 0xc6; // bool
	constexpr auto bEnableSpeculativeCreativeMMTeamSizeFix = 0xc7; // bool
	constexpr auto bUseTournamentAnonymousOverrideEnabled = 0xc8; // bool
	constexpr auto bForceDisallowAnonymousMode = 0xc9; // bool
	constexpr auto bEnableGeneratedScreenshotForPortalPreview = 0xca; // bool
	constexpr auto bAllowLoadoutSwitchingInLobby = 0xcb; // bool
	constexpr auto IngameMatchmakingDelaySeconds = 0xcc; // int32_t
	constexpr auto NumSavedLoadouts = 0xd0; // int32_t
	constexpr auto TournamentPlaylistName = 0xd4; // FName
	constexpr auto TournamentPlaylistPriorityBase = 0xd8; // int32_t
	constexpr auto TournamentModeQueueInterval = 0xdc; // float
	constexpr auto MinimumAccountLevelForTournamentPlay = 0xe0; // int32_t
	constexpr auto bEnableManualBroadcasterStart = 0xe4; // bool
	constexpr auto bForcePRM = 0xe5; // bool
	constexpr auto bCreativeManualBroadcasterStart = 0xe6; // bool
	constexpr auto bCreativeEnableTimerForPhoneToolEnforcement = 0xe7; // bool
	constexpr auto bAutoloadRestrictedPlots = 0xe8; // bool
	constexpr auto bDisableMyIslandDescriptionPanel = 0xe9; // bool
	constexpr auto bEnableAllRemoteClientInfos = 0xea; // bool
	constexpr auto bEnableBuildPreviewForBroadcast = 0xeb; // bool
	constexpr auto bEnableRemoteAimSnapshotManagerForBroadcast = 0xec; // bool
	constexpr auto EsportsAnalyticsHeartbeatRate = 0xf0; // float
	constexpr auto bUseBroadcastPostProcessing = 0xf4; // bool
	constexpr auto bUseBroadcastKillFeed = 0xf5; // bool
	constexpr auto bUseServerReplayActionFeed = 0xf6; // bool
	constexpr auto bReplayGoToTimeEnabled = 0xf7; // bool
	constexpr auto bBroadcastPipModeToggle = 0xf8; // bool
	constexpr auto bShowBroadcastPlayerEventScoreWidget = 0xf9; // bool
	constexpr auto bUseOutsideTopThreeSpectatorLeaderboard = 0xfa; // bool
	constexpr auto bReplayPauseZeroDeltas = 0xfb; // bool
	constexpr auto CurrentSocialImportVersion = 0xfc; // int32_t
	constexpr auto PawnDeathScreenDelay = 0x100; // float
	constexpr auto CurrentVKImportVersion = 0x104; // int32_t
	constexpr auto bEnableMassFriendImport = 0x108; // bool
	constexpr auto bEnableSocialTab = 0x109; // bool
	constexpr auto bAllowSocialPresenceUpdates = 0x10a; // bool
	constexpr auto bEnableToastSocialWidget = 0x10b; // bool
	constexpr auto bEnableINICachedSocialStatus = 0x10c; // bool
	constexpr auto MaxINICachedSocialStatuses = 0x110; // int32_t
	constexpr auto MinSecondsBetweenINICachedSocialStatuses = 0x118; // double
	constexpr auto NumDaysBeforeFailedImportReattempt = 0x120; // int32_t
	constexpr auto bEnableSocialBanModal = 0x124; // bool
	constexpr auto bEnableDedicatedServerSocialBanVoiceQuery = 0x125; // bool
	constexpr auto bEnableDedicatedServerSocialBanVoiceEnforcement = 0x126; // bool
	constexpr auto bDisplayLastOnlineTime = 0x127; // bool
	constexpr auto bDisplayLastInteraction = 0x128; // bool
	constexpr auto bEnableStartupSocialImport = 0x129; // bool
	constexpr auto bEnableBladeRAF = 0x12a; // bool
	constexpr auto bEnableStartupErebusFriendImport = 0x12b; // bool
	constexpr auto bEnableVKImport = 0x12c; // bool
	constexpr auto bEnableSteamImport = 0x12d; // bool
	constexpr auto SocialImportURI = 0x130; // FString
	constexpr auto DaysBetweenSocialImportPrompts = 0x140; // int32_t
	constexpr auto DaysBetweenVKImportPrompt = 0x144; // int32_t
	constexpr auto FriendImportCaptionSelection = 0x148; // int32_t
	constexpr auto bEnableSplitWalletTextNotice = 0x14c; // bool
	constexpr auto bShowAthenaStoreToast = 0x14d; // bool
	constexpr auto bShowAthenaStoreToastForRolloverAlone = 0x14e; // bool
	constexpr auto bAllow3DInspectOfRMTItems = 0x14f; // bool
	constexpr auto bAltUpdateFlow = 0x150; // bool
	constexpr auto bShowRMTDescriptionPopup = 0x151; // bool
	constexpr auto bAllowJuniorEndingMovie = 0x152; // bool
	constexpr auto AthenaStarterGameMode = 0x158; // TArray<FName>
	constexpr auto AthenaStarterFill = 0x168; // bool
	constexpr auto PartyRichPresenceUpdateTime = 0x16c; // float
	constexpr auto PartySuggestionUpdateTimer = 0x170; // float
	constexpr auto MaxPartySuggestionsToConsider = 0x174; // int32_t
	constexpr auto bAllowLFG = 0x178; // bool
	constexpr auto bAllowPartyPresenceUpdates = 0x179; // bool
	constexpr auto bAllowGameplayPresenceUpdates = 0x17a; // bool
	constexpr auto bEnablePlaylistNameInRichPresence = 0x17b; // bool
	constexpr auto bAllowDiscordFrictionlessJoin = 0x17c; // bool
	constexpr auto bEnableInteractiveConsumables = 0x17d; // bool
	constexpr auto bEnableContextHelpMenu = 0x17e; // bool
	constexpr auto bShowAthenaItemShop = 0x17f; // bool
	constexpr auto bEnableShowdown = 0x180; // bool
	constexpr auto bEnableTournamentMatchCaps = 0x181; // bool
	constexpr auto bUsePlayingEventIds = 0x182; // bool
	constexpr auto bRetryCMSLoads = 0x183; // bool
	constexpr auto RefreshScoreDelay = 0x184; // float
	constexpr auto bAlwaysForceTournamentLobbyPanelRefresh = 0x188; // bool
	constexpr auto bEnableEventLeaderboards = 0x189; // bool
	constexpr auto NumCachedLeaderboardPages = 0x18c; // int32_t
	constexpr auto MaxPagesPerLeaderboard = 0x190; // int32_t
	constexpr auto EventLeaderboardLiveRefreshTimeSeconds = 0x194; // int32_t
	constexpr auto EventLeaderboardLivePostEventRefreshWindowMinutes = 0x198; // int32_t
	constexpr auto bGetLiveSessionsFromLeaderboards = 0x19c; // bool
	constexpr auto bUseServerTournamentPlacementNotifications = 0x19d; // bool
	constexpr auto MaximumEventLengthHoursForCallout = 0x1a0; // int32_t
	constexpr auto bEnableHypeLeaderboards = 0x1a4; // bool
	constexpr auto bEnableSwapRegionsButton = 0x1a5; // bool
	constexpr auto bFillCompetitivePanelFromDiscovery = 0x1a6; // bool
	constexpr auto HypeLeaderboardEventId = 0x1a8; // FString
	constexpr auto HypeLeaderboardRefreshTimeSeconds = 0x1b8; // int32_t
	constexpr auto bHypeLeaderboardIncludeFriendsTab = 0x1bc; // bool
	constexpr auto CreativePlaylistName = 0x1c0; // FName
	constexpr auto BattleLabPlaylistName = 0x1c4; // FName
	constexpr auto CampaignPlaylistName = 0x1c8; // FName
	constexpr auto bEnableEventScoreClamping = 0x1cc; // bool
	constexpr auto CreativeDisabledTabIndex = 0x1d0; // int32_t
	constexpr auto bAllowIslandExporting = 0x1d4; // bool
	constexpr auto bAllowCreativeModeratorMode = 0x1d5; // bool
	constexpr auto bIslandExportingEnabledMCPOverride = 0x1d6; // bool
	constexpr auto bEnableCreativeServerImportFriendsOption = 0x1d7; // bool
	constexpr auto MaxPlayersInCreativeServer = 0x1d8; // int32_t
	constexpr auto MaxPlayersInCreativeWhitelist = 0x1dc; // int32_t
	constexpr auto bShowSupportACreatorOnIslandLinkScreen = 0x1e0; // bool
	constexpr auto bHideServersWithZeroPlayers = 0x1e1; // bool
	constexpr auto bEnableIslandCodeEntryOnPlayerPortal = 0x1e2; // bool
	constexpr auto bEnableIslandCodeEntryOnCuratedPortal = 0x1e3; // bool
	constexpr auto bEnableIslandCodeEntryInFrontend = 0x1e4; // bool
	constexpr auto RefreshFavoriteIslandsWaitTime = 0x1e8; // float
	constexpr auto IslandCodeLength = 0x1ec; // int32_t
	constexpr auto bApplyCodeFormatting = 0x1f0; // bool
	constexpr auto bAdvertiseBattleLabOwnerInSession = 0x1f1; // bool
	constexpr auto bEnableThermometerUIForBattleLab = 0x1f2; // bool
	constexpr auto bEnableSpatialThermometerForBattleLab = 0x1f3; // bool
	constexpr auto bEnableHeatmapUIDisplayForCreative = 0x1f4; // bool
	constexpr auto bEnableHeatmapUIDisplayForBattleLab = 0x1f5; // bool
	constexpr auto bUseHeatmapHighPrecison = 0x1f6; // bool
	constexpr auto bEnableBudgetTrackerSpatialTest = 0x1f7; // bool
	constexpr auto bEnableSpatialThermometerForCreative = 0x1f8; // bool
	constexpr auto bEnableSpatialSettingsForCreative = 0x1f9; // bool
	constexpr auto bIsMatchmakingEnabledForPlayers = 0x1fa; // bool
	constexpr auto CreativeHeatmapThermometerCellSize = 0x1fc; // float
	constexpr auto bEnableThermomterCostPreviwer = 0x200; // bool
	constexpr auto bEnableSlateVersionOfThermometer = 0x201; // bool
	constexpr auto bEnableJoinInProgress = 0x202; // bool
	constexpr auto bEnableSpectateAPartyMember = 0x203; // bool
	constexpr auto bEnableJoinAndSpectate = 0x204; // bool
	constexpr auto bEnableRequestToJoin = 0x205; // bool
	constexpr auto MaxNumAlivePlayersForSpectateAPartyMember = 0x208; // int32_t
	constexpr auto MaxNumPartyMemberSpectatorsPerMatch = 0x20c; // int32_t
	constexpr auto SpectateAPartyMemberPlaylistOverrides = 0x210; // TArray<FRuntimeOptionSpectateAPartyMemberOverride>
	constexpr auto bEnableJoinInProgressInMatchmakingWidget = 0x220; // bool
	constexpr auto bAnyPartyMemberAllowedToCancelMatchmakingV2 = 0x221; // bool
	constexpr auto bEnableLockerSearch = 0x222; // bool
	constexpr auto bEnableLockerDirtySearch = 0x223; // bool
	constexpr auto bEnableBattlePass = 0x224; // bool
	constexpr auto bEnableBattlePassFAQ = 0x225; // bool
	constexpr auto bShowBattlePassBangAfterPurchase = 0x226; // bool
	constexpr auto bShowBattlePassBangEveryLevel = 0x227; // bool
	constexpr auto bShowBattlePassBangs = 0x228; // bool
	constexpr auto bBattlePassVideoDelay = 0x229; // bool
	constexpr auto bEnableAthenaFavoriting = 0x22a; // bool
	constexpr auto bShowAthenaDailyQuests = 0x22b; // bool
	constexpr auto bEnableAthenaCustomPreviewActionForCosmetics = 0x22c; // bool
	constexpr auto bEnableAthenaItemRandomization = 0x22d; // bool
	constexpr auto bEnableProfileStatTracking = 0x22e; // bool
	constexpr auto bEnableProfileStatUI = 0x22f; // bool
	constexpr auto bEnableTrickUI = 0x230; // bool
	constexpr auto bEnableMultiplayerTricks = 0x231; // bool
	constexpr auto bEnableInGameChallengeTree = 0x232; // bool
	constexpr auto bCreateEpicAccountPinGrantDisabled = 0x233; // bool
	constexpr auto bLoginEpicWeb = 0x234; // bool
	constexpr auto bLoginXBLDisabled = 0x235; // bool
	constexpr auto bLoginPSNDisabled = 0x236; // bool
	constexpr auto bLoginErebusDisabled = 0x237; // bool
	constexpr auto bEnableClientSettingsSaveToCloud = 0x238; // bool
	constexpr auto bEnableClientSettingsSaveToDisk = 0x239; // bool
	constexpr auto bEnableClientSettingsRestoreInputPresets = 0x23a; // bool
	constexpr auto bDedServerEventServiceDownloadTryCount = 0x23c; // int32_t
	constexpr auto TournamentRefreshPayoutMaxRateSeconds = 0x240; // int32_t
	constexpr auto TournamentRefreshEventsMaxRateSeconds = 0x244; // int32_t
	constexpr auto TournamentRefreshPlayerMaxRateSeconds = 0x248; // int32_t
	constexpr auto TournamentHUDPointCounterDelay = 0x24c; // float
	constexpr auto MaxNumDisplayNamesOnLiveGameList = 0x250; // int32_t
	constexpr auto LiveGameListInitialLimit = 0x254; // int32_t
	constexpr auto LiveGameListQueryIncreaseAmount = 0x258; // int32_t
	constexpr auto bEnableLiveGamesScreen = 0x25c; // bool
	constexpr auto bLiveGameTimeDurationVisible = 0x25d; // bool
	constexpr auto bEnableFlagSelection = 0x25e; // bool
	constexpr auto DefaultFlagRegionId = 0x260; // FString
	constexpr auto MixedNationTeamFlagRegionId = 0x270; // FString
	constexpr auto DisabledFlagSelections = 0x280; // TArray<FString>
	constexpr auto FlagChangeCooldownDays = 0x290; // int32_t
	constexpr auto bEnableEventServicePayouts = 0x294; // bool
	constexpr auto bLiveGamesClientAnalyticsEnabled = 0x295; // bool
	constexpr auto MinimumWaitTimeToRequestNewShowdownScoreForWindow = 0x298; // float
	constexpr auto EventServicePayoutRefreshRateSeconds = 0x29c; // int32_t
	constexpr auto EventServicePayoutRefreshSpreadSeconds = 0x2a0; // int32_t
	constexpr auto BundleLoaderWidgetTimerInterval = 0x2a4; // float
	constexpr auto CancelledEvents = 0x2a8; // TArray<FString>
	constexpr auto SecondsShowStartingMatchMessageForScheduledMMEvents = 0x2b8; // int32_t
	constexpr auto bEnableMatchAbandonProcess = 0x2bc; // bool
	constexpr auto MatchAbandonTimeout = 0x2c0; // float
	constexpr auto bEnableMultidivisionTournamentEventIdQuorum = 0x2c4; // bool
	constexpr auto CloudSaveIntervalConfig = 0x2c8; // double
	constexpr auto bSaveToCloudOnMapLoad = 0x2d0; // bool
	constexpr auto bSaveToCloudOnSuspend = 0x2d1; // bool
	constexpr auto bSaveToCloudOnDeactivate = 0x2d2; // bool
	constexpr auto bSaveToCloudOnTerminate = 0x2d3; // bool
	constexpr auto bSaveToCloudOnExit = 0x2d4; // bool
	constexpr auto bSaveToCloudOnLogout = 0x2d5; // bool
	constexpr auto GiftNotificationRefreshTimer = 0x2d8; // double
	constexpr auto bEnableUndoPurchase = 0x2e0; // bool
	constexpr auto bMoveUndoToBottomBar = 0x2e1; // bool
	constexpr auto bShowStoreBanner = 0x2e2; // bool
	constexpr auto InGameStoreUpdateChance = 0x2e4; // float
	constexpr auto bEnableReplayBrowser = 0x2e8; // bool
	constexpr auto WhitelistedReplayCLs = 0x2f0; // TArray<uint32_t>
	constexpr auto bAllowAllReplays = 0x300; // bool
	constexpr auto bEnableReplayRecording = 0x301; // bool
	constexpr auto bEnableLargeTeamReplayRecording = 0x302; // bool
	constexpr auto bEnableCreativeModeReplayRecording = 0x303; // bool
	constexpr auto bEnablePlaygroundModeReplayRecording = 0x304; // bool
	constexpr auto bEnableSplitscreenReplayRecording = 0x305; // bool
	constexpr auto bEnableReplayDemoSplitting = 0x306; // bool
	constexpr auto bStableReplayPlayback = 0x307; // bool
	constexpr auto bEnableHearingAccessibility = 0x308; // bool
	constexpr auto bDisableSpatializationInsteadOfMutingWhenHearingAccessibilityEnabled = 0x309; // bool
	constexpr auto bAllowVisualizingSoundsWithStereoAudio = 0x30a; // bool
	constexpr auto bEnableMetaSoundTestSimple = 0x30b; // bool
	constexpr auto bEnableMetaSoundTestComplex = 0x30c; // bool
	constexpr auto bDisableGifting = 0x30d; // bool
	constexpr auto bImmediateClaimOfEmote = 0x30e; // bool
	constexpr auto bForceRestrictChat = 0x30f; // bool
	constexpr auto GiftLimitAmount = 0x310; // int32_t
	constexpr auto bBattlePassGiftingEmergencyDisable = 0x314; // bool
	constexpr auto bEnableBattlePassGiftingButton = 0x315; // bool
	constexpr auto bEnableBattlePassGiftingButtonTokenOnly = 0x316; // bool
	constexpr auto bShowBPGiftBoxPopup = 0x317; // bool
	constexpr auto EndBattleRoyalUpdateDelay = 0x318; // float
	constexpr auto LightswitchDownLoginDelay = 0x31c; // float
	constexpr auto bShowStatusButtonOnWaitingRoomScreen = 0x320; // bool
	constexpr auto bInvertMotionOnUnattachedSwitchControllers = 0x321; // bool
	constexpr auto bDisableTouchLookVelocityScaling = 0x322; // bool
	constexpr auto bDisablePurchaseHistoryScreen = 0x323; // bool
	constexpr auto bEnableRedeemOfflinePurchasesToasts = 0x324; // bool
	constexpr auto bAllowProcessedPayoutsToRefreshProfile = 0x325; // bool
	constexpr auto TouchAimAssistStrengthScalar = 0x328; // float
	constexpr auto bDisableTouchAimAssistAutoTracking = 0x32c; // bool
	constexpr auto bProcessGamepadInputOnMobile = 0x32d; // bool
	constexpr auto bMobileForceGamepadHUDWhenAttached = 0x32e; // bool
	constexpr auto bDisableLegacyControls = 0x32f; // bool
	constexpr auto bFixAimAssistDeadzoneExploit = 0x330; // bool
	constexpr auto CrucibleWhitelistOverride = 0x331; // ECrucibleWhitelistOverride
	constexpr auto bDisableCrucibleStatUpload = 0x332; // bool
	constexpr auto bDisableCrucibleStatDownload = 0x333; // bool
	constexpr auto bDisableCrucibleGlobalLeaderboards = 0x334; // bool
	constexpr auto bDisableCrucibleFriendLeaderboards = 0x335; // bool
	constexpr auto bDisableCrucibleAnalyticsEvents = 0x336; // bool
	constexpr auto bDisableCrucibleDestroyDeadBots = 0x337; // bool
	constexpr auto bDisableCrucibleForcedGC = 0x338; // bool
	constexpr auto bDisableCrucibleLeaderboardFilterText = 0x339; // bool
	constexpr auto bDisableCrucibleLeaderboardSwitching = 0x33a; // bool
	constexpr auto bCrucibleLockToPlatform = 0x33b; // bool
	constexpr auto bCrucibleSendStatsEndOfSession = 0x33c; // bool
	constexpr auto bCrucibleSendStatsEndOfSessionOnShutdownEvent = 0x33d; // bool
	constexpr auto CrucibleMinValidStatScoreMilliseconds = 0x340; // int32_t
	constexpr auto CrucibleLeaderboardFriendQueryMaxSize = 0x344; // int32_t
	constexpr auto bCrucibleLeaderboardEnableDisplayNameIcons = 0x348; // bool
	constexpr auto bEnableFortLeaderboardHelperDisplayNonPlatformNames = 0x349; // bool
	constexpr auto bEnableFortLeaderboardHelperConsolePlatformNameSearch = 0x34a; // bool
	constexpr auto bEnableFortLeaderboardHelperConsoleDisplayNameFallback = 0x34b; // bool
	constexpr auto bDisableCollectionStatsUpload = 0x34c; // bool
	constexpr auto bDisableCollectionStatsDownload = 0x34d; // bool
	constexpr auto CollectionStatsFriendQueryMaxSize = 0x350; // int32_t
	constexpr auto bSoundIndicatorsAlwaysEnabled = 0x354; // bool
	constexpr auto bSoundIndicatorsEnabledForTeammates = 0x355; // bool
	constexpr auto bSoundIndicatorsPooled = 0x356; // bool
	constexpr auto SoundIndicatorMaxNum = 0x358; // int32_t
	constexpr auto TencentDefaultBookStatSeason = 0x35c; // int32_t
	constexpr auto bEquipFirstWeaponOnMobile = 0x360; // bool
	constexpr auto bClearLastFireOnAbilityFailed = 0x361; // bool
	constexpr auto bUsePrototypeSubGameLoadingScreen = 0x362; // bool
	constexpr auto bForcePrototypeLoadingScreenScaling = 0x363; // bool
	constexpr auto ShowEliminationDistanceOver = 0x364; // float
	constexpr auto FadeOutTeamIndicatorsAfter = 0x368; // float
	constexpr auto FadeOutNPCEnemyIndicatorsAfter = 0x36c; // float
	constexpr auto FadeOutEnemyIndicatorsAfter = 0x370; // float
	constexpr auto FadeOutWorldItemIndicatorsAfter = 0x374; // float
	constexpr auto FadeOutHardCoreBeaconIndicatorsAfter = 0x378; // float
	constexpr auto MapIndicatorTouchClearDistance = 0x37c; // float
	constexpr auto MapIndicatorOffset = 0x380; // FVector2D
	constexpr auto AthenaMapZoomMax = 0x390; // float
	constexpr auto BacchusMapIndicatorSizeMultiplier = 0x394; // float
	constexpr auto AthenaMapPanSpeedMultiplier = 0x398; // float
	constexpr auto AthenaMapZoomSpeedMultiplier = 0x39c; // float
	constexpr auto bAthenaMapMapIconsFlowEnabled = 0x3a0; // bool
	constexpr auto WaitTimeBeforeShowingNewModeViolator = 0x3a4; // float
	constexpr auto FriendCodeShareWarningMessage = 0x3a8; // FRuntimeOptionLocalizableString
	constexpr auto PlatformPlayAllowedErrorMessage = 0x3b8; // FRuntimeOptionLocalizableString
	constexpr auto bOnlyShareURLWithNoMessage = 0x3c8; // bool
	constexpr auto bExcludeURLInShareMessage = 0x3c9; // bool
	constexpr auto bShowCreateAccountOnRedirect = 0x3ca; // bool
	constexpr auto bEnableContextTutorial = 0x3cb; // bool
	constexpr auto bDebugForcePlayerSurveys = 0x3cc; // bool
	constexpr auto bFeedbackTextShown = 0x3cd; // bool
	constexpr auto bEnableBadMatchPopup = 0x3ce; // bool
	constexpr auto BadMatchIncidentThreshold = 0x3d0; // int32_t
	constexpr auto BadConnectionUpdateTime = 0x3d4; // float
	constexpr auto BadMatchPopupRecallInterval = 0x3d8; // int32_t
	constexpr auto AthenaCodeOfConductURL = 0x3e0; // FString
	constexpr auto KairosCommunityRulesURL = 0x3f0; // FString
	constexpr auto BacchusFriendCodeShareURL = 0x400; // FString
	constexpr auto CreateAccountUrl = 0x410; // FString
	constexpr auto GooglePlayRatingURL = 0x420; // FString
	constexpr auto LinkAccountURL = 0x430; // FString
	constexpr auto AccountMergeMoreInfoURL = 0x440; // FString
	constexpr auto bEnableFactionTechScreen = 0x450; // bool
	constexpr auto bRequireFactionChoiceOnInfiltrationPlay = 0x451; // bool
	constexpr auto TotalPlayerTechLevelsToShow = 0x454; // int32_t
	constexpr auto SupportURL = 0x458; // FString
	constexpr auto CheckStatusURL = 0x468; // FString
	constexpr auto iOSAppStoreURL = 0x478; // FString
	constexpr auto TurnOnMfaURL = 0x488; // FString
	constexpr auto ArenaResetTime = 0x498; // FString
	constexpr auto ListOfCreatorsURL = 0x4a8; // FString
	constexpr auto bAllowCodeRedemptionInSubgameSelect = 0x4b8; // bool
	constexpr auto bEnableAutomaticMOTD = 0x4b9; // bool
	constexpr auto bShowMOTDInLobby = 0x4ba; // bool
	constexpr auto bMOTDSameNewsForCreative = 0x4bb; // bool
	constexpr auto bSkipSubgameSelect = 0x4bc; // bool
	constexpr auto BRUpdatesURLMode = 0x4bd; // ENewsExternalURLMode
	constexpr auto BRUpdatesURL = 0x4c0; // FString
	constexpr auto STWUpdatesURLMode = 0x4d0; // ENewsExternalURLMode
	constexpr auto STWUpdatesURL = 0x4d8; // FString
	constexpr auto GiftingInfoURL = 0x4e8; // FString
	constexpr auto PrivacyPolicyURL = 0x4f8; // FString
	constexpr auto FanContentPolicyURL = 0x508; // FString
	constexpr auto TermsOfServiceURL = 0x518; // FString
	constexpr auto GuardianChallengeLengthDays = 0x528; // int32_t
	constexpr auto bAgeGateFlowEnabled = 0x52c; // bool
	constexpr auto bEnableContentControls = 0x52d; // bool
	constexpr auto ContentControlsMoreInfoURL = 0x530; // FString
	constexpr auto ContentControlsForgotPinURL = 0x540; // FString
	constexpr auto ContentControlsVerifyEmailURL = 0x550; // FString
	constexpr auto bEnableContentControlsPlaytimeReporting = 0x560; // bool
	constexpr auto bEnableContentControlsPurchaseReporting = 0x561; // bool
	constexpr auto bContentControlsViewUGCEnabled = 0x562; // bool
	constexpr auto MaxNumItemsInCreativeChests = 0x564; // int32_t
	constexpr auto MaxStackSizeForCreativeResources = 0x568; // int32_t
	constexpr auto MaxStreamerMatchmakingDelay = 0x56c; // int32_t
	constexpr auto bEnableHiddenMatchmakingDelay = 0x570; // bool
	constexpr auto TencentStoreDetailsURL = 0x578; // FString
	constexpr auto PSALoadingScreenPercentChance = 0x588; // int32_t
	constexpr auto StwDownloadLauncherOption = 0x590; // FString
	constexpr auto OverrideDefaultBonusXpEventTitleString = 0x5a0; // FRuntimeOptionLocalizableString
	constexpr auto XBLDisableText = 0x5b0; // FRuntimeOptionLocalizableString
	constexpr auto PSNDisableText = 0x5c0; // FRuntimeOptionLocalizableString
	constexpr auto SwitchDisableText = 0x5d0; // FRuntimeOptionLocalizableString
	constexpr auto ReviewPromptCriteria = 0x5e0; // FRuntimeOptionReviewPromptCriteria
	constexpr auto bDisableAllKnobs = 0x5f4; // bool
	constexpr auto bDisableAllGameplayMessages = 0x5f5; // bool
	constexpr auto bDisableMatchmakingKnobs = 0x5f6; // bool
	constexpr auto bDisableMinigameKnobs = 0x5f7; // bool
	constexpr auto bDisableGameOptionKnobs = 0x5f8; // bool
	constexpr auto bDisableAffiliateFeature = 0x5f9; // bool
	constexpr auto bUseHotfixedAffiliateNamesArray = 0x5fa; // bool
	constexpr auto bEnablePrerollLlamas = 0x5fb; // bool
	constexpr auto bEnableSubregionNetworkAccelerators = 0x5fc; // bool
	constexpr auto DisabledNetworkAcceleratedSubregions = 0x600; // TArray<FString>
	constexpr auto AdvertisedNetworkAcceleratedSubregions = 0x610; // TArray<FString>
	constexpr auto bShowAccountItemWarningForVaultThreshold = 0x620; // bool
	constexpr auto DaysBetweenAccountItemWarnings = 0x624; // int32_t
	constexpr auto VaultLimitThresholdForAccountItemWarning = 0x628; // float
	constexpr auto bShowAccountItemWarningForItemCount = 0x62c; // bool
	constexpr auto AlwaysWarnAccountItemCount = 0x630; // int32_t
	constexpr auto DisabledFrontendNavigationTabs = 0x638; // TArray<FRuntimeOptionTabStateInfo>
	constexpr auto DisabledTabsForOutOfSeason = 0x648; // TArray<FRuntimeOptionTabStateInfo>
	constexpr auto TournamentDisabledFrontendNavigationTabs = 0x658; // TArray<FRuntimeOptionTabStateInfo>
	constexpr auto DisabledMatchmakingKnobs = 0x668; // TArray<FString>
	constexpr auto HiddenMatchmakingKnobs = 0x678; // TArray<FString>
	constexpr auto DisabledGameplayMessages = 0x688; // TArray<FRuntimeOptionDisabledGameplayMessage>
	constexpr auto NumGameplayMessageChannels = 0x698; // int32_t
	constexpr auto AffiliateNames = 0x6a0; // TArray<FString>
	constexpr auto bShowMOTDNews = 0x6b0; // bool
	constexpr auto DPlusVBuckPromoStart = 0x6b8; // FDateTime
	constexpr auto DPlusVBuckPromoEnd = 0x6c0; // FDateTime
	constexpr auto CountryCodesForDPlusVBuckOverride = 0x6c8; // TArray<FString>
	constexpr auto RockyRidgeStart = 0x6d8; // FDateTime
	constexpr auto SoloTournamentScoreThresholds = 0x6e0; // TArray<FRuntimeOptionTournamentScoreThreshold>
	constexpr auto DuoTournamentScoreThresholds = 0x6f0; // TArray<FRuntimeOptionTournamentScoreThreshold>
	constexpr auto SquadsTournamentScoreThresholds = 0x700; // TArray<FRuntimeOptionTournamentScoreThreshold>
	constexpr auto PickingInteractDistance = 0x710; // float
	constexpr auto PickingHighlightMovementUpdateDist = 0x714; // float
	constexpr auto PickingHighlightUpdateTime = 0x718; // float
	constexpr auto PickingTime = 0x71c; // float
	constexpr auto AutoPickingInteractDistanceFactor = 0x720; // float
	constexpr auto AutoOpenDoorInputMagnitude = 0x724; // float
	constexpr auto AutoOpenDoorTraceDistance = 0x728; // float
	constexpr auto bAutofireEnabled = 0x72c; // bool
	constexpr auto bShowXPWidgets = 0x72d; // bool
	constexpr auto bShowAccoladesListWidget = 0x72e; // bool
	constexpr auto bEnableInGameMatchmaking = 0x72f; // bool
	constexpr auto bUseNewFlowIngameMatchmaking = 0x730; // bool
	constexpr auto bDisableAccoladesButton = 0x731; // bool
	constexpr auto bToggleIGMAnalytics = 0x732; // bool
	constexpr auto WhitelistedInGameMatchmakingRegions = 0x738; // TArray<FString>
	constexpr auto WhitelistedInGameMatchmakingSubRegions = 0x748; // TArray<FString>
	constexpr auto BlacklistedInGameMatchmakingSubRegions = 0x758; // TArray<FString>
	constexpr auto BlacklistedInGameMatchmakingPlaylists = 0x768; // TArray<FName>
	constexpr auto SubRegionWhitelistedInGameMatchmakingPlaylists = 0x778; // TArray<FName>
	constexpr auto bAllowPreserveSquad = 0x788; // bool
	constexpr auto bAllowPreserveSquadMemberVoting = 0x789; // bool
	constexpr auto bKeepPlayingTogether = 0x78a; // bool
	constexpr auto bPartyRift = 0x78b; // bool
	constexpr auto bAutofireUsesComponent = 0x78c; // bool
	constexpr auto bAutofireUsesAutoaimTarget = 0x78d; // bool
	constexpr auto bHoldToFireOnAutofireTarget = 0x78e; // bool
	constexpr auto DefaultAutofireRange = 0x790; // float
	constexpr auto AutofireExtraTrackingRange = 0x794; // float
	constexpr auto bServerNetDriverAnalytics = 0x798; // bool
	constexpr auto bClientNetDriverAnalytics = 0x799; // bool
	constexpr auto bDisableReplicationGraph = 0x79a; // bool
	constexpr auto BRServerMaxTickRate = 0x79c; // float
	constexpr auto DoubleTapOnEndTouchTime = 0x7a0; // float
	constexpr auto DoubleTapOnStartTouchTime = 0x7a4; // float
	constexpr auto DoubleTapDistance = 0x7a8; // float
	constexpr auto SingleTapDistance = 0x7ac; // float
	constexpr auto TouchMoveStickRadius = 0x7b0; // float
	constexpr auto TouchMoveStickRadiusTargeting = 0x7b4; // float
	constexpr auto TouchMoveStickRadiusScoped = 0x7b8; // float
	constexpr auto TouchMoveStickRadiusDriving = 0x7bc; // float
	constexpr auto AutorunLockZoneOffset = 0x7c0; // float
	constexpr auto AutorunLockZoneDelay = 0x7c4; // float
	constexpr auto MoveOriginResetTime = 0x7c8; // float
	constexpr auto MoveOriginResetDistance = 0x7cc; // float
	constexpr auto MoveOriginFollowDistance = 0x7d0; // float
	constexpr auto bDisableTouchLookInertia = 0x7d4; // bool
	constexpr auto RotateInertiaMultiplier = 0x7d8; // float
	constexpr auto RotateInertiaMinTime = 0x7dc; // float
	constexpr auto RotateInertiaMinLength = 0x7e0; // float
	constexpr auto RotateInertiaMinMagnitude = 0x7e4; // float
	constexpr auto RotateInertiaNumAveragedTouches = 0x7e8; // int32_t
	constexpr auto bTouchQuickbarTapToLockEnabled = 0x7ec; // bool
	constexpr auto bTouchInteractInUIAvailable = 0x7ed; // bool
	constexpr auto bTouchInteractInUIForced = 0x7ee; // bool
	constexpr auto bEnableHUDLayoutTool = 0x7ef; // bool
	constexpr auto bEnableHUDLayoutCloudSave = 0x7f0; // bool
	constexpr auto bEnableHUDLayoutToolPanZoom = 0x7f1; // bool
	constexpr auto bEnableMobileHUDV2 = 0x7f2; // bool
	constexpr auto bEnableHUDLayoutToolV2 = 0x7f3; // bool
	constexpr auto bEnableHUDLayoutToolV2_GridSnap = 0x7f4; // bool
	constexpr auto bEnableGFNSettingEditCondition = 0x7f5; // bool
	constexpr auto AthenaExternalRichPresenceDelayTimeSeconds = 0x7f8; // float
	constexpr auto bEnableExternalPresenceAthenaPlayersRemain = 0x7fc; // bool
	constexpr auto MinimumTimeBetweenConsolePresenceUpdates = 0x800; // float
	constexpr auto MinimumTimeBetweenMCPPresenceUpdates = 0x804; // float
	constexpr auto TimeBetweenStorePatchCheckRequestsSeconds = 0x808; // int32_t
	constexpr auto bInviteUIDisabled = 0x80c; // bool
	constexpr auto bEnableInGameMipsAnalyticsReporting = 0x80d; // bool
	constexpr auto SecondsBetweenTextureStatsGathering = 0x810; // float
	constexpr auto bEnableMipsCapExperiment = 0x814; // bool
	constexpr auto CurrentMipsCapExperimentVersion = 0x818; // int32_t
	constexpr auto bEnableQualitySelectionScreen = 0x81c; // bool
	constexpr auto bEnableQualityLevelSelectScreenTimer = 0x81d; // bool
	constexpr auto bEnableDownloadAnalyticsReporting = 0x81e; // bool
	constexpr auto bEnableDownloadHeartbeat = 0x81f; // bool
	constexpr auto DownloadHeartbeatIntervalInSeconds = 0x820; // float
	constexpr auto bEnableFriendsListButton = 0x824; // bool
	constexpr auto bForceDisableCrossplatformSquadFill = 0x825; // bool
	constexpr auto bRequireCrossplayOptIn = 0x826; // bool
	constexpr auto bUseAccountCrossplayPermissions = 0x827; // bool
	constexpr auto bSingleCrossplayOptInPrompt = 0x828; // bool
	constexpr auto bImmediatelyDisplayCrossplayOptIn_STW = 0x829; // bool
	constexpr auto bImmediatelyDisplayCrossplayOptIn_BR = 0x82a; // bool
	constexpr auto bCrossplayOptInByDefault = 0x82b; // bool
	constexpr auto bShowIconForSamePlatformPlayers = 0x82c; // bool
	constexpr auto bObscuredPlatformIcons = 0x82d; // bool
	constexpr auto bEnableChatWidget = 0x82e; // bool
	constexpr auto bShowVoiceChatSettings = 0x82f; // bool
	constexpr auto bShowMultipleVoiceChatSettings = 0x830; // bool
	constexpr auto bUseClientSettingsForControllerImage = 0x831; // bool
	constexpr auto bPartyInProgress = 0x832; // bool
	constexpr auto bEnableSidebar = 0x833; // bool
	constexpr auto bEnableHotTamaleWithVeggies = 0x834; // bool
	constexpr auto bEnableHotTamaleWithTofu = 0x835; // bool
	constexpr auto bEnableHotTamale = 0x836; // bool
	constexpr auto bEnableHotTamaleWithCheese = 0x837; // bool
	constexpr auto bEnableHotTamaleWithOnions = 0x838; // bool
	constexpr auto bEnableHotTamaleWithRice = 0x839; // bool
	constexpr auto HotTamaleWithVeggiesEditorTooltipDurationSeconds = 0x83c; // int32_t
	constexpr auto HotTamaleWithVeggiesTabTooltipDurationSeconds = 0x840; // int32_t
	constexpr auto HotTamaleWithVeggiesStringTable = 0x844; // FName
	constexpr auto HotTamaleWithVeggiesReplaceOperationIntermediateDelay = 0x848; // float
	constexpr auto bShouldAthenaQueryRecentPlayers = 0x84c; // bool
	constexpr auto bEnableRecentPlayerList = 0x84d; // bool
	constexpr auto bEnableSuggestedFriendList = 0x84e; // bool
	constexpr auto bEnableBlockedList = 0x84f; // bool
	constexpr auto bEnableFriendListInGame = 0x850; // bool
	constexpr auto bPushJIPInfoToPlatformPresence = 0x851; // bool
	constexpr auto bEnableStWInZonePrivacyChange = 0x852; // bool
	constexpr auto bEnableSitoutOption = 0x853; // bool
	constexpr auto bEnableSitoutOption_STW = 0x854; // bool
	constexpr auto bEnableSocialPanelLeaveParty = 0x855; // bool
	constexpr auto bEnableMainMenuLeaveParty = 0x856; // bool
	constexpr auto MinUSSNameLength = 0x858; // int32_t
	constexpr auto bEnableNickname = 0x85c; // bool
	constexpr auto bAllowNicknameEmoji = 0x85d; // bool
	constexpr auto NicknameEmojiBlacklist = 0x860; // TArray<FString>
	constexpr auto bNicknameInFront = 0x870; // bool
	constexpr auto bShowAccountBoosts = 0x871; // bool
	constexpr auto bShowCustomerSupport = 0x872; // bool
	constexpr auto bEnableChannelChangePopup = 0x873; // bool
	constexpr auto bEnableVoiceSpeakerWidget = 0x874; // bool
	constexpr auto bEnableSpeakerWidgetZonePerfMode = 0x875; // bool
	constexpr auto bShowVoiceIndicatorsWhileLoading = 0x876; // bool
	constexpr auto bEnableVoiceChannelSelectionUI = 0x877; // bool
	constexpr auto bEnableGlobalChat = 0x878; // bool
	constexpr auto bEnableAllTabInChat = 0x879; // bool
	constexpr auto bEnableEULA = 0x87a; // bool
	constexpr auto bEnableEndOfZoneCinematic = 0x87b; // bool
	constexpr auto bEnableOnboardingCinematics = 0x87c; // bool
	constexpr auto VideoDisplayDataBlacklist = 0x880; // TArray<FName>
	constexpr auto bShowFounderBannerIcons = 0x890; // bool
	constexpr auto bShowCurrentRegionInLobby = 0x891; // bool
	constexpr auto bEnableFoundersDailyRewards = 0x892; // bool
	constexpr auto bEnableTwitchIntegration = 0x893; // bool
	constexpr auto bEnableMatchmakingRegionSetting = 0x894; // bool
	constexpr auto bEnableReadyupButtonWhileSittingout = 0x895; // bool
	constexpr auto bEnableEulaRequiredTournaments = 0x896; // bool
	constexpr auto bEnableMFARequiredTournaments = 0x897; // bool
	constexpr auto bAllTournamentsRequireMFA = 0x898; // bool
	constexpr auto bSpectatorBroadcasterSkipMfaEulaCheck = 0x899; // bool
	constexpr auto bEnableNaviationToChat = 0x89a; // bool
	constexpr auto bEnableLanguageSetting = 0x89b; // bool
	constexpr auto bEnableFriendCodeSetting = 0x89c; // bool
	constexpr auto bEnableEarlyAccessLoadingScreenBanner = 0x89d; // bool
	constexpr auto bClientIgnoreIsTournamentCheck = 0x89e; // bool
	constexpr auto CampaignMatchEndRetryCount = 0x8a0; // int32_t
	constexpr auto StWTutorialDownloadAttempts = 0x8a4; // int32_t
	constexpr auto bShopPurchaseConfirmation = 0x8a8; // bool
	constexpr auto bShopPurchaseConfirmationJapanPS4 = 0x8a9; // bool
	constexpr auto bToyMessagingEnabled = 0x8aa; // bool
	constexpr auto bAllowAccessToAllEmotesForTesting = 0x8ab; // bool
	constexpr auto bAllowAccessToStWHeroOutfitsAndBackblingForTesting = 0x8ac; // bool
	constexpr auto bEnableCosmeticItemShopInSTW = 0x8ad; // bool
	constexpr auto bRequireEmoteOwnershipInPIE = 0x8ae; // bool
	constexpr auto bEnableSTWLootDrops = 0x8af; // bool
	constexpr auto bEnableSTWContainerItemCacheDrops = 0x8b0; // bool
	constexpr auto bEnableSTWEnemyItemCacheDrops = 0x8b1; // bool
	constexpr auto bEnableHoldToPickupUI = 0x8b2; // bool
	constexpr auto bSkipTrailerMovie = 0x8b3; // bool
	constexpr auto bAlwaysPlayTrailerMovie = 0x8b4; // bool
	constexpr auto bHideUnaffordableMtxPurchases = 0x8b5; // bool
	constexpr auto bDisableCTAInMtxStoreSelection = 0x8b6; // bool
	constexpr auto bAthenaFrontEndUsePushPopMTXStore = 0x8b7; // bool
	constexpr auto bHidePlusOnVbucksButton = 0x8b8; // bool
	constexpr auto bAllowXboxStwAccessDuringLiveStoreOutage = 0x8b9; // bool
	constexpr auto bShowReplayTrailerButton_Athena = 0x8ba; // bool
	constexpr auto bEnableAlterationModification = 0x8bb; // bool
	constexpr auto bEnableSchematicRarityUpgrade = 0x8bc; // bool
	constexpr auto bEnableMissionActivationVote = 0x8bd; // bool
	constexpr auto bEnableLtmRetrieveTheData = 0x8be; // bool
	constexpr auto bEnableUpgradesVideos = 0x8bf; // bool
	constexpr auto bEnableExternalRichPresence = 0x8c0; // bool
	constexpr auto bShowEnableMFAModalAtStartupAthena = 0x8c1; // bool
	constexpr auto bShowEnableMFAModalAtStartupSTW = 0x8c2; // bool
	constexpr auto bEnableAIBuildingHitFX = 0x8c3; // bool
	constexpr auto LevelToStartShowingMFAModal = 0x8c4; // int32_t
	constexpr auto DaysBetweenEnableMFAModalPrompts = 0x8c8; // int32_t
	constexpr auto DelayGiftButtonWhenMFANotEnabledSeconds = 0x8cc; // float
	constexpr auto LevelToAutoOpenBattlePassOnNewSeason = 0x8d0; // int32_t
	constexpr auto ForceSeasonRefreshCounter = 0x8d4; // int32_t
	constexpr auto ForceVideoRefreshCounter = 0x8d8; // int32_t
	constexpr auto bForceBattlePassPreview = 0x8dc; // bool
	constexpr auto bCanShowSTWUpsellInBR = 0x8dd; // bool
	constexpr auto bShowLeaderboardPrivacySettings = 0x8de; // bool
	constexpr auto bEnableServerScoreboardLog = 0x8df; // bool
	constexpr auto bEnableAsyncScoreboardFlush = 0x8e0; // bool
	constexpr auto bEnableInputBasedMatchmaking = 0x8e1; // bool
	constexpr auto bUsingAlternateMatchmakingModel = 0x8e2; // bool
	constexpr auto bNotifyBlockedInput = 0x8e3; // bool
	constexpr auto NumberOfFramesBeforeWarnInputBlocked = 0x8e4; // int32_t
	constexpr auto bDisableVideoOptions = 0x8e8; // bool
	constexpr auto bEnableBattlePassWatchVideoActionOnCell = 0x8e9; // bool
	constexpr auto bEnableBattlePassReplayCinematicAction = 0x8ea; // bool
	constexpr auto bEnableCareerReplayCinematicAction = 0x8eb; // bool
	constexpr auto RadioInputDebounceSeconds = 0x8ec; // float
	constexpr auto RadioTuningRetryTime = 0x8f0; // float
	constexpr auto RadioTuningRetryCount = 0x8f4; // int32_t
	constexpr auto bEnableBattlePassSocialFriends = 0x8f8; // bool
	constexpr auto bEnableBattlePassSocialFriendsOfDifferentPlatforms = 0x8f9; // bool
	constexpr auto bEnableBattlePassSocialFriendsServerSide = 0x8fa; // bool
	constexpr auto bEnableSimulatedXPForBattlePassSocialFriends = 0x8fb; // bool
	constexpr auto bEnableBattlePassPreviewOnRewardScreen = 0x8fc; // bool
	constexpr auto bEnableHoldToCloseOnRewardsScreen = 0x8fd; // bool
	constexpr auto BattleStarsNeededToShowRewardPreview = 0x900; // int32_t
	constexpr auto ShowBattlePassTracker = 0x904; // int32_t
	constexpr auto bDisplayBattlePassRewardsIndividually = 0x908; // bool
	constexpr auto bDisplayOnlyBattlePassFAQ = 0x909; // bool
	constexpr auto bEnableBPVideo = 0x90a; // bool
	constexpr auto bEnableUEKGameSelect = 0x90b; // bool
	constexpr auto bCompletelyDisableUEKGameSelect = 0x90c; // bool
	constexpr auto bAlwaysPlayBPVideo = 0x90d; // bool
	constexpr auto bDisableGRL = 0x90e; // bool
	constexpr auto bShowBPPreviewVideo = 0x90f; // bool
	constexpr auto bShowBPTrack_TimeLeft = 0x910; // bool
	constexpr auto bDisplayAllCharactersOnBattlePassPreviewScreen = 0x911; // bool
	constexpr auto bRefreshBattlePassCatalogOnSeasonDataLoaded = 0x912; // bool
	constexpr auto bEnableChallengeHolidayVideo = 0x913; // bool
	constexpr auto bEnableCareerScreenVideo = 0x914; // bool
	constexpr auto bEnableSpecialEventVideo = 0x915; // bool
	constexpr auto bEnableCNVideo = 0x916; // bool
	constexpr auto bEnableWinterfestPurchaseButton = 0x917; // bool
	constexpr auto bEnableWinterfestGiftButton = 0x918; // bool
	constexpr auto bForceWinterfestInfoModalButtonVisible = 0x919; // bool
	constexpr auto NumViewsToDisplayWinterfestInfoModalButton = 0x91c; // int32_t
	constexpr auto bCheckForPatchUpdateOnMatchmakingPlayClick = 0x920; // bool
	constexpr auto bCheckForPatchUpdateOnItemShopActivate = 0x921; // bool
	constexpr auto HiddenSettings = 0x928; // TArray<FString>
	constexpr auto bDisplayPlayerReportingRoles = 0x938; // bool
	constexpr auto bDisplayRelevantPlayersForPlayerReporting = 0x939; // bool
	constexpr auto bPreventMultipleReportsOfSamePlayer = 0x93a; // bool
	constexpr auto bAllowReportingFeaturedIslands = 0x93b; // bool
	constexpr auto bForceGamepadPlaytest = 0x93c; // bool
	constexpr auto bEnableNewFireModeSelection = 0x93d; // bool
	constexpr auto bEnableHUDPresetSelection = 0x93e; // bool
	constexpr auto bEnableAddFriendWhileSpectating = 0x93f; // bool
	constexpr auto bEnableFriendLink = 0x940; // bool
	constexpr auto PlatformChatToastDisplaySeconds = 0x944; // float
	constexpr auto HPMicrophoneToastDisplaySeconds = 0x948; // float
	constexpr auto FriendLinkURL = 0x950; // FString
	constexpr auto bAllowForceTouchFire = 0x960; // bool
	constexpr auto VehicleSessionMinTimeUsed = 0x964; // float
	constexpr auto RebootChipExpirationTime = 0x968; // float
	constexpr auto RebootDirectiveDisplayTime = 0x96c; // float
	constexpr auto bDonutIdleGameEnabled = 0x970; // bool
	constexpr auto bRebootEnableInventoryDisplay = 0x971; // bool
	constexpr auto bUseHordeStormShield = 0x972; // bool
	constexpr auto HordeStormShieldStartingRadiusOverride = 0x974; // float
	constexpr auto HordeStormShieldEndingRadiusOverride = 0x978; // float
	constexpr auto HordeStormShieldBreatherRadiusOverride = 0x97c; // float
	constexpr auto bUseHordeRespawnAtLastPawnLocation = 0x980; // bool
	constexpr auto bAllowHordePlayerTriggeredRespawn = 0x981; // bool
	constexpr auto MaxQuickScopeAimAssistPulls = 0x984; // int32_t
	constexpr auto MaxQuickScopeAimAssistPullWatchTime = 0x988; // float
	constexpr auto bShouldDisablePickaxeFXFrontendPreview = 0x98c; // bool
	constexpr auto bRegisterPawnsWithSignificanceManagerInFrontEnd = 0x98d; // bool
	constexpr auto bHideExclusiveCosmeticsFromOtherPlatformsOnPS4 = 0x98e; // bool
	constexpr auto bHideExclusiveCosmeticsFromOtherPlatformsOnXB1 = 0x98f; // bool
	constexpr auto bHideExclusiveCosmeticsFromOtherPlatformsOnSwitch = 0x990; // bool
	constexpr auto bHideExclusiveCosmeticsFromOtherPlatformsOnPS4_STWOnly = 0x991; // bool
	constexpr auto bHideExclusiveCosmeticsFromOtherPlatformsOnXB1_STWOnly = 0x992; // bool
	constexpr auto bHideExclusiveCosmeticsFromOtherPlatformsOnSwitch_STWOnly = 0x993; // bool
	constexpr auto bSimpleHeistVanEntrance = 0x994; // bool
	constexpr auto LobbyGenericLinkButtonURL = 0x998; // FString
	constexpr auto bEnableLobbyGenericLinkButton = 0x9a8; // bool
	constexpr auto LobbyGenericLinkButtonText = 0x9b0; // FRuntimeOptionLocalizableString
	constexpr auto HighlightClipRewindTimeInSeconds = 0x9c0; // int32_t
	constexpr auto bEnableAntiTaxi = 0x9c4; // bool
	constexpr auto StopFlyingParachuteCooldownTime = 0x9c8; // float
	constexpr auto FlushLoadingScreenRefreshSeconds = 0x9cc; // float
	constexpr auto bEnableVehicleSpawnMissionInStw = 0x9d0; // bool
	constexpr auto bEnableDownTierCraftingInStw = 0x9d1; // bool
	constexpr auto bShowBugReportsButton = 0x9d2; // bool
	constexpr auto bShowCommentReportsButton = 0x9d3; // bool
	constexpr auto bShowContentReportsButton = 0x9d4; // bool
	constexpr auto bEnableItemRefundingInStw = 0x9d5; // bool
	constexpr auto bDisableCareerStatsButton = 0x9d6; // bool
	constexpr auto bDisableCareerLeaderboardButton = 0x9d7; // bool
	constexpr auto bDisableCareerStatsPagePlatformProfileButton = 0x9d8; // bool
	constexpr auto bUsePlatformSpecificTextOnCareerPage = 0x9d9; // bool
	constexpr auto bDisableViewOtherProfilesFromCompLeaderboards = 0x9da; // bool
	constexpr auto bShowOtherPlayerStatsOnCareerPage = 0x9db; // bool
	constexpr auto bShowFeatsOnClient = 0x9dc; // bool
	constexpr auto bShowHardcoreModifiers = 0x9dd; // bool
	constexpr auto InputMethodThrashingLimit = 0x9e0; // int32_t
	constexpr auto InputMethodThrashingWindowInSeconds = 0x9e4; // float
	constexpr auto bEnableLogUploadForTokenHolders = 0x9e8; // bool
	constexpr auto TokenHolderLogTailSizeKb = 0x9ec; // float
	constexpr auto bAllowPartialBackgroundAudio = 0x9f0; // bool
	constexpr auto bDuplicateRemovedPlayersOnClient = 0x9f1; // bool
	constexpr auto PlayerMarkerConfig = 0x9f4; // FPlayerMarkerConfig
	constexpr auto bIsCreativeMultiSelectEnabled = 0xa50; // bool
	constexpr auto bEnableUserProfilePictures = 0xa51; // bool
	constexpr auto bEnableChannelsServiceLoadTesting = 0xa52; // bool
	constexpr auto bAllowMimicingEmotes = 0xa53; // bool
	constexpr auto bAllowMimicingEmotesInFrontend = 0xa54; // bool
	constexpr auto bAllowAsyncTooltipLoading = 0xa55; // bool
	constexpr auto bAllowListViewAsyncLoading = 0xa56; // bool
	constexpr auto bEnableBackToPartyHubButton = 0xa57; // bool
	constexpr auto bEnableMobileAvailableLootingListView = 0xa58; // bool
	constexpr auto bEnableDisambiguateLoading = 0xa59; // bool
	constexpr auto NumDaysToSnoozeGooglePlayRating = 0xa5c; // int32_t
	constexpr auto NumDaysAllowedToDelayGoogleRating = 0xa60; // int32_t
	constexpr auto bEnableMobileInGameAppRating = 0xa64; // bool
	constexpr auto PreloadRevision = 0xa68; // int32_t
	constexpr auto bEnableLiveStoreTilePreviews = 0xa6c; // bool
	constexpr auto bUseLegacyItemShopOfferDetails = 0xa6d; // bool
	constexpr auto bEnableLiveStoreTilePreviews_InGame = 0xa6e; // bool
	constexpr auto bAllowedToEnableUIGlobalInvalidation = 0xa6f; // bool
	constexpr auto bEnableAutoMulchInStW = 0xa70; // bool
	constexpr auto bAllStWMoonbeamHUD = 0xa71; // bool
	constexpr auto MaxCharactersInTextEntry = 0xa74; // int32_t
	constexpr auto IllegalIslandTitleCharacters = 0xa78; // TArray<FString>
	constexpr auto IllegalIslandTitleChars = 0xa88; // TArray<int32_t>
	constexpr auto bEnableCreativeUserTextSanitizationWithToxicityService = 0xa98; // bool
	constexpr auto bEnableCreativeUserTextSanitizationWithPlatformSanitizer = 0xa99; // bool
	constexpr auto bEnableCreativeUserTextSanitizationWithChatSanitizer = 0xa9a; // bool
	constexpr auto bUseToxicityAsCreativeMainTextSanitizer = 0xa9b; // bool
	constexpr auto bUseLegacyAsyncSanitizationLogicInCreative = 0xa9c; // bool
	constexpr auto KeepPlayingTogetherDuration = 0xaa0; // float
	constexpr auto KeepPlayingTogetherTickFrequency = 0xaa4; // float
	constexpr auto bUseLegacyFootsteps = 0xaa8; // bool
	constexpr auto PawnVisibilityDurationOverrides = 0xab0; // TMap<FGameplayTag, float>
	constexpr auto HotfixVersionId = 0xb00; // int32_t
	constexpr auto bCanTurboBuildOutsideBuildModeWithBuildTool = 0xb04; // bool
	constexpr auto MaxBuildingIntoTerrainIntersectionPercentage = 0xb08; // float
	constexpr auto bUsingBuildingExtraPiece = 0xb0c; // bool
	constexpr auto AnalyticsBuildingWallTooLowLocations = 0xb10; // int32_t
	constexpr auto bDisableClientEngagementsAnalytics = 0xb14; // bool
	constexpr auto AnalyticsClientEngagementsTimeoutSeconds = 0xb18; // float
	constexpr auto AnalyticsClientEngagementsMaxSendPerMinute = 0xb1c; // int32_t
	constexpr auto AnalyticsClientEngagementsMaxSendOnCleanup = 0xb20; // int32_t
	constexpr auto bAnalyticsClientEngagementsRequireTimeToReturnFireToSend = 0xb24; // bool
	constexpr auto AnalyticsClientEngagementsParticipationPercent = 0xb28; // int32_t
	constexpr auto PublishingEnabledForWhitelistedAccounts = 0xb2c; // bool
	constexpr auto IslandCodeLinkMnemonicExampleText = 0xb30; // FString
	constexpr auto IslandCodeLinkURLText = 0xb40; // FString
	constexpr auto FeaturedCreativeLTMAffiliateName = 0xb50; // FString
	constexpr auto bEnableCreativeLTMSupportCreator = 0xb60; // bool
	constexpr auto CreativePublishCodeURLPrefix = 0xb68; // FString
	constexpr auto bCreativeMinimapRendering = 0xb78; // bool
	constexpr auto bCreativeMinimapCaptureLighting = 0xb79; // bool
	constexpr auto bCreativeMapRenderingInHub = 0xb7a; // bool
	constexpr auto bCreativeMapWaitForVolumeReady = 0xb7b; // bool
	constexpr auto CuratedLinkCodes = 0xb80; // TArray<FString>
	constexpr auto CuratedIslandTemplateCodes = 0xb90; // TArray<FString>
	constexpr auto PlaylistCuratedContent = 0xba0; // TMap<FString, FFortPlaylistCuratedContent>
	constexpr auto bEnableIslandCheckpoints = 0xbf0; // bool
	constexpr auto bEnableIslandLoadNetSafeGuards = 0xbf1; // bool
	constexpr auto PlaylistCuratedHub = 0xbf8; // TMap<FString, FString>
	constexpr auto CreativeIslandImageURLOverrides = 0xc48; // TMap<FString, FString>
	constexpr auto CreativeIslandGeneratedImageURLOverride = 0xc98; // FString
	constexpr auto bLoadingScreenInputPreprocessorEnabled = 0xca8; // bool
	constexpr auto AllowInputTypeFilterForAccessibility = 0xca9; // bool
	constexpr auto AllowLockPrimaryInputMethodToMouseForAccessibility = 0xcaa; // bool
	constexpr auto bEnableLiveStream = 0xcab; // bool
	constexpr auto bEnableLiveStreamCountdown = 0xcac; // bool
	constexpr auto LiveStreamStartTime = 0xcb0; // FDateTime
	constexpr auto bEnableLiveStreamInMatch = 0xcb8; // bool
	constexpr auto bShowLiveStreamInMatchByDefault = 0xcb9; // bool
	constexpr auto bCaptureTeamFrontendFlag = 0xcba; // bool
	constexpr auto VideoHolidayName = 0xcbc; // FName
	constexpr auto VideoBattlePassName = 0xcc0; // FName
	constexpr auto VideoCareerScreenName = 0xcc4; // FName
	constexpr auto VideoChallengeScreenName = 0xcc8; // FName
	constexpr auto VideoFrontEndName = 0xccc; // FName
	constexpr auto FTUESeasonTrailerBoundary = 0xcd0; // float
	constexpr auto VideoDurationOffsetFromTransition = 0xcd4; // float
	constexpr auto VideoDurationOffsetFromEnd = 0xcd8; // float
	constexpr auto SeasonVideoIDs = 0xce0; // FSeasonVideoIDs
	constexpr auto bEnableGCBeforeVideoPlayback = 0xd20; // bool
	constexpr auto EOneVideoLength = 0xd24; // float
	constexpr auto ETwoVideoLength = 0xd28; // float
	constexpr auto MediaCDNDistribution = 0xd30; // TArray<float>
	constexpr auto MaxNumberOfMediaDecoderResources = 0xd40; // int32_t
	constexpr auto VideoEVMap = 0xd48; // TArray<FString>
	constexpr auto MediaPartnerRegionControl = 0xd58; // FString
	constexpr auto LiveStreamPiPMemoryRequired = 0xd68; // int32_t
	constexpr auto ShouldShowLiveStreamPiPInMatchCounter = 0xd70; // int64_t
	constexpr auto bEnableNewPIP = 0xd78; // bool
	constexpr auto bEnableRiskyReelsStreaming = 0xd79; // bool
	constexpr auto bDisableBlastURLStreamSource = 0xd7a; // bool
	constexpr auto StreamPlaylistFetchMethodOrder = 0xd7c; // int32_t
	constexpr auto bHiddenButEnabledLiveStreamInMatch = 0xd80; // bool
	constexpr auto TimedEventsJIPStartDelay = 0xd84; // float
	constexpr auto bInputActionHolding = 0xd88; // bool
	constexpr auto PictureInPictureState = 0xd89; // FPictureInPictureInfo
	constexpr auto bEnableSplineReticulationById = 0xd8c; // bool
	constexpr auto bUseSingleHUDUpdatePerFrame = 0xd8d; // bool
	constexpr auto MinInteractionScoreForFriendToBeConsideredClose = 0xd90; // int64_t
	constexpr auto MinIntervalBetweenInviteToPartyNotificationsInSeconds = 0xd98; // int64_t
	constexpr auto DelayBetweenStartOfPostGameAndShowDelayedNotificationsInSeconds = 0xda0; // float
	constexpr auto PlaylistConditionalFlags = 0xda8; // TArray<FString>
	constexpr auto bIsUserChoiceAllowedForForcedAndroidStore = 0xdb8; // bool
	constexpr auto AndroidStoreCounter = 0xdbc; // int32_t
	constexpr auto bHideCharacterCustomizationNullTile = 0xdc0; // bool
	constexpr auto bEnablePlaylistRequireCrossplay = 0xdc1; // bool
	constexpr auto bRequireCrossplayOptInForFill = 0xdc2; // bool
	constexpr auto bUseConcurrentCrossplayPromptGuard = 0xdc3; // bool
	constexpr auto MaxSquadSize = 0xdc4; // int32_t
	constexpr auto MaxPartySizeCampaign = 0xdc8; // int32_t
	constexpr auto MaxPartySizeAthena = 0xdcc; // int32_t
	constexpr auto bShouldFollowersSendSquadMatchmakingInfo = 0xdd0; // bool
	constexpr auto bAllowAthenaNavSystemForCreative = 0xdd1; // bool
	constexpr auto bEnablePlayerSurveys = 0xdd2; // bool
	constexpr auto bEnablePlayerStatsPrecache = 0xdd3; // bool
	constexpr auto bEnableStreamingReplayViewingUI = 0xdd4; // bool
	constexpr auto LiveReplayDiscoverabilityDelay = 0xdd8; // float
	constexpr auto bSkipPlayingFortniteChecks = 0xddc; // bool
	constexpr auto bReplayBattleMapCameraMode = 0xddd; // bool
	constexpr auto bReplayKeepLocalClientEvents = 0xdde; // bool
	constexpr auto bReplaySampleAthenaPawnMovement = 0xddf; // bool
	constexpr auto ReplaySampleAthenaPawnTimeRate = 0xde0; // float
	constexpr auto ReplaySampleAthenaPawnSpaceRate = 0xde4; // float
	constexpr auto ReplaySampleAthenaPawnUpdateTimeRate = 0xde8; // float
	constexpr auto bDisablePartyJoinInOutpost = 0xdec; // bool
	constexpr auto MashSpecialScores = 0xdf0; // TMap<FString, int32_t>
	constexpr auto bEnableMissedInvitesEntry = 0xe40; // bool
	constexpr auto bOnlyShowMissedInvitesEntryIfMissedInvites = 0xe41; // bool
	constexpr auto bEnableSidekick = 0xe42; // bool
	constexpr auto bEnableSidekickFeature1 = 0xe43; // bool
	constexpr auto bEnableSidekickFOMO = 0xe44; // bool
	constexpr auto bEnableSidekickAvatars = 0xe45; // bool
	constexpr auto bSidekickDisablesScreenRecord = 0xe46; // bool
	constexpr auto bSidekickEnableExitFNButton = 0xe47; // bool
	constexpr auto bEnableSidekickFaceAreaInvalidation = 0xe48; // bool
	constexpr auto bSidekickDisabledByNightNight = 0xe49; // bool
	constexpr auto bSidekickForcesSingleChannelMode = 0xe4a; // bool
	constexpr auto bEnableCampaignBatchLevelingUI = 0xe4b; // bool
	constexpr auto bAllowSimultaneousChannelConnections = 0xe4c; // bool
	constexpr auto bExpandNotListeningChannels = 0xe4d; // bool
	constexpr auto MaxSetFriendSubscriptionSettingsAttempts = 0xe50; // uint32_t
	constexpr auto MaxQueryFriendSubscriptionSettingsAttempts = 0xe54; // uint32_t
	constexpr auto NumDaysBetweenPlayingNotifications = 0xe58; // int32_t
	constexpr auto NumHoursBetweenPlayingNotifications = 0xe5c; // int32_t
	constexpr auto NumMinutesBetweenPlayingNotifications = 0xe60; // int32_t
	constexpr auto bForceAutoChangeMaterialOn = 0xe64; // bool
	constexpr auto bActiveDisplayDeviceTemperature = 0xe65; // bool
	constexpr auto bAllowOfflineInvites = 0xe66; // bool
	constexpr auto bEnablePlatformVoiceLeave = 0xe67; // bool
	constexpr auto bEnablePlatformVoicePrompts = 0xe68; // bool
	constexpr auto bEnableVoiceChatEnablePrompt = 0xe69; // bool
	constexpr auto PlaylistGameVoiceChannelRecommendationDisplayTime = 0xe6c; // float
	constexpr auto bEnablePlaylistGameChannelRecommendationToast = 0xe70; // bool
	constexpr auto bEnableQuickHealing = 0xe71; // bool
	constexpr auto bAllowDeferredPedestalPawnSpawn = 0xe72; // bool
	constexpr auto bRunUnicornOnServer = 0xe73; // bool
	constexpr auto bShowSamsungSensorButtonWarning = 0xe74; // bool
	constexpr auto SamsungSensorButtonGamesPerWarning = 0xe78; // int32_t
	constexpr auto CatabaExclusiveCountryCodes = 0xe80; // TArray<FString>
	constexpr auto bEnableItemShopDynamicBackground = 0xe90; // bool
	constexpr auto EnableCommunityVotingScreen = 0xe91; // bool
	constexpr auto CommunityVotingTutorialVersion = 0xe94; // int32_t
	constexpr auto CommunityVotingRevealDelay = 0xe98; // float
	constexpr auto CommunityVotingTimerRefreshDelay = 0xe9c; // float
	constexpr auto ScrollToWinnerTileAfterReveal = 0xea0; // bool
	constexpr auto EnableStandaloneStorefront = 0xea1; // bool
	constexpr auto bEnableBattlePassStorefront = 0xea2; // bool
	constexpr auto bEnableItemPreviewInStore = 0xea3; // bool
	constexpr auto bEnableCurrencyInspectScreenBonusText = 0xea4; // bool
	constexpr auto bEnableCurrencyBonusBanner = 0xea5; // bool
	constexpr auto bEnableItemShopInvalidationBox = 0xea6; // bool
	constexpr auto ScrollToStandaloneSectionOnPopupClosed = 0xea7; // bool
	constexpr auto ItemShopOrdering = 0xea8; // TArray<EFortItemShopSection>
	constexpr auto bEnableItemShopSectionBangs = 0xeb8; // bool
	constexpr auto bEnableItemShopCommunityVotingSectionBang = 0xeb9; // bool
	constexpr auto ItemShopDefaultLandingPriority = 0xec0; // TArray<FAthenaItemShopSectionPriority>
	constexpr auto ItemShopOverrideDisplayDataList = 0xed0; // TArray<FAthenaItemShopSectionOverrideDisplayData>
	constexpr auto ItemShopDefaultLanding = 0xee0; // EFortItemShopSection
	constexpr auto ItemShopOfferSeenThreshold = 0xee4; // float
	constexpr auto CommunityVotingTileAnimated = 0xee8; // bool
	constexpr auto ScrollToComTileOnEventPopupClosed = 0xee9; // bool
	constexpr auto EnableThanksVotingPopup = 0xeea; // bool
	constexpr auto bUseItemPresentationScreenOnItemPurchased = 0xeeb; // bool
	constexpr auto CommunityVotingThanksPopupDelay = 0xeec; // float
	constexpr auto ReloadMtxExclusiveCountryCodes = 0xef0; // TArray<FString>
	constexpr auto bEnableReloadMtx = 0xf00; // bool
	constexpr auto bEnableDynamicReloadMtx = 0xf01; // bool
	constexpr auto bEnableInGameReloadMtx = 0xf02; // bool
	constexpr auto bEnableCrew = 0xf03; // bool
	constexpr auto bEnableSubscriptionInspectScreen = 0xf04; // bool
	constexpr auto bEnableBattlePassViolatorEarnedCurrency = 0xf05; // bool
	constexpr auto InGameCosmeticItemBangRefreshRate = 0xf08; // float
	constexpr auto bUseContentPatchingRestartFlow = 0xf0c; // bool
	constexpr auto bAthenaAutoPickupStackables = 0xf0d; // bool
	constexpr auto ScheduledNotifications = 0xf10; // TArray<FRuntimeOptionScheduledNotification>
	constexpr auto bEnableUnicornHighlightsOnClient = 0xf20; // bool
	constexpr auto bEnableHighlightsPromptInCompeteScreen = 0xf21; // bool
	constexpr auto bUseReturnToKairosLoadingScreen = 0xf22; // bool
	constexpr auto bForceReturnToKairosLoadingScreen = 0xf23; // bool
	constexpr auto bDebugForceLoginRelaunch = 0xf24; // bool
	constexpr auto bEnableDADUpdateCheckOnRTMM = 0xf25; // bool
	constexpr auto bShouldAllowNightNightMode = 0xf26; // bool
	constexpr auto NightNightPluginName = 0xf28; // FString
	constexpr auto NightNightCalendarEventName = 0xf38; // FString
	constexpr auto bEnableFrontendMeshRockyRidgeCheck = 0xf48; // bool
	constexpr auto bForceAllowFrontendMeshRockyRidgeCheck = 0xf49; // bool
	constexpr auto FrontendMeshRockyRidgeMetadataKey = 0xf50; // FString
	constexpr auto FrontendMeshRockyRidgeCanaryKey = 0xf60; // FString
	constexpr auto FrontendMeshRockyRidgeInitialIntervalSeconds = 0xf70; // float
	constexpr auto FrontendMeshRockyRidgeFailureMultiplier = 0xf74; // float
	constexpr auto FrontendMeshRockyRidgeMaxIntervalSeconds = 0xf78; // float
	constexpr auto FrontendMeshRockyRidgeMeshName = 0xf7c; // FName
	constexpr auto bForceEverybodyToGoNightNight = 0xf80; // bool
	constexpr auto bQueryKeychainBeforeGoingNightNight = 0xf81; // bool
	constexpr auto bSkipSubGameDuringNightNight = 0xf82; // bool
	constexpr auto bAllowCampaignFrontendToGoNightNight = 0xf83; // bool
	constexpr auto bShouldAllowForcedIntro = 0xf84; // bool
	constexpr auto ForcedIntroName = 0xf88; // FName
	constexpr auto bShowMovieInGameplayIntro = 0xf8c; // bool
	constexpr auto bSkipSubgameSelectDuringForcedIntro = 0xf8d; // bool
	constexpr auto bSkipToEndGameplayIntroOutroVideos = 0xf8e; // bool
	constexpr auto MaxGameplayCinematicLength = 0xf90; // float
	constexpr auto bUseAthenaArmory = 0xf94; // bool
	constexpr auto bEnableLiveSpectateButton = 0xf95; // bool
	constexpr auto bEnableGuidedTutorialDefensiveBuilding = 0xf96; // bool
	constexpr auto bEnableSafeZoneEditor = 0xf97; // bool
	constexpr auto bEnableSavedLoadouts = 0xf98; // bool
	constexpr auto bSavedLoadoutsUseGodTile = 0xf99; // bool
	constexpr auto bEnableSafeZoneEditorOnLogin = 0xf9a; // bool
	constexpr auto bEnableSafeZoneEditorWhenNotInApolloIntro = 0xf9b; // bool
	constexpr auto LoginFlowCMSRefreshWaitTime = 0xf9c; // float
	constexpr auto bEnableAppResumeCMSUpdate = 0xfa0; // bool
	constexpr auto bEnableMOTDAnalytics = 0xfa1; // bool
	constexpr auto bEnableTabTransitionMOTDAnalyticsEvent = 0xfa2; // bool
	constexpr auto bAllowStoreSkipOpenAnimation = 0xfa3; // bool
	constexpr auto bAllowInGameStore = 0xfa4; // bool
	constexpr auto bPostGameStoreNoLeto = 0xfa5; // bool
	constexpr auto bPostGameStoreTriggerIncrementalGC = 0xfa6; // bool
	constexpr auto bAllowInGameLocker = 0xfa7; // bool
	constexpr auto bAllowInGameCareer = 0xfa8; // bool
	constexpr auto bAllowInGameActivityBrowser = 0xfa9; // bool
	constexpr auto bEnableGuidedTutorialDirectFlush = 0xfaa; // bool
	constexpr auto bEnableGuidedTutorialABTesting = 0xfab; // bool
	constexpr auto bEnableHighlightPlayButtonABTesting = 0xfac; // bool
	constexpr auto bEnableSkipGuidedTutorialABTesting = 0xfad; // bool
	constexpr auto MaxFrontendFlowStatQueries = 0xfb0; // int32_t
	constexpr auto ApolloIntroShowMovie = 0xfb4; // bool
	constexpr auto bRunDeimosSpawnTimelines = 0xfb5; // bool
	constexpr auto TeamToPlaceMeshNetPawnsOn = 0xfb8; // int32_t
	constexpr auto bEnableAddFriendUserSearchDarkTraffic = 0xfbc; // bool
	constexpr auto bEnableExtendedUserSearchUI = 0xfbd; // bool
	constexpr auto bEnableRecursiveMatchAssignmentSearchForTeam = 0xfbe; // bool
	constexpr auto bEnableBackfillCheckForHighestTeamScore = 0xfbf; // bool
	constexpr auto bEnableBackfillCheckForTeamScoreDifference = 0xfc0; // bool
	constexpr auto BackfillCheckForHighestTeamScorePlaylistOverrides = 0xfc8; // TMap<FString, int32_t>
	constexpr auto BackfillCheckForScoreDiscrepancyPlaylistOverrides = 0x1018; // TMap<FString, float>
	constexpr auto bDisableTdmBackfilledPlayerTeleport = 0x1068; // bool
	constexpr auto bDisableWarmupRequiredPlayerCountCheck = 0x1069; // bool
	constexpr auto bAIDirectorTreatBotsAsPlayersForLOD = 0x106a; // bool
	constexpr auto bEnablePhoenix = 0x106b; // bool
	constexpr auto bBuildingPossessionShown = 0x106c; // bool
	constexpr auto LoadingContentModalWidget = 0x1070; // FSoftObjectPath
	constexpr auto bBacchusFrontendEnabled = 0x1088; // bool
	constexpr auto InvalidCreativeItemTags = 0x1090; // TArray<FName>
	constexpr auto bEnableAFortPlayerPawnOnRep_InVehicleAndUFortVehicleSeatComponentOnRep_PlayerSlotsRaceConditionFix = 0x10a0; // bool
	constexpr auto ValkyrieMajMinPatchQueryParams = 0x10a8; // FString
	constexpr auto bSprintingStrafeSnapEnabled = 0x10b8; // bool
	constexpr auto bExplicitSprintableInputRange = 0x10b9; // bool
	constexpr auto MinForwardForSprint = 0x10bc; // float
	constexpr auto MinForwardForSprintSnapping = 0x10c0; // float
	constexpr auto AccelerationStrafeMultiplierSprintOverride = 0x10c4; // float
	constexpr auto KeyboardDiagonalSprintForwardOverride = 0x10c8; // float
	constexpr auto KeyboardSprintInputWindUpTime = 0x10cc; // float
	constexpr auto KeyboardMoveInputWindUpTime = 0x10d0; // float
	constexpr auto bEnableWebAuthFNMobileOnClassicBuild = 0x10d4; // bool
	constexpr auto bPortraitWebAuthFNMobileOnClassicBuild = 0x10d5; // bool
	constexpr auto bBacchusFrontendLabelShown = 0x10d6; // bool
	constexpr auto NoWeaponZoneMaxDestroyCount = 0x10d8; // int32_t
	constexpr auto NoWeaponZoneResetDestroyCountRate = 0x10dc; // float
	constexpr auto bAllowCurieIfCreativeOrPlayground = 0x10e0; // bool
	constexpr auto bEnableServerSendPlayerInteractions = 0x10e1; // bool
	constexpr auto ServerSendPlayerInteractionsIntervalSeconds = 0x10e4; // float
	constexpr auto bEnableServerSendPlayerInteractionsRankInCreativeMode = 0x10e8; // bool
	constexpr auto bEnableServerPlayerInteractionIdleTracking = 0x10e9; // bool
	constexpr auto bEnableNonFriendSquadInteractionTracking = 0x10ea; // bool
	constexpr auto MinInteractionDurationForDispatch = 0x10f0; // double
	constexpr auto DefaultMissionGen = 0x10f8; // TSoftClassPtr<UObject>
	constexpr auto bGyroV2Enabled = 0x1120; // bool
	constexpr auto bFlickStickEnabled = 0x1121; // bool
	constexpr auto GyroAimAssistMode = 0x1124; // int32_t
	constexpr auto bForceMotionControlsEnabled = 0x1128; // bool
	constexpr auto bEnableBacchusDialogSystem = 0x1129; // bool
	constexpr auto bBacchusDialogSystemSkipConfirmationStep = 0x112a; // bool
	constexpr auto bMobileDisableResolutionReset = 0x112b; // bool
	constexpr auto bMotionAxisMobileDefaultToYaw = 0x112c; // bool
	constexpr auto bFollowCameraOptionAvailable = 0x112d; // bool
	constexpr auto bAutoCenterOptionAvailable = 0x112e; // bool
	constexpr auto bShouldRestartCreativeServersForCalendarEventChanges = 0x112f; // bool
	constexpr auto bCreativeEmoteControllerUseWhitelist = 0x1130; // bool
	constexpr auto CreativeEmoteControllerWhitelist = 0x1138; // TArray<FString>
	constexpr auto bPreventLateJoiningPlayersAfterAircraft = 0x1148; // bool
	constexpr auto AllowedPMRStatuses = 0x1150; // TArray<FString>
	constexpr auto bShowRMTPurchaseSpecialInfo = 0x1160; // bool

}


namespace FortSKPushVehicleConfigs
{

	constexpr auto PedalForceMultiplier = 0x6a8; // float
	constexpr auto PedalTopSpeedMultiplier = 0x6ac; // float
	constexpr auto PedalForceDuration = 0x6b0; // float
	constexpr auto CoastBrakingMinDelta = 0x6b4; // float
	constexpr auto CoastBrakingMaxDelta = 0x6b8; // float
	constexpr auto PedalMinDuration = 0x6bc; // float
	constexpr auto MountDuration = 0x6c0; // float
	constexpr auto DismountDuration = 0x6c4; // float
	constexpr auto MinPreDismountCooldown = 0x6c8; // float
	constexpr auto PreDismountCooldown = 0x6cc; // float
	constexpr auto PedalCooldown = 0x6d0; // float
	constexpr auto CoastBrakingStrength = 0x6d4; // float
	constexpr auto ShoppingMinPedalCoastSpeed = 0x6d8; // float
	constexpr auto VehicleDebugStrafeCoastMultiplier = 0x6dc; // float
	constexpr auto CanCoastCooldown = 0x6e0; // float
	constexpr auto MaxAutoDismountForwardSpeed = 0x6e4; // float
	constexpr auto PedalMinForwardVelocity = 0x6e8; // float
	constexpr auto FastDismountDuration = 0x6ec; // float
	constexpr auto CanCoastAfterFastDismountCooldown = 0x6f0; // float
	constexpr auto PassengerVehicleWeightShiftYawStrength = 0x6f4; // float
	constexpr auto MinPushForceMagnitude = 0x6f8; // float
	constexpr auto MinGearRampTime = 0x6fc; // float

}

namespace FortSpaghettiVehicle {

	constexpr auto CacheDriverCameraShake = 0x18e8; // UMatineeCameraShake*
	constexpr auto BounceContactRepulsionForce = 0x18f0; // float
	constexpr auto BoostForce = 0x18f4; // float
	constexpr auto MaxVerticalBoostForce = 0x18f8; // float
	constexpr auto BoostSpeedKmh = 0x18fc; // float
	constexpr auto BaseSphericalDriveParams = 0x1900; // FSphericalDriveParams
	constexpr auto BaseTowhookParams = 0x1948; // FTowhookParams
	constexpr auto TowhookSpringDeformationRateOnGround = 0x1a18; // float
	constexpr auto bAutoRetractGrapple = 0x1a1c; // bool
	constexpr auto bCanHoldGrapple = 0x1a1d; // bool
	constexpr auto TowhookInterpSpeed = 0x1a20; // float
	constexpr auto TowhookInterpMaxPercentPerSecond = 0x1a24; // float
	constexpr auto TowhookMaxInvalidateTargetAngleDeg = 0x1a28; // float
	constexpr auto TowhookMaxInvalidateTargetDot = 0x1a2c; // float
	constexpr auto InternalBlockerCollisionName = 0x1a30; // FName
	constexpr auto BoostBounceAction = 0x1a38; // FFortRechargingActionTimer
	constexpr auto ProjectileTraceChannel = 0x1b14; // ECollisionChannel
	constexpr auto ProjectileSpeedKmh = 0x1b18; // float
	constexpr auto OnTowhookShot = 0x1b20; // FMulticastInlineDelegate
	constexpr auto OnTowhookAttached = 0x1b30; // FMulticastInlineDelegate
	constexpr auto OnTowhookDetached = 0x1b40; // FMulticastInlineDelegate
	constexpr auto OnTowhookMissed = 0x1b50; // FMulticastInlineDelegate
	constexpr auto OnTowhookHolstered = 0x1b60; // FMulticastInlineDelegate
	constexpr auto OnTowhookYanked = 0x1b70; // FMulticastInlineDelegate
	constexpr auto OnExtendToggled = 0x1b80; // FMulticastInlineDelegate
	constexpr auto ReplicatedAttachState = 0x1b90; // FNetTowhookAttachState
	constexpr auto FortSpaghettiVehicleConfigs = 0x1c00; // UFortSpaghettiVehicleConfigs*
	constexpr auto NetTowhookAimDir = 0x23a0; // FVector_NetQuantizeNormal
	constexpr auto CacheCoilIdleTopR = 0x23c8; // UParticleSystemComponent*
	constexpr auto CacheCoilIdleTopL = 0x23d0; // UParticleSystemComponent*
	constexpr auto CacheCoilIdleBottomR = 0x23d8; // UParticleSystemComponent*
	constexpr auto CacheCoilIdleBottomL = 0x23e0; // UParticleSystemComponent*
	constexpr auto CacheBoostFX = 0x23e8; // UParticleSystemComponent*
	constexpr auto CacheDustFX = 0x23f0; // UParticleSystemComponent*
	constexpr auto CacheAudioMovement = 0x23f8; // UFortVehicleAudioVoice*
	constexpr auto CacheAudioWind = 0x2400; // UFortVehicleAudioVoice*
	constexpr auto CacheAudioTowCable = 0x2408; // UFortVehicleAudioVoice*
}

namespace FortVehicleSeatWeaponComponent {

	constexpr auto MuzzleSocketNames = 0xb0; // TArray<FName>
	constexpr auto WeaponSeatDefinitions = 0xc0; // TArray<FWeaponSeatDefinition>
	constexpr auto ActiveSeatIdx = 0xd0; // int32_t
	constexpr auto CachedWeaponDef = 0xd8; // UFortWeaponRangedItemDefinition*
	constexpr auto CachedOverheatMax = 0xe0; // float
	constexpr auto CachedOverheatValue = 0xe4; // float
	constexpr auto OverheatValueRepped = 0xe8; // float
	constexpr auto bWeaponEquipped = 0xec; // bool
	constexpr auto bUseVehicleOrientationForShootingCone = 0xed; // bool
	constexpr auto bControlledByMultipleSeats = 0xee; // bool
	constexpr auto bUseWeaponCameraMode = 0xef; // bool
	constexpr auto ActorBase = 0xf0; // AActor*
	constexpr auto bReadyToSleep = 0xf8; // bool
	constexpr auto TotalShotsAllowedThenShutdown = 0x100; // FScalableFloat
	constexpr auto ShotsFired = 0x128; // int32_t
	constexpr auto OnSeatedPlayerTargetingChanged = 0x130; // FMulticastInlineDelegate
	constexpr auto OnOverheatStateChanged = 0x140; // FMulticastInlineDelegate
	constexpr auto OnEquipMountedWeapon = 0x150; // FMulticastInlineDelegate
	constexpr auto bSeatUsesFastSharedReplication = 0x160; // bool
	constexpr auto bWeaponOverheatDataHasBeenCached = 0x161; // bool
	constexpr auto CachedWeaponOverheatData = 0x164; // FFortCachedWeaponOverheatData
	constexpr auto CachedWeaponState = 0x17c; // FVehicleWeapon_RetainedData
	constexpr auto bSaveAndRestoreWeaponData = 0x188; // bool
	constexpr auto WeaponSklMeshComponent = 0x190; // USkeletalMeshComponent*
	constexpr auto VehicleSocketName = 0x198; // FName
	constexpr auto VehiclePawnAttachSocketName = 0x19c; // FName
	constexpr auto AttachmentAngleOffsetYaw = 0x1a0; // float
	constexpr auto DynamicReticleWidgetComponent = 0x1d8; // UFortVehicleDynamicReticleWidgetComponent*
	constexpr auto CachedWeapon = 0x1e0; // AFortWeaponRanged*

}

namespace FortVehicleAimingWeaponComp {


	constexpr auto bShouldResetCameraHorizontallyToBarrelWhenEntered = 0x1e8; // bool
	constexpr auto bShouldResetCameraVerticallyToBarrelWhenEntered = 0x1e9; // bool
	constexpr auto StartCameraResetToBarrelTime = 0x1ec; // float
	constexpr auto bAllowCameraLocalVerticalRotationOnly = 0x1f0; // bool
	constexpr auto AimBlendInSpeed = 0x1f4; // float
	constexpr auto AimBlendOutSpeed = 0x1f8; // float
	constexpr auto bSetDesiredPitchWhenUnmanned = 0x1fc; // bool
	constexpr auto bSetDesiredYawWhenUnmanned = 0x1fd; // bool
	constexpr auto bUseGlobalOnlyAiming = 0x1fe; // bool
	constexpr auto LocalAimOffsetWhenPitchedUp = 0x200; // FVector
	constexpr auto LocalAimOffsetWhenPitchedFlat = 0x218; // FVector
	constexpr auto LocalAimOffsetWhenPitchedDown = 0x230; // FVector
	constexpr auto RotCyclesPerFullTurnHoriz = 0x248; // float
	constexpr auto RotCyclesPerFullTurnVert = 0x24c; // float
	constexpr auto bCorrectAimFromCameraToMuzzle = 0x250; // bool
	constexpr auto bUseClientMuzzleLocationAuthority = 0x251; // bool
	constexpr auto YawDiffRemaining = 0x254; // float
	constexpr auto PitchDiffRemaining = 0x258; // float
	constexpr auto bInterpolateAimToDesired = 0x25c; // bool
	constexpr auto LastTickTime = 0x260; // float
	constexpr auto TickCount = 0x264; // int32_t
	constexpr auto CameraAimBlendFactor = 0x268; // float
	constexpr auto TargetLocalAimOrientation = 0x270; // FRotator
	constexpr auto TargetLocalAimOrientationCorrected = 0x288; // FRotator
	constexpr auto CurrentLocalAimOrientation = 0x2a0; // FRotator
	constexpr auto CurrentLocalAimOrientationCorrected = 0x2b8; // FRotator
	constexpr auto TargetLocalAimOrientationRepped = 0x2d0; // FRotator
	constexpr auto TargetLocalAimOrientationCorrectedRepped = 0x2e8; // FRotator
	constexpr auto UnmannedDesiredPitch = 0x300; // float
	constexpr auto UnmannedDesiredYaw = 0x304; // float
	constexpr auto HorizAimRotDelta = 0x308; // float
	constexpr auto VertAimRotDelta = 0x30c; // float
	constexpr auto AimSourceType = 0x310; // EFortAbilityTargetingSource
	constexpr auto bPlayerEnteredThisFrame = 0x311; // bool
	constexpr auto bApplyOwnerRotationToAimWhenUnmanned = 0x312; // bool
	constexpr auto MaxYawPerSecondThreshold = 0x314; // float
	constexpr auto MaxPitchPerSecondThreshold = 0x318; // float
	constexpr auto PitchConstraintAngleOffset = 0x31c; // float
	constexpr auto AimInterpSpeed = 0x320; // float
	constexpr auto InitialCameraInterpSpeed = 0x324; // float
	constexpr auto InitialCameraLerpTime = 0x328; // float
	constexpr auto MinDistanceForCorrection = 0x32c; // float
	constexpr auto AnimatedMuzzleLocation = 0x330; // FVector

}

namespace FortVehicleFuelComponent {

	constexpr auto OnFuelChanged = 0xb0; // FMulticastInlineDelegate
	constexpr auto OnRefueledFromEmpty = 0xc0; // FMulticastInlineDelegate
	constexpr auto OnOutOfFuel = 0xd0; // FMulticastInlineDelegate
	constexpr auto OnLowFuel = 0xe0; // FMulticastInlineDelegate
	constexpr auto OwnerVehicle = 0xf0; // AFortAthenaVehicle*
	constexpr auto ServerFuel = 0xf8; // float
	constexpr auto OutOfFuelSound = 0x100; // USoundBase*
	constexpr auto LowFuelSound = 0x108; // USoundBase*
	constexpr auto LowFuelRepeatingPing = 0x110; // USoundBase*
	constexpr auto UsesFuelSystem = 0x118; // FScalableFloat
	constexpr auto InitializeWithStartingFuel = 0x140; // FScalableFloat
	constexpr auto FuelTankCapacity = 0x168; // FScalableFloat
	constexpr auto FuelPerSecondIdle = 0x190; // FScalableFloat
	constexpr auto FuelPerSecondDriving = 0x1b8; // FScalableFloat
	constexpr auto FuelPerSecondBoosting = 0x1e0; // FScalableFloat
	constexpr auto MinFuelAtSpawn = 0x218; // FScalableFloat
	constexpr auto MaxFuelAtSpawn = 0x240; // FScalableFloat
	constexpr auto InfiniteFuel = 0x268; // FScalableFloat
	constexpr auto LowFuelRepeatingPingDelay = 0x290; // FScalableFloat
	constexpr auto LowFuelPercent = 0x2b8; // FScalableFloat
	constexpr auto CustomFuelUI = 0x2e0; // TArray<FVehicleSpecificUIDetails>

}

namespace FortVehicleItemDefinition {

	constexpr auto VehicleMinSpawnPercent = 0x8e8; // FScalableFloat
	constexpr auto VehicleMaxSpawnPercent = 0x910; // FScalableFloat
	constexpr auto MaxNumberCanSpawn = 0x938; // FScalableFloat
	constexpr auto MinPercentWithGas = 0x960; // FScalableFloat
	constexpr auto MaxPercentWithGas = 0x988; // FScalableFloat
	constexpr auto MinPercentInoperable = 0x9b0; // FScalableFloat
	constexpr auto MaxPercentInoperable = 0x9d8; // FScalableFloat
	constexpr auto WrapPreviewTransform = 0xa00; // FTransform
	constexpr auto WrapPreviewSectionMask = 0xa60; // int32_t
	constexpr auto bUseInWrapPreviewList = 0xa64; // char : 1
	constexpr auto VehicleActorClass = 0xa68; // TSoftClassPtr<UObject>
	constexpr auto PreviewSkeletalMesh = 0xa90; // TSoftObjectPtr<USkeletalMesh>
	constexpr auto SpawnVehicleNames = 0xab8; // TArray<FString>
	constexpr auto MaxSpawnDistance = 0xac8; // float
	constexpr auto SpawnWithMods = 0xad0; // FGameplayTagContainer

}

namespace FortVehicleManager {

	constexpr auto OnVehicleCountByTagChanged = 0x2a8; // FMulticastInlineDelegate
	constexpr auto Vehicles = 0x2c0; // TArray<AFortAthenaVehicle*>
	constexpr auto VehicleCountByTagMap = 0x2f0; // TMap<FGameplayTag, int32_t>

}

namespace FortVehicleMovementSet {

	constexpr auto FrontLateralFrictionScale = 0x30; // FFortGameplayAttributeData
	constexpr auto RearLateralFrictionScale = 0x58; // FFortGameplayAttributeData
	constexpr auto BrakeForceTractionScale = 0x80; // FFortGameplayAttributeData
	constexpr auto ForwardForceTractionScale = 0xa8; // FFortGameplayAttributeData
	constexpr auto SlopeAntigravityScale = 0xd0; // FFortGameplayAttributeData
	constexpr auto TopSpeedScale = 0xf8; // FFortGameplayAttributeData
	constexpr auto VehicleGravityScale = 0x120; // FFortGameplayAttributeData

}

namespace FortWeakPoint {
	constexpr auto OnWeakPointStateChangedDelegate = 0x968; // FMulticastInlineDelegate
	constexpr auto CachedWeakPointCoordinator = 0x978; // UFortWeakPointsCoordinatorComponent*
	constexpr auto WeakPointState = 0x980; // EFortWeakPointState
	constexpr auto WeakPointAttachmentSocketName = 0x984; // FName
	constexpr auto bShouldDisplayHealthBarWhenActive = 0x988; // bool
	constexpr auto bShouldRegisterForAimAssist = 0x989; // bool

}

namespace FortWeaponAttrSet{

	constexpr auto WeaponChanceToNotConsumeAmmo = 0x30; // FFortGameplayAttributeData
constexpr auto AccumulatedWeaponChanceToNotConsumeAmmo = 0x58; // FFortGameplayAttributeData
constexpr auto WeaponRateOfFire = 0x80; // FFortGameplayAttributeData
constexpr auto WeaponHorizontalRecoil = 0xa8; // FFortGameplayAttributeData
constexpr auto WeaponVerticalRecoil = 0xd0; // FFortGameplayAttributeData
constexpr auto WeaponSpreadReduction = 0xf8; // FFortGameplayAttributeData
constexpr auto WeaponReloadSpeed = 0x120; // FFortGameplayAttributeData
constexpr auto WeaponAmmoClipSize = 0x148; // FFortGameplayAttributeData
constexpr auto WeaponChargeRate = 0x170; // FFortGameplayAttributeData
constexpr auto WeaponOverheatMultiplier = 0x198; // FFortGameplayAttributeData
constexpr auto WeaponOverheatMaxMultiplier = 0x1c0; // FFortGameplayAttributeData
constexpr auto WeaponOverheatCoolingMultiplier = 0x1e8; // FFortGameplayAttributeData
constexpr auto WeaponOverheatCooldownMultiplier = 0x210; // FFortGameplayAttributeData
constexpr auto CharacterItemDurabilityDecayModifier = 0x238; // FFortGameplayAttributeData

}

namespace FortWeaponPickaxeAthena {
	constexpr auto WeaponChanceToNotConsumeAmmo = 0x30; // FFortGameplayAttributeData
	constexpr auto AccumulatedWeaponChanceToNotConsumeAmmo = 0x58; // FFortGameplayAttributeData
	constexpr auto WeaponRateOfFire = 0x80; // FFortGameplayAttributeData
	constexpr auto WeaponHorizontalRecoil = 0xa8; // FFortGameplayAttributeData
	constexpr auto WeaponVerticalRecoil = 0xd0; // FFortGameplayAttributeData
	constexpr auto WeaponSpreadReduction = 0xf8; // FFortGameplayAttributeData
	constexpr auto WeaponReloadSpeed = 0x120; // FFortGameplayAttributeData
	constexpr auto WeaponAmmoClipSize = 0x148; // FFortGameplayAttributeData
	constexpr auto WeaponChargeRate = 0x170; // FFortGameplayAttributeData
	constexpr auto WeaponOverheatMultiplier = 0x198; // FFortGameplayAttributeData
	constexpr auto WeaponOverheatMaxMultiplier = 0x1c0; // FFortGameplayAttributeData
	constexpr auto WeaponOverheatCoolingMultiplier = 0x1e8; // FFortGameplayAttributeData
	constexpr auto WeaponOverheatCooldownMultiplier = 0x210; // FFortGameplayAttributeData
	constexpr auto CharacterItemDurabilityDecayModifier = 0x238; // FFortGameplayAttributeData

}

namespace FortWeaponRanged {

	constexpr auto OnProjectileSpawned = 0x1598; // FMulticastInlineDelegate
	constexpr auto TracerTemplate = 0x15c0; // AFortTracerBase*
	constexpr auto bAllowAutomaticWeaponCatchup = 0x15c8; // bool
	constexpr auto CurrentNumBullets = 0x15d0; // int32_t
	constexpr auto ScopeTargetingMuzzleOffset = 0x15d8; // FVector
	constexpr auto CurrentMuzzleBlockedLocation = 0x15f0; // FVector
	constexpr auto CurrentDamageStart = 0x1608; // EFortAbilityTargetingSource
	constexpr auto MaxTargetingAimAdjustment = 0x1610; // FRotator
	constexpr auto bMaintainAimLocationDuringTargeting = 0x1628; // char : 1
	constexpr auto bUseFirstPersonTargeting = 0x1628; // char : 1
	constexpr auto bUseScopeTargeting = 0x1628; // char : 1
	constexpr auto bShouldDisplayAmmoCounterDuringSecondaryFire = 0x1628; // char : 1
	constexpr auto bAlwaysAimFromMuzzle = 0x1628; // char : 1
	constexpr auto bShouldAimFromMuzzleAtCloseRange = 0x1628; // char : 1
	constexpr auto bShouldHideReserveAmmo = 0x1628; // char : 1
	constexpr auto bShouldDisplayAmmoCounter = 0x1628; // char : 1
	constexpr auto bUseShellsParticles = 0x1629; // char : 1
	constexpr auto bUsePersistentBeam = 0x1629; // char : 1
	constexpr auto bUseImpactDecals = 0x1629; // char : 1
	constexpr auto bUseImpactFXForProjectileOverlaps = 0x1629; // char : 1
	constexpr auto bUseImpactFXForProjectiles = 0x1629; // char : 1
	constexpr auto bActivateRangeAbilityPerBurstShot = 0x1629; // char : 1
	constexpr auto bUseBeamParticles = 0x1629; // char : 1
	constexpr auto bPersistentFireFX = 0x1629; // char : 1
	constexpr auto bUseTracers = 0x162a; // char : 1
	constexpr auto bUseOverrideBaseSpread = 0x162a; // char : 1
	constexpr auto bIsMuzzleTraceNearWall = 0x162a; // char : 1
	constexpr auto MuzzleTraceNearWallThreshold = 0x162c; // float
	constexpr auto BeamSignificance = 0x1640; // FFortEffectDistanceQuality
	constexpr auto ImpactSignificance = 0x1658; // FFortEffectDistanceQuality
	constexpr auto DecalSignificance = 0x1670; // FFortEffectDistanceQuality
	constexpr auto ScopeImpactEffectDistanceOffset = 0x1688; // float
	constexpr auto MuzzlePSC = 0x1690; // UFXSystemComponent*
	constexpr auto ShellPSC = 0x1698; // UFXSystemComponent*
	constexpr auto BeamParticleSystem = 0x16a0; // UParticleSystem*
	constexpr auto BeamNiagaraSystemAsset = 0x16a8; // TSoftObjectPtr<UNiagaraSystem>
	constexpr auto BeamSourceSocketName = 0x16d0; // FName
	constexpr auto FortSpawnPropOverride = 0x16d8; // USkeletalMesh*
	constexpr auto FortSpawnPropAnimOverride = 0x16e0; // UAnimationAsset*
	constexpr auto DecalSizeMin = 0x16e8; // FVector
	constexpr auto DecalSizeMax = 0x1700; // FVector
	constexpr auto DecalLifespanMin = 0x1718; // float
	constexpr auto DecalLifespanMax = 0x171c; // float
	constexpr auto DecalColorStart = 0x1720; // FLinearColor
	constexpr auto DecalColorEnd = 0x1730; // FLinearColor
	constexpr auto DecalMaterial = 0x1740; // UMaterialInterface*
	constexpr auto DecalTexture = 0x1748; // UTexture2D*
	constexpr auto SurfaceAcceptingDecals = 0x1750; // TArray<EPhysicalSurface>
	constexpr auto ShellReloadCounter = 0x1764; // int32_t
	constexpr auto TargetingRotAdjustmentTotal = 0x1770; // FRotator
	constexpr auto LastTargetingRotAdjustmentWeight = 0x1788; // float
	constexpr auto ScopePostProcessEnabled = 0x1800; // bool
	constexpr auto ScopePostProcessBlendWeight = 0x1804; // float
	constexpr auto ScopePostProcessMaterial = 0x1808; // TArray<FWeightedBlendable>
	constexpr auto BulletPattern = 0x1820; // TArray<FFortBulletPatternEntry>
	constexpr auto BeamNiagaraSystemInstance = 0x1870; // UNiagaraSystem*
	constexpr auto bUseAthenaRecoil = 0x18d4; // char : 1
	constexpr auto bUseAthenaPerfectADSAim = 0x18d4; // char : 1
	constexpr auto bFirstShotAccuracyCheckVehicleMovement = 0x18d4; // char : 1
	constexpr auto FirstShotAccuracyMinWaitTime = 0x18d8; // float
	constexpr auto BulletCountForPerBulletRecoil = 0x18dc; // int32_t
	constexpr auto FireAnimation = 0x1910; // UAnimMontage*
	constexpr auto FireDownsightsAnimation = 0x1918; // UAnimMontage*
	constexpr auto FireFromCrouchWalkAnimation = 0x1920; // UAnimMontage*
	constexpr auto CockingAnimation = 0x1928; // UAnimMontage*
	constexpr auto WeaponFireMontage = 0x1930; // UAnimMontage*
	constexpr auto WeaponFireDownsightsMontage = 0x1938; // UAnimMontage*
	constexpr auto WeaponFireFromCrouchWalkMontage = 0x1940; // UAnimMontage*
	constexpr auto WeaponCockingMontage = 0x1948; // UAnimMontage*
	constexpr auto BeamPSC = 0x1950; // UFXSystemComponent*
	constexpr auto CrouchWalkSpeedThreshold = 0x1958; // float
	constexpr auto bEnableRecoilDelay = 0x195c; // bool
	constexpr auto OnOverheatValueChanged = 0x1980; // FMulticastInlineDelegate
	constexpr auto OverheatState = 0x1990; // EFortWeaponOverheatState
	constexpr auto OverheatedAnimation = 0x1998; // UAnimMontage*
	constexpr auto WeaponOverheatedAnimation = 0x19a0; // UAnimMontage*
	constexpr auto bCooldownWhileOverheated = 0x19a8; // bool
	constexpr auto OverheatValue = 0x19ac; // float
	constexpr auto TimeHeatWasLastAdded = 0x19b4; // float
	constexpr auto TimeOverheatedBegan = 0x19b8; // float
	constexpr auto bCacheAimPointOnFire = 0x19bc; // bool
	constexpr auto CachedAimPoint = 0x19c0; // FVector
	constexpr auto CachedLODSettingsManager = 0x19f0; // TScriptInterface<IFortAthenaAILODSettings>

}



namespace FortWorldSettings {

	constexpr auto ActorsNeedingWorldReady = 0x4a8; // TArray<AActor*>
	constexpr auto WorldCells = 0x4b8; // TArray<int32_t>
	constexpr auto WorldCellsOrigin = 0x4c8; // FVector
	constexpr auto WorldCellsFlags = 0x4e0; // int32_t
	constexpr auto bGenerateTestLevelSaves = 0x4e4; // char : 1
	constexpr auto bDisableCullDistance = 0x4e4; // char : 1
	constexpr auto bUseWorldSpecificCullDistanceOverride = 0x4e4; // char : 1
	constexpr auto bOverrideMainMapSettings = 0x4e4; // char : 1
	constexpr auto bValidateNavGraphConnectivity = 0x4e4; // char : 1
	constexpr auto bLimitNavGraphSkyCells = 0x4e4; // char : 1
	constexpr auto bUseProceduralFoliage = 0x4e4; // char : 1
	constexpr auto bUseConditionalBuildingFoundations = 0x4e4; // char : 1
	constexpr auto bAllowBuildingStreamingData = 0x4e5; // char : 1
	constexpr auto SplineHLODIndex = 0x4e8; // int32_t
	constexpr auto bShowTimeOfDayManager = 0x4ec; // char : 1
	constexpr auto MinCullObjectSize = 0x4f0; // float
	constexpr auto MinCullDistance = 0x4f4; // float
	constexpr auto MaxCullObjectSize = 0x4f8; // float
	constexpr auto MaxCullDistance = 0x4fc; // float
	constexpr auto OverrideMinimapMaterial = 0x500; // UMaterialInterface*
	constexpr auto PvPMapWorldCenter = 0x508; // FVector2D
	constexpr auto MapZOffset = 0x518; // float
	constexpr auto MapRotation = 0x520; // FRotator
	constexpr auto MapInitialMask = 0x538; // UTexture2D*
	constexpr auto bSpawnPhysicsObjectManager = 0x540; // char : 1
	constexpr auto bSpawnVehicleManager = 0x540; // char : 1
	constexpr auto MapWorldScale = 0x544; // float
	constexpr auto MiniMapZoom = 0x548; // float
	constexpr auto AircraftPathBrush = 0x550; // FSlateBrush
	constexpr auto AircraftMidlinePathBrush = 0x620; // FSlateBrush
	constexpr auto AircraftPathTeamIndicatorBrush = 0x6f0; // FSlateBrush
	constexpr auto SafeZoneFinalPosBrush = 0x7c0; // FSlateBrush
	constexpr auto NavGraphSkyCells = 0x890; // TArray<FIntPoint>
	constexpr auto SearchSpeedOverride = 0x8a0; // UCurveTable*
	constexpr auto ResourceRateOverride = 0x8a8; // UCurveTable*
	constexpr auto SoundBodyHeadshotRequired = 0x8b0; // USoundBase*
	constexpr auto bSpawnTimeOfDayManager = 0x8b8; // char : 1
	constexpr auto bDisableGlobalWeatherEvents = 0x8b8; // char : 1
	constexpr auto WorldTimeOfDayManager = 0x8c0; // TSoftClassPtr<UObject>
	constexpr auto WorldMusicManager = 0x8e8; // TSoftClassPtr<UObject>
	constexpr auto WorldMusicManagerBank = 0x910; // UFortMusicManagerBank*
	constexpr auto DefaultWorldTimeOfDayManager = 0x918; // TSoftClassPtr<UObject>
	constexpr auto ZoneThemeTimeOfDayManager = 0x940; // TSoftClassPtr<UObject>
	constexpr auto MissionTimeOfDayManager = 0x968; // TSoftClassPtr<UObject>
	constexpr auto ZoneThemeMusicManager = 0x990; // TSoftClassPtr<UObject>
	constexpr auto ZoneThemeMusicManagerBank = 0x9b8; // UFortMusicManagerBank*
	constexpr auto BuildingFoundationStreamingData = 0x9c0; // TArray<FBuildingFoundationStreamingData>
	constexpr auto TimeOfDayManager = 0x9d0; // AFortTimeOfDayManager*
	constexpr auto VehicleManager = 0x9d8; // AFortVehicleManager*
	constexpr auto PhysicsObjectManager = 0x9e0; // AFortPhysicsObjectManager*
	constexpr auto LevelOverlayManager = 0x9e8; // UFortLevelOverlayManager*

}

namespace GameDataBR {

	constexpr auto AnalyticsItemExclusionDataBR = 0x30; // TSoftObjectPtr<UFortAnalyticsItemExclusions>
	constexpr auto LootTierDataTablesBR = 0x58; // TArray<TSoftObjectPtr<UDataTable>>
	constexpr auto LootPackageDataTablesBR = 0x68; // TArray<TSoftObjectPtr<UDataTable>>
	constexpr auto QuestEventXPTable = 0x78; // TSoftObjectPtr<UDataTable>
	constexpr auto QuestEventXPRegistry = 0xa0; // FDataRegistryType
	constexpr auto RarityTokens = 0xa8; // TArray<TSoftObjectPtr<UFortTokenType>>
	constexpr auto NamedWeightTagQueryTable = 0xb8; // TSoftObjectPtr<UDataTable>
	constexpr auto AIGoalManagerBR = 0xe0; // TSoftClassPtr<UObject>
	constexpr auto AIDirectorBR = 0x108; // TSoftClassPtr<UObject>
	constexpr auto DefaultDamageReceiverClassBR = 0x130; // TSoftClassPtr<UObject>
	constexpr auto FeedbackManagerClassBR = 0x158; // TSoftClassPtr<UObject>
	constexpr auto UIFeedbackBankBR = 0x180; // TSoftObjectPtr<UFortUIFeedbackBank>
	constexpr auto DefaultHeroBR = 0x1a8; // TSoftObjectPtr<UFortHeroType>
	constexpr auto PlayerAbilitySetBR = 0x1d0; // TSoftObjectPtr<UFortAbilitySet>
	constexpr auto CompetitiveIdentityDataTable = 0x1f8; // TSoftObjectPtr<UDataTable>
	constexpr auto FortItemsForEventMapping = 0x220; // TSoftObjectPtr<UFortItemsForEventMapping>
	constexpr auto FortItemToPickupBGAMapping = 0x248; // TSoftObjectPtr<UFortItemToBuildingGameplayActorPickupMapping>
	constexpr auto WeaponReticleExtensions = 0x270; // TSoftObjectPtr<UFortWeaponReticleExtensionData>
	constexpr auto FeedbackEventData = 0x298; // TSoftObjectPtr<UFortGameplayFeedbackEventData>
	constexpr auto DefaultRebootVanIndicatorClass = 0x2c0; // TSoftClassPtr<UObject>
	constexpr auto DefaultContextTutorialIndicatorClass = 0x2e8; // TSoftClassPtr<UObject>
	constexpr auto DefaultEliminationIndicatorClass = 0x310; // TSoftClassPtr<UObject>
	constexpr auto CreativeRealEstatePlotTable = 0x338; // TSoftObjectPtr<UDataTable>
	constexpr auto CreativeBetaPermissions = 0x360; // UCreativeBetaPermissionsDataAsset*
	constexpr auto CreativeDynamicXp = 0x368; // TSoftObjectPtr<UCreativeDynamicXpDataAsset>
	constexpr auto CreativePlaysetProps = 0x390; // TSoftObjectPtr<UCreativePlaysetPropsDataAsset>
	constexpr auto CachedCreativeInventory = 0x3b8; // TMap<FPrimaryAssetId, FCreativeItemMetaData>
	constexpr auto CachedCreativeRealEstatePlots = 0x408; // TArray<FPrimaryAssetId>
	constexpr auto CachedCreativeBetaPermissions = 0x418; // TMap<FPrimaryAssetId, FCreativeBetaPermission>
	constexpr auto CachedCreativePlaysetProps = 0x468; // TSet<FName>
	constexpr auto CreativeTagsTable = 0x4b8; // TSoftObjectPtr<UDataTable>
	constexpr auto CreativeTagCategoriesTable = 0x4e0; // TSoftObjectPtr<UDataTable>
	constexpr auto MapPreloadData = 0x508; // TSoftObjectPtr<UAthenaMapPreloadData>
	constexpr auto FortWeaponPickupSpawnAmmoData = 0x530; // TSoftObjectPtr<UFortWeaponPickupSpawnAmmoData>
	constexpr auto FrontendGameStateComponents = 0x558; // TArray<TSoftClassPtr<UObject>>
	constexpr auto FortFactionMapping = 0x568; // TSoftObjectPtr<UFortFactionMapping>
	constexpr auto ItemWrapConfigAsset = 0x590; // TSoftObjectPtr<UFortItemWrapMappingData>
	constexpr auto DefaultGliderAnimSet = 0x5b8; // TSoftObjectPtr<UFortPlayerGliderAnimSet>
	constexpr auto UmbrellaGliderAnimSet = 0x5e0; // TSoftObjectPtr<UFortPlayerGliderAnimSet>
	constexpr auto ItemDefToItemVariantDataMappingAsset = 0x608; // TSoftObjectPtr<UFortItemDefToItemVariantDataMapping>
	constexpr auto WeaponUpgradeTable = 0x630; // TSoftObjectPtr<UDataTable>
	constexpr auto DefaultGlobalCurrencyItemDefinition = 0x658; // TSoftObjectPtr<UFortResourceItemDefinition>
	constexpr auto DefaultCurrencyPayoutTable = 0x680; // TSoftObjectPtr<UCurveTable>
	constexpr auto DefaultLootGroupData = 0x6a8; // TSoftObjectPtr<UFortLootGroupWeightedRollingData>
	constexpr auto PlayerAttributesClampingDataTable = 0x6d0; // TSoftObjectPtr<UDataTable>
	constexpr auto BotItemDataTable = 0x6f8; // TSoftObjectPtr<UDataTable>
	constexpr auto BotSupportedItemTags = 0x720; // FGameplayTagContainer
	constexpr auto FallbackSeason = 0x758; // UAthenaSeasonItemDefinition*
	constexpr auto FallbackRepeatableDailiesCard = 0x760; // UFortRepeatableDailiesCardItemDefinition*
	constexpr auto UnableToPerformActionMessages = 0x768; // TArray<FGameplayTagMessage>
	constexpr auto HUDVisibilityGameplayTags = 0x778; // TArray<FSettingsHUDVisibilityAndText>
	constexpr auto TimeOfDayRGBForPeripherals = 0x788; // UCurveLinearColor*
	constexpr auto AthenaSoundMix = 0x790; // USoundMix*
	constexpr auto AthenaReverbEffect = 0x798; // UReverbEffect*
	constexpr auto AthenaReverbEffectTag = 0x7a0; // FName
	constexpr auto VisualizationSoundMix = 0x7a8; // USoundMix*
	constexpr auto RespawnDataTable = 0x7b0; // UFortRespawnDataTable*
	constexpr auto NamedWeightsByPoi = 0x7b8; // UPoiNamedWeights*
	constexpr auto AthenaMemoryCostRegister = 0x7c0; // UAthenaMemoryCostRegister*

}

namespace FortPlayerDBNORevivedParams {
	constexpr auto RevivedPlayer = 0x28; // AFortPlayerPawn*
	constexpr auto RevivedBy = 0x30; // AController*

}

namespace FortPlayerDBNOEnterParams
{
	constexpr auto KilledPlayer = 0x28; // AFortPlayerPawn*
	constexpr auto KilledBy = 0x30; // AController*

}

namespace ULocalPlayer
{
	constexpr auto ViewportClient = 0x70; // UGameViewportClient*
	constexpr auto AspectRatioAxisConstraint = 0xb0; // EAspectRatioAxisConstraint
	constexpr auto PendingLevelPlayerControllerClass = 0xb8; // APlayerController*
	constexpr auto bSentSplitJoin = 0xc0; // char : 1
	constexpr auto ControllerId = 0xd8; // int32_t
}

namespace ULevel
{
	constexpr auto OwningWorld = 0xb8; // UWorld*
	constexpr auto Model = 0xc0; // UModel*
	constexpr auto ModelComponents = 0xc8; // TArray<UModelComponent*>
	constexpr auto ActorCluster = 0xd8; // ULevelActorContainer*
	constexpr auto NumTextureStreamingUnbuiltComponents = 0xe0; // int32_t
	constexpr auto NumTextureStreamingDirtyResources = 0xe4; // int32_t
	constexpr auto LevelScriptActor = 0xe8; // ALevelScriptActor*
	constexpr auto NavListStart = 0xf0; // ANavigationObjectBase*
	constexpr auto NavListEnd = 0xf8; // ANavigationObjectBase*
	constexpr auto NavDataChunks = 0x100; // TArray<UNavigationDataChunk*>
	constexpr auto LightmapTotalSize = 0x110; // float
	constexpr auto ShadowmapTotalSize = 0x114; // float
	constexpr auto StaticNavigableGeometry = 0x118; // TArray<FVector>
	constexpr auto StreamingTextureGuids = 0x128; // TArray<FGuid>
	constexpr auto StreamingTextures = 0x138; // TArray<FName>
	constexpr auto PackedTextureStreamingQualityLevelFeatureLevel = 0x148; // uint32_t
	constexpr auto LevelBuildDataId = 0x210; // FGuid
	constexpr auto MapBuildData = 0x220; // UMapBuildDataRegistry*
	constexpr auto LightBuildLevelOffset = 0x228; // FIntVector
	constexpr auto bIsLightingScenario = 0x234; // char : 1
	constexpr auto bTextureStreamingRotationChanged = 0x234; // char : 1
	constexpr auto bStaticComponentsRegisteredInStreamingManager = 0x234; // char : 1
	constexpr auto bIsVisible = 0x234; // char : 1
	constexpr auto bIsPartitioned = 0x236; // char : 1
	constexpr auto WorldSettings = 0x298; // AWorldSettings*
	constexpr auto WorldDataLayers = 0x2a0; // AWorldDataLayers*
	constexpr auto AssetUserData = 0x2b0; // TArray<UAssetUserData*>
	constexpr auto DestroyedReplicatedStaticActors = 0x2d0; // TArray<FReplicatedStaticActorDestructionInfo>
}

//YouTube : EFK
//Discord : EFK#6607
//Twitter : EFK
//Twitch : Zeusty
